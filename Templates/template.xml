<?xml version="1.0" encoding="UTF-8"?>
<template ref="template" name="Template" tags="">
  <desc/>
  <diagram draft="false">
    <schema>PG14R3JhcGhNb2RlbCBkeD0iMjQ4MSIgZHk9IjE0NjkiIGdyaWQ9IjAiIGdyaWRTaXplPSIxMCIgZ3VpZGVzPSIxIiB0b29sdGlwcz0iMSIgY29ubmVjdD0iMSIgYXJyb3dzPSIxIiBmb2xkPSIxIiBwYWdlPSIwIiBwYWdlU2NhbGU9IjEiIHBhZ2VXaWR0aD0iODI3IiBwYWdlSGVpZ2h0PSIxMTY5IiBtYXRoPSIwIiBzaGFkb3c9IjAiIGlyRHJhd2lvVmVyc2lvbj0iNC4yLjAiPgogIDxyb290PgogICAgPG14Q2VsbCBpZD0iMCIvPgogICAgPG14Q2VsbCBpZD0iMSIgcGFyZW50PSIwIi8+CiAgICA8bXhDZWxsIGlkPSIyIiB2YWx1ZT0iUHVibGljIENsb3VkIiBzdHlsZT0iaXIucmVmPWI2MWQ2OTExLTMzOGQtNDZhOC05ZjM5LThkY2QyNGFiZmU5MTtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO3JlY3Vyc2l2ZVJlc2l6ZT0wO2h0bWw9MTt2ZXJ0aWNhbEFsaWduPXRvcDthbGlnbj1sZWZ0O2Rhc2hlZD0xO3N0cm9rZVdpZHRoPTE7YXJjU2l6ZT0zO2Fic29sdXRlQXJjU2l6ZT0xO3NwYWNpbmdUb3A9MTtzcGFjaW5nTGVmdD0zMjtzdHJva2VDb2xvcj0jNzU3NUVCO2ZpbGxDb2xvcj0jRjBGMEZGO2ZpbGxPcGFjaXR5PTMwO2ZvbnRDb2xvcj0jNTY1MUUwO2Nvbm5lY3RhYmxlPTA7Y29udGFpbmVyPTE7c291cmNlPWlyaXVzcmlzaztpci50eXBlPVRSVVNUWk9ORTsiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCIgcGFyZW50PSIxIj4KICAgICAgPG14R2VvbWV0cnkgeD0iLTQzMCIgeT0iLTU2IiB3aWR0aD0iMTM2OCIgaGVpZ2h0PSI5MDEiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI5IiB2YWx1ZT0iVlBDICMxIiBzdHlsZT0iaXIucmVmPWEyMjg1MjI0LTg3ZDAtNDVjNi1hZmQ1LTNkMmFmZTNhMGVmNztyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj12cGM7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEcxaGMyc2dhV1E5SW0xaGMyc3dJaUJ0WVhOckxYUjVjR1U5SW1Gc2NHaGhJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJaUI0UFNJd0lpQjVQU0l3SWlCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElqNG1JM2hoT3p4amFYSmpiR1VnWTNnOUlqQXVOU0lnWTNrOUlqQXVOU0lnY2owaU1DNDFJaUJtYVd4c1BTSmliR0ZqYXlJdlBpWWplR0U3UEM5dFlYTnJQaVlqZUdFN1BHY2diV0Z6YXowaWRYSnNLQ050WVhOck1Da2lQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJaUJtYVd4c1BTSWpSVE5HUTBaRElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQwT0RVNU5DQXdMall5TUROSU1DNHlPVGt5TnpORE1DNHlNall5TURZZ01DNDJNakF6SURBdU1UY3dNelFnTUM0MU56RTFJREF1TVRZMk5qQTJJREF1TlRBME5ETXpRekF1TVRZMk5qQTJJREF1TlRBeE5qTXpJREF1TVRZMk5qQTJJREF1TkRrNE5ETXpJREF1TVRZMk5qQTJJREF1TkRrMU1qTXpRekF1TVRZMU5EY3hJREF1TkRZM05EQTRJREF1TVRjek9EQTNJREF1TkRRd01ESXhJREF1TVRrd01qVXhJREF1TkRFM05UUTJRekF1TWpBMk5qazFJREF1TXprMU1EY3hJREF1TWpNd01qYzJJREF1TXpjNE9ETTVJREF1TWpVM01UUWdNQzR6TnpFMVF6QXVNalUzTVRRZ01DNHpOamM1SURBdU1qVTNNVFFnTUM0ek5qUTBNek1nTUM0eU5UY3hOQ0F3TGpNMk1EZ3pNME13TGpJMU56Z3hNaUF3TGpNeU5Ea3pOeUF3TGpJMk9UQTVOQ0F3TGpJNU1EQTBOQ0F3TGpJNE9UVTJNeUF3TGpJMk1EVTBPVU13TGpNeE1EQXpNeUF3TGpJek1UQTFOQ0F3TGpNek9EYzNOQ0F3TGpJd09ESTNOeUF3TGpNM01qRTJOaUF3TGpFNU5UQTRPVU13TGpRd05UVTFPQ0F3TGpFNE1Ua2dNQzQwTkRJeE1EWWdNQzR4TnpnNE9TQXdMalEzTnpJd05pQXdMakU0TmpRek4wTXdMalV4TWpNd05pQXdMakU1TXprNE5DQXdMalUwTkRNNE55QXdMakl4TVRjMU1TQXdMalUyT1RRd05pQXdMakl6TnpWRE1DNDFPRFk0TlRVZ01DNHlOVFEzTnlBd0xqWXdNVEF6T0NBd0xqSTNOVEExTVNBd0xqWXhNVEkzTXlBd0xqSTVOek0yTjBNd0xqWXlOVGt3TWlBd0xqSTROVFl4TkNBd0xqWTBOREV3T0NBd0xqSTNPVEl4TmlBd0xqWTJNamczTXlBd0xqSTNPVEl6TTBNd0xqY3dNVFUwSURBdU1qYzVNak16SURBdU56UXlPRGN6SURBdU16QTJPRE16SURBdU56UTVOamN6SURBdU16WTRNME13TGpjNE1qVXpJREF1TXpjME9DQXdMamd4TWpFM015QXdMak01TWpNMUlEQXVPRE16TmpjeklEQXVOREU0TURNelREQXVPREV5TnpRZ01DNDBNelEwTXpORE1DNDNPVEkzTnpVZ01DNDBNVEUxT1RJZ01DNDNOalV5T1RjZ01DNHpPVFkyTkRjZ01DNDNNelV5TnpNZ01DNHpPVEl6UXpBdU56TXlNamN6SURBdU16a3hPREU1SURBdU56STVOVEkySURBdU16a3dNekkzSURBdU56STNORGtnTUM0ek9EZ3dOekpETUM0M01qVTBOVE1nTUM0ek9EVTRNVGNnTUM0M01qUXlORGNnTUM0ek9ESTVNelFnTUM0M01qUXdOek1nTUM0ek56azVRekF1TnpJeE1EQTJJREF1TXpJNE9ETXpJREF1TmpreE1UUWdNQzR6TURVNUlEQXVOall5T0RjeklEQXVNekExT1VNd0xqWTFNems1TnlBd0xqTXdOVGs0TWlBd0xqWTBOVEkySURBdU16QTRNVElnTUM0Mk16Y3pORGtnTUM0ek1USXhORFZETUM0Mk1qazBNemNnTUM0ek1UWXhOeUF3TGpZeU1qVTJOaUF3TGpNeU1UazNOQ0F3TGpZeE56STNNeUF3TGpNeU9URkRNQzQyTVRVNE5ERWdNQzR6TXpFd01Ea2dNQzQyTVRNNU1qSWdNQzR6TXpJME9Ua2dNQzQyTVRFM01UY2dNQzR6TXpNME1UTkRNQzQyTURrMU1UTWdNQzR6TXpRek1qZ2dNQzQyTURjeE1ETWdNQzR6TXpRMk16UWdNQzQyTURRM05DQXdMak16TkRORE1DNDJNREl6TmpZZ01DNHpNek01TXpjZ01DNDJNREF4TXpVZ01DNHpNekk1TkRFZ01DNDFPVGd5T0RFZ01DNHpNekUwTVRaRE1DNDFPVFkwTWpjZ01DNHpNams0T1NBd0xqVTVOVEF4T1NBd0xqTXlOemc1TWlBd0xqVTVOREl3TmlBd0xqTXlOVFl6TTBNd0xqVTROVEEzT1NBd0xqSTVPVGN4TkNBd0xqVTNNREkzTXlBd0xqSTNOakUyTWlBd0xqVTFNRGczTXlBd0xqSTFOamRETUM0MU1qazFOelFnTUM0eU16UTNPRGNnTUM0MU1ESXlPRFlnTUM0eU1UazJORElnTUM0ME56STBNaklnTUM0eU1UTXhOak5ETUM0ME5ESTFOVGtnTUM0eU1EWTJPRE1nTUM0ME1URTBORGNnTUM0eU1Ea3hOVFlnTUM0ek9ESTVPRElnTUM0eU1qQXlOekZETUM0ek5UUTFNVGNnTUM0eU16RXpPRGNnTUM0ek1qazVOak1nTUM0eU5UQTJOVElnTUM0ek1USXpPVE1nTUM0eU56VTJOVFJETUM0eU9UUTRNalFnTUM0ek1EQTJOVFlnTUM0eU9EVXdNVGtnTUM0ek16QXlPRFlnTUM0eU9EUXlNRFlnTUM0ek5qQTRNek5ETUM0eU9EUXlNalVnTUM0ek5qY3lNRE1nTUM0eU9EUTFPREVnTUM0ek56TTFOamdnTUM0eU9EVXlOek1nTUM0ek56azVRekF1TWpnMU5UazBJREF1TXpnek1EZ3lJREF1TWpnME56WXhJREF1TXpnMk1qY3pJREF1TWpneU9USTFJREF1TXpnNE9Ea3lRekF1TWpneE1Ea2dNQzR6T1RFMU1URWdNQzR5Tnpnek56UWdNQzR6T1RNek9ETWdNQzR5TnpVeU56TWdNQzR6T1RReE5qZERNQzR5TkRVd01EWWdNQzQwTURFMk16TWdNQzR4T1RNNU5DQXdMalF5TkRnek15QXdMakU1TXprMElEQXVORGsxTWpNelF6QXVNVGt6T0RBMklEQXVORGszTmpNeElEQXVNVGt6T0RBMklEQXVOVEF3TURNMUlEQXVNVGt6T1RRZ01DNDFNREkwTXpORE1DNHhPVFk0TnpNZ01DNDFOVFUzTmpjZ01DNHlOREUxTkNBd0xqVTVNell6TXlBd0xqTXdNRFl3TmlBd0xqVTVNell6TTBnd0xqUTROekkzTTB3d0xqUTROVGswSURBdU5qSXdNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJOekkwTlRFZ01DNDRNVFk0TURWRE1DNDFNVFF6TVRnZ01DNDRNVFk0TURVZ01DNDFNVEkwTlRFZ01DNDJNemt3TnpFZ01DNDFNVEkwTlRFZ01DNDJNemN6TXpoV01DNDBOelV3TnpGRE1DNDFNVEkwTkRJZ01DNDBOekl6TkRjZ01DNDFNVE15TmpnZ01DNDBOamsyT0RVZ01DNDFNVFE0TVRnZ01DNDBOamMwTkRWRE1DNDFNVFl6TmpjZ01DNDBOalV5TURRZ01DNDFNVGcxTmpZZ01DNDBOak0wT1RJZ01DNDFNakV4TVRnZ01DNDBOakkxTXpoTU1DNDJOamMzT0RVZ01DNDBNRGd5TnpGRE1DNDJOekE0TURRZ01DNDBNRGN5TURRZ01DNDJOelF3T1RnZ01DNDBNRGN5TURRZ01DNDJOemN4TVRnZ01DNDBNRGd5TnpGTU1DNDRNak0zT0RVZ01DNDBOakkxTXpoRE1DNDRNall6TXpjZ01DNDBOak0wT1RJZ01DNDRNamcxTXpVZ01DNDBOalV5TURRZ01DNDRNekF3T0RVZ01DNDBOamMwTkRWRE1DNDRNekUyTXpRZ01DNDBOamsyT0RVZ01DNDRNekkwTmlBd0xqUTNNak0wTnlBd0xqZ3pNalExTVNBd0xqUTNOVEEzTVZZd0xqWTBOek16T0VNd0xqZ3pNalExTVNBd0xqWTBPVEEzTVNBd0xqZ3pNRFU0TlNBd0xqZ3hOamd3TlNBd0xqWTNNalExTVNBd0xqZ3hOamd3TlZwTk1DNDFNemt4TVRnZ01DNDBPRFEwTURWV01DNDJNemN6TXpoRE1DNDFNemt4TVRnZ01DNDJORE0yTURVZ01DNDFOREE1T0RVZ01DNDNPVEF4TXpnZ01DNDJOekkwTlRFZ01DNDNPVEF4TXpoRE1DNDRNRE01TVRnZ01DNDNPVEF4TXpnZ01DNDRNRFUzT0RVZ01DNDJOVE15TURVZ01DNDRNRFUzT0RVZ01DNDJORGN6TXpoV01DNDBPRFEwTURWTU1DNDJOekkwTlRFZ01DNDBNelE1TXpoTU1DNDFNemt4TVRnZ01DNDBPRFEwTURWYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TmpjeU5ETTVJREF1TnpZMk9USTBRekF1TlRnM05qTTVJREF1TnpZMk9USTBJREF1TlRZMk9ETTVJREF1TmpVNU16STBJREF1TlRZMU56Y3pJREF1TmpVME56a3hRekF1TlRZMU5qUXhJREF1TmpVek9UazJJREF1TlRZMU5qUXhJREF1TmpVek1UZzFJREF1TlRZMU56Y3pJREF1TmpVeU16a3hWakF1TlRFME1qVTRRekF1TlRZMU56Y2dNQzQxTVRFMU9EY2dNQzQxTmpZMU5qa2dNQzQxTURnNU56Z2dNQzQxTmpnd05qY2dNQzQxTURZM05qZERNQzQxTmprMU5qVWdNQzQxTURRMU5UWWdNQzQxTnpFMk9USWdNQzQxTURJNE5EWWdNQzQxTnpReE56TWdNQzQxTURFNE5UaE1NQzQyTmpjMU1EWWdNQzQwTmpVd05UaERNQzQyTnpBMk56UWdNQzQwTmpNM09UWWdNQzQyTnpReU1EVWdNQzQwTmpNM09UWWdNQzQyTnpjek56TWdNQzQwTmpVd05UaE1NQzQzTnpBM01EWWdNQzQxTURFNE5UaERNQzQzTnpNeE9EY2dNQzQxTURJNE5EWWdNQzQzTnpVek1UUWdNQzQxTURRMU5UWWdNQzQzTnpZNE1USWdNQzQxTURZM05qZERNQzQzTnpnek1Ea2dNQzQxTURnNU56Z2dNQzQzTnpreE1Ea2dNQzQxTVRFMU9EY2dNQzQzTnpreE1EWWdNQzQxTVRReU5UaFdNQzQyTlRJek9URkRNQzQzTnpreE56SWdNQzQyTlRNeE9TQXdMamMzT1RFM01pQXdMalkxTXprNU1pQXdMamMzT1RFd05pQXdMalkxTkRjNU1VTXdMamMzT0RBek9TQXdMalkxT1RNeU5DQXdMamMxTnpJek9TQXdMamMyTmpreU5DQXdMalkzTWpRek9TQXdMamMyTmpreU5GcE5NQzQxT1RJME16a2dNQzQyTlRFd05UaERNQzQxT1RRMU56TWdNQzQyTmpFeE9URWdNQzQyTVRNMk16a2dNQzQzTkRBeU5UZ2dNQzQyTnpJME16a2dNQzQzTkRBeU5UaERNQzQzTXpFeU16a2dNQzQzTkRBeU5UZ2dNQzQzTlRBek1EWWdNQzQyTmpFek1qUWdNQzQzTlRJME16a2dNQzQyTlRFd05UaFdNQzQxTWpNek1qUk1NQzQyTnpJME16a2dNQzQwT1RFNE5UaE1NQzQxT1RJME16a2dNQzQxTWpNek1qUldNQzQyTlRFd05UaGFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEM5blBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWElpSUhneFBTSXRNQzR5TURjd05qY2lJSGt4UFNJeExqSXdOekEzSWlCNE1qMGlNUzR5TURjd055SWdlVEk5SWkwd0xqSXdOekEyTnlJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQaVlqZUdFN1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUl6UkVNamRCT0NJdlBpWWplR0U3UEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJalFURTJOa1pHSWk4K0ppTjRZVHM4TDJ4cGJtVmhja2R5WVdScFpXNTBQaVlqZUdFN1BHTnNhWEJRWVhSb0lHbGtQU0pqYkdsd01DSStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BDOWpiR2x3VUdGMGFENG1JM2hoT3p3dlpHVm1jejRtSTNoaE96d3ZjM1puUGc9PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjIiPgogICAgICA8bXhHZW9tZXRyeSB4PSIzMDIiIHk9IjgyIiB3aWR0aD0iOTM1IiBoZWlnaHQ9Ijc4NCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxvYmplY3QgbGFiZWw9IkVDMiAtIEVsYXN0aWMgQ29tcHV0ZSBDbG91ZCIgaXIuc291cmNlU3R5bGU9ImNvbnRhaW5lcj11bmRlZmluZWQ7cm91bmRlZD0xO2FyY1NpemU9OTA7cGVyaW1ldGVyPXVuZGVmaW5lZDtyZWN1cnNpdmVSZXNpemU9dW5kZWZpbmVkO3ZlcnRpY2FsQWxpZ249dG9wO3N0cm9rZVdpZHRoPXVuZGVmaW5lZDtzdHJva2VDb2xvcj0jMjBDOUUzO2ZvbnRTaXplPTEyO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7YWxpZ249Y2VudGVyO3RleHREaXJlY3Rpb249dW5kZWZpbmVkO3NwYWNpbmdUb3A9dW5kZWZpbmVkO3NwYWNpbmdMZWZ0PXVuZGVmaW5lZDthc3BlY3Q9dW5kZWZpbmVkO2Rhc2hlZD11bmRlZmluZWQ7Zm9udFN0eWxlPXVuZGVmaW5lZDtvdXRsaW5lQ29ubmVjdD11bmRlZmluZWQ7c2hhcGU9dW5kZWZpbmVkO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3SWlCdFlYTnJMWFI1Y0dVOUltRnNjR2hoSWlCdFlYTnJWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWlCNFBTSXdJaUI1UFNJd0lpQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJajRtSTNoaE96eGphWEpqYkdVZ1kzZzlJakF1TlNJZ1kzazlJakF1TlNJZ2NqMGlNQzQxSWlCbWFXeHNQU0ppYkdGamF5SXZQaVlqZUdFN1BDOXRZWE5yUGlZamVHRTdQR2NnYldGemF6MGlkWEpzS0NOdFlYTnJNQ2tpUGlZamVHRTdQR2NnWTJ4cGNDMXdZWFJvUFNKMWNtd29JMk5zYVhBd0tTSStKaU40WVRzOGNHRjBhQ0JrUFNKTk1TQXdTREJXTVVneFZqQmFJaUJtYVd4c1BTSjFjbXdvSTNCaGFXNTBNRjlzYVc1bFlYSXBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TURZMk1qZ2dNQzQxTXprNU5UbElNQzQzTXprNU5qRldNQzQxTVRNeU9UTklNQzQ0TURZMk1qaFdNQzR4T1RNeU9UTklNQzQwT0RZMk1qaFdNQzR5TlRrNU5UbElNQzQwTlRrNU5qRldNQzR4T1RNeU9UTkRNQzQwTlRrNU5qRWdNQzR4T0RZeU1pQXdMalEyTWpjM0lEQXVNVGM1TkRNM0lEQXVORFkzTnpjeElEQXVNVGMwTkRNMlF6QXVORGN5TnpjeUlEQXVNVFk1TkRNMUlEQXVORGM1TlRVMUlEQXVNVFkyTmpJMklEQXVORGcyTmpJNElEQXVNVFkyTmpJMlNEQXVPREEyTmpJNFF6QXVPREV6TnlBd0xqRTJOall5TmlBd0xqZ3lNRFE0TXlBd0xqRTJPVFF6TlNBd0xqZ3lOVFE0TkNBd0xqRTNORFF6TmtNd0xqZ3pNRFE0TlNBd0xqRTNPVFF6TnlBd0xqZ3pNekk1TkNBd0xqRTROakl5SURBdU9ETXpNamswSURBdU1Ua3pNamt6VmpBdU5URXpNamt6UXpBdU9ETXpNamswSURBdU5USXdNelkxSURBdU9ETXdORGcxSURBdU5USTNNVFE0SURBdU9ESTFORGcwSURBdU5UTXlNVFE1UXpBdU9ESXdORGd6SURBdU5UTTNNVFVnTUM0NE1UTTNJREF1TlRNNU9UVTVJREF1T0RBMk5qSTRJREF1TlRNNU9UVTVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXhNekUzSURBdU9ETXpNamswU0RBdU1Ua3pNVGN4UXpBdU1UZzJNRGs0SURBdU9ETXpNamswSURBdU1UYzVNekUxSURBdU9ETXdORGcxSURBdU1UYzBNekUwSURBdU9ESTFORGcwUXpBdU1UWTVNekV6SURBdU9ESXdORGd6SURBdU1UWTJOVEEwSURBdU9ERXpOeUF3TGpFMk5qVXdOQ0F3TGpnd05qWXlOMVl3TGpRNE5qWXlPRU13TGpFMk5qVXdOQ0F3TGpRM09UVTFOU0F3TGpFMk9UTXhNeUF3TGpRM01qYzNNaUF3TGpFM05ETXhOQ0F3TGpRMk56YzNNVU13TGpFM09UTXhOU0F3TGpRMk1qYzNJREF1TVRnMk1EazRJREF1TkRVNU9UWXhJREF1TVRrek1UY3hJREF1TkRVNU9UWXhTREF1TWpVNU9ETTNWakF1TkRnMk5qSTRTREF1TVRrek1UY3hWakF1T0RBMk5qSTNTREF1TlRFek1UZFdNQzQzTXprNU5qRklNQzQxTXprNE16WldNQzQ0TURZMk1qZERNQzQxTXprNE16WWdNQzQ0TVRNM0lEQXVOVE0zTURJM0lEQXVPREl3TkRneklEQXVOVE15TURJMklEQXVPREkxTkRnMFF6QXVOVEkzTURJMUlEQXVPRE13TkRnMUlEQXVOVEl3TWpReUlEQXVPRE16TWprMElEQXVOVEV6TVRjZ01DNDRNek15T1RSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TnpFek1qZzVJREF1TXpjNU9UVTFWakF1TXpVek1qZzRTREF1Tmpjek1qZzVRekF1TmpjeU56UWdNQzR6TkRZek9UZ2dNQzQyTmprM05UUWdNQzR6TXprNU15QXdMalkyTkRnMk55QXdMak16TlRBME0wTXdMalkxT1RrNElEQXVNek13TVRVMklEQXVOalV6TlRFeUlEQXVNekkzTVRjZ01DNDJORFkyTWpJZ01DNHpNalkyTWpGV01DNHlPRFkyTWpGSU1DNDJNVGs1TlRWV01DNHpNalkyTWpGSU1DNDFOems1TlRWV01DNHlPRFkyTWpGSU1DNDFOVE15T0RoV01DNHpNalkyTWpGSU1DNDFNVE15T0RoV01DNHlPRFkyTWpGSU1DNDBPRFkyTWpKV01DNHpNalkyTWpGSU1DNDBORFkyTWpGV01DNHlPRFkyTWpGSU1DNDBNVGs1TlRWV01DNHpNalkyTWpGSU1DNHpOems1TlRWV01DNHlPRFkyTWpGSU1DNHpOVE15T0RoV01DNHpNalkyTWpGRE1DNHpORFl6T1RnZ01DNHpNamN4TnlBd0xqTXpPVGt6SURBdU16TXdNVFUySURBdU16TTFNRFF6SURBdU16TTFNRFF6UXpBdU16TXdNVFUySURBdU16TTVPVE1nTUM0ek1qY3hOeUF3TGpNME5qTTVPQ0F3TGpNeU5qWXlNU0F3TGpNMU16STRPRWd3TGpJNE5qWXlNVll3TGpNM09UazFOVWd3TGpNeU5qWXlNVll3TGpReE9UazFOVWd3TGpJNE5qWXlNVll3TGpRME5qWXlNVWd3TGpNeU5qWXlNVll3TGpRNE5qWXlNa2d3TGpJNE5qWXlNVll3TGpVeE16STRPRWd3TGpNeU5qWXlNVll3TGpVMU16STRPRWd3TGpJNE5qWXlNVll3TGpVM09UazFOVWd3TGpNeU5qWXlNVll3TGpZeE9UazFOVWd3TGpJNE5qWXlNVll3TGpZME5qWXlNa2d3TGpNeU5qWXlNVU13TGpNeU56RTNJREF1TmpVek5URXhJREF1TXpNd01UVTJJREF1TmpVNU9UZ2dNQzR6TXpVd05ETWdNQzQyTmpRNE5qZERNQzR6TXprNU15QXdMalkyT1RjMU5DQXdMak0wTmpNNU9DQXdMalkzTWpjMElEQXVNelV6TWpnNElEQXVOamN6TWpnNVZqQXVOekV6TWpnNVNEQXVNemM1T1RVMVZqQXVOamN6TWpnNVNEQXVOREU1T1RVMVZqQXVOekV6TWpnNVNEQXVORFEyTmpJeFZqQXVOamN6TWpnNVNEQXVORGcyTmpJeVZqQXVOekV6TWpnNVNEQXVOVEV6TWpnNFZqQXVOamN6TWpnNVNEQXVOVFV6TWpnNFZqQXVOekV6TWpnNVNEQXVOVGM1T1RVMVZqQXVOamN6TWpnNVNEQXVOakU1T1RVMVZqQXVOekV6TWpnNVNEQXVOalEyTmpJeVZqQXVOamN6TWpnNVF6QXVOalV6TlRFeUlEQXVOamN5TnpRZ01DNDJOVGs1T0NBd0xqWTJPVGMxTkNBd0xqWTJORGcyTnlBd0xqWTJORGcyTjBNd0xqWTJPVGMxTkNBd0xqWTFPVGs0SURBdU5qY3lOelFnTUM0Mk5UTTFNVEVnTUM0Mk56TXlPRGtnTUM0Mk5EWTJNakpJTUM0M01UTXlPRGxXTUM0Mk1UazVOVFZJTUM0Mk56TXlPRGxXTUM0MU56azVOVFZJTUM0M01UTXlPRGxXTUM0MU5UTXlPRGhJTUM0Mk56TXlPRGxXTUM0MU1UTXlPRGhJTUM0M01UTXlPRGxXTUM0ME9EWTJNakpJTUM0Mk56TXlPRGxXTUM0ME5EWTJNakZJTUM0M01UTXlPRGxXTUM0ME1UazVOVFZJTUM0Mk56TXlPRGxXTUM0ek56azVOVFZJTUM0M01UTXlPRGxhVFRBdU5qUTJOakl5SURBdU5qUTBNakl5UXpBdU5qUTJOakl5SURBdU5qUTBPRFU0SURBdU5qUTJNelk1SURBdU5qUTFORFk1SURBdU5qUTFPVEU1SURBdU5qUTFPVEU1UXpBdU5qUTFORFk1SURBdU5qUTJNelk1SURBdU5qUTBPRFU1SURBdU5qUTJOakl5SURBdU5qUTBNakl5SURBdU5qUTJOakl5U0RBdU16VTFOamc0UXpBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTBORFF4SURBdU5qUTJNelk1SURBdU16VXpPVGt4SURBdU5qUTFPVEU1UXpBdU16VXpOVFF4SURBdU5qUTFORFk1SURBdU16VXpNamc0SURBdU5qUTBPRFU0SURBdU16VXpNamc0SURBdU5qUTBNakl5VmpBdU16VTFOamc0UXpBdU16VXpNamc0SURBdU16VTFNRFV4SURBdU16VXpOVFF4SURBdU16VTBORFF4SURBdU16VXpPVGt4SURBdU16VXpPVGt4UXpBdU16VTBORFF4SURBdU16VXpOVFF4SURBdU16VTFNRFV4SURBdU16VXpNamc0SURBdU16VTFOamc0SURBdU16VXpNamc0U0RBdU5qUTBNakl5UXpBdU5qUTBPRFU1SURBdU16VXpNamc0SURBdU5qUTFORFk1SURBdU16VXpOVFF4SURBdU5qUTFPVEU1SURBdU16VXpPVGt4UXpBdU5qUTJNelk1SURBdU16VTBORFF4SURBdU5qUTJOakl5SURBdU16VTFNRFV4SURBdU5qUTJOakl5SURBdU16VTFOamc0VmpBdU5qUTBNakl5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZaejRtSTNoaE96d3ZaejRtSTNoaE96eGtaV1p6UGlZamVHRTdQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p3WVdsdWREQmZiR2x1WldGeUlpQjRNVDBpTFRBdU1qQTNNaUlnZVRFOUlqRXVNakEzTWlJZ2VESTlJakV1TWpBM01EY2lJSGt5UFNJdE1DNHlNRGN3TmpjaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajRtSTNoaE96eHpkRzl3SUhOMGIzQXRZMjlzYjNJOUlpTkRPRFV4TVVJaUx6NG1JM2hoT3p4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUkwWkdPVGt3TUNJdlBpWWplR0U3UEM5c2FXNWxZWEpIY21Ga2FXVnVkRDRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakVpSUdobGFXZG9kRDBpTVNJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZZMnhwY0ZCaGRHZytKaU40WVRzOEwyUmxabk0rSmlONFlUczhMM04yWno0PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tIiBpZD0iMyI+CiAgICAgIDxteENlbGwgc3R5bGU9ImlyLnJlZj03Y2I3YWY4NS1hMmZhLTQ2YjYtYTZhMS03OTYxZTBlYWI4MDg7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249bGVmdDtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9MzthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEzO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZWMyO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xO2NvbnRhaW5lcj0xO3BlcmltZXRlcj1yZWN0YW5nbGVQZXJpbWV0ZXI7cmVjdXJzaXZlUmVzaXplPTA7c3Ryb2tlV2lkdGg9MTt0ZXh0RGlyZWN0aW9uPWx0cjtzcGFjaW5nVG9wPTE7c3BhY2luZ0xlZnQ9MzI7IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiIHBhcmVudD0iMiI+CiAgICAgICAgPG14R2VvbWV0cnkgeD0iMzcxIiB5PSIxNjMiIHdpZHRoPSI3NjkiIGhlaWdodD0iNjAzIiBhcz0iZ2VvbWV0cnkiLz4KICAgICAgPC9teENlbGw+CiAgICA8L29iamVjdD4KICAgIDxvYmplY3QgbGFiZWw9IkRvY2tlciBFbnZpcm9ubWVudCIgaXIuc291cmNlU3R5bGU9ImNvbnRhaW5lcj11bmRlZmluZWQ7cm91bmRlZD0xO2FyY1NpemU9OTA7cGVyaW1ldGVyPXVuZGVmaW5lZDtyZWN1cnNpdmVSZXNpemU9dW5kZWZpbmVkO3ZlcnRpY2FsQWxpZ249dG9wO3N0cm9rZVdpZHRoPXVuZGVmaW5lZDtzdHJva2VDb2xvcj0jMjBDOUUzO2ZvbnRTaXplPTEyO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7YWxpZ249Y2VudGVyO3RleHREaXJlY3Rpb249dW5kZWZpbmVkO3NwYWNpbmdUb3A9dW5kZWZpbmVkO3NwYWNpbmdMZWZ0PXVuZGVmaW5lZDthc3BlY3Q9dW5kZWZpbmVkO2Rhc2hlZD11bmRlZmluZWQ7Zm9udFN0eWxlPXVuZGVmaW5lZDtvdXRsaW5lQ29ubmVjdD11bmRlZmluZWQ7c2hhcGU9dW5kZWZpbmVkO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3S1NJK0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0NU1URTJNaklnTUM0ME5ETTVNamxETUM0NU1EazBORGtnTUM0ME5ESXhNVGdnTUM0NE9EazRPRGdnTUM0ME1qY3lOallnTUM0NE5EYzROamNnTUM0ME1qY3lOalpETUM0NE16Y2dNQzQwTWpjeU5qWWdNQzQ0TWpVM055QXdMalF5T0RNMU15QXdMamd4TkRrd015QXdMalF6TURFMk5FTXdMamd3Tmprek5DQXdMak0zTkRjME1TQXdMamMyTURreU9TQXdMak0wTnprek5TQXdMamMxT1RFeE9DQXdMak0wTmpRNE5rd3dMamMwTnpnNE9DQXdMak16T1RrMk5rd3dMamMwTURZME15QXdMak0xTURRM01VTXdMamN6TVRVNE55QXdMak0yTkRVNU9DQXdMamN5TkRjd05DQXdMak00TURVek55QXdMamN5TURjeUlEQXVNemsyT0RNNFF6QXVOekV6TVRFeklEQXVOREk0TXpVeklEQXVOekUzT0RJeUlEQXVORFU0TURVM0lEQXVOek16TnpZZ01DNDBPRE0wTVRSRE1DNDNNVFExTmpJZ01DNDBPVFF5T0RFZ01DNDJPRE0wTURrZ01DNDBPVFk0TVRjZ01DNDJOelk0T0RnZ01DNDBPVGN4TnpsSU1DNHhOakkxTURGRE1DNHhORGt3T1RnZ01DNDBPVGN4TnprZ01DNHhNemd5TXpFZ01DNDFNRGd3TkRZZ01DNHhNemd5TXpFZ01DNDFNakUwTkRsRE1DNHhNemMxTURZZ01DNDFOall6TmpjZ01DNHhORFV4TVRRZ01DNDJNVEV5T0RZZ01DNHhOakEyT1NBd0xqWTFNelkyT0VNd0xqRTNPRFEwSURBdU56QXdNRE0xSURBdU1qQTBPRGcwSURBdU56TTBORFE0SURBdU1qTTRPVE0xSURBdU56VTFORFU0UXpBdU1qYzNNek16SURBdU56YzVNREEwSURBdU16UXdNREF4SURBdU56a3lOREEzSURBdU5ERXdOak01SURBdU56a3lOREEzUXpBdU5EUXlOVEUySURBdU56a3lOREEzSURBdU5EYzBNemswSURBdU56ZzVOVEE1SURBdU5UQTFPVEE1SURBdU56Z3pOekV6UXpBdU5UUTVOelFnTUM0M056VTNORFFnTUM0MU9URTNOakVnTUM0M05qQTFNeUF3TGpZek1EVXlNU0F3TGpjek9EUXpNME13TGpZMk1qTTVPQ0F3TGpjeE9UazFPU0F3TGpZNU1UQXhOaUF3TGpZNU5qUXhNeUF3TGpjeE5USTROaUF3TGpZMk9EZzRNa013TGpjMU5qSXlJREF1TmpJeU9EYzNJREF1Tnpnd05Ea2dNQzQxTnpFME16a2dNQzQzT1RneU5DQXdMalV5TlRjNU5rTXdMamd3TURjM05pQXdMalV5TlRjNU5pQXdMamd3TWprME9TQXdMalV5TlRjNU5pQXdMamd3TlRRNE5TQXdMalV5TlRjNU5rTXdMamcxTURBME1TQXdMalV5TlRjNU5pQXdMamczTnpVM01TQXdMalV3T0RBME5pQXdMamc1TWpjNE5pQXdMalE1TWpnek1rTXdMamt3TWpreU9TQXdMalE0TXpReE5DQXdMamt4TURVek5pQXdMalEzTVRneU1pQXdMamt4TlRrMk9TQXdMalExT0RjNE1Vd3dMamt4T1RJeklEQXVORFE1TXpZelREQXVPVEV4TmpJeUlEQXVORFF6T1RJNVdpSWdabWxzYkQwaUl6QXdPVEZGTWlJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU1qRXdNallnTUM0ME9ESXlNak5JTUM0eU56a3dPRFpETUM0eU9ESXpORFlnTUM0ME9ESXlNak1nTUM0eU9EVXlORFFnTUM0ME56azJPRGNnTUM0eU9EVXlORFFnTUM0ME56WXdOalZXTUM0ME1UUTBPRE5ETUM0eU9EVXlORFFnTUM0ME1URXlNak1nTUM0eU9ESTNNRGtnTUM0ME1EZ3pNalVnTUM0eU56a3dPRFlnTUM0ME1EZ3pNalZJTUM0eU1UQXlOa013TGpJd055QXdMalF3T0RNeU5TQXdMakl3TkRFd01pQXdMalF4TURnMk1TQXdMakl3TkRFd01pQXdMalF4TkRRNE0xWXdMalEzTmpBMk5VTXdMakl3TkRRMk5DQXdMalEzT1RZNE55QXdMakl3TnlBd0xqUTRNakl5TXlBd0xqSXhNREkySURBdU5EZ3lNakl6V2lJZ1ptbHNiRDBpSXpBd09URkZNaUl2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TXpBMU1qTWdNQzQwT0RJeU1qTklNQzR6TnpRd05UZERNQzR6Tnpjek1UZ2dNQzQwT0RJeU1qTWdNQzR6T0RBeU1UVWdNQzQwTnprMk9EY2dNQzR6T0RBeU1UVWdNQzQwTnpZd05qVldNQzQwTVRRME9ETkRNQzR6T0RBeU1UVWdNQzQwTVRFeU1qTWdNQzR6TnpjMk9DQXdMalF3T0RNeU5TQXdMak0zTkRBMU55QXdMalF3T0RNeU5VZ3dMak13TlRJelF6QXVNekF4T1RjZ01DNDBNRGd6TWpVZ01DNHlPVGt3TnpJZ01DNDBNVEE0TmpFZ01DNHlPVGt3TnpJZ01DNDBNVFEwT0ROV01DNDBOell3TmpWRE1DNHlPVGswTXpVZ01DNDBOemsyT0RjZ01DNHpNREU1TnlBd0xqUTRNakl5TXlBd0xqTXdOVEl6SURBdU5EZ3lNakl6V2lJZ1ptbHNiRDBpSXpBd09URkZNaUl2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TkRBeE9URWdNQzQwT0RJeU1qTklNQzQwTnpBM016WkRNQzQwTnpNNU9UWWdNQzQwT0RJeU1qTWdNQzQwTnpZNE9UUWdNQzQwTnprMk9EY2dNQzQwTnpZNE9UUWdNQzQwTnpZd05qVldNQzQwTVRRME9ETkRNQzQwTnpZNE9UUWdNQzQwTVRFeU1qTWdNQzQwTnpRek5UZ2dNQzQwTURnek1qVWdNQzQwTnpBM016WWdNQzQwTURnek1qVklNQzQwTURFNU1VTXdMak01T0RZMUlEQXVOREE0TXpJMUlEQXVNemsxTnpVeUlEQXVOREV3T0RZeElEQXVNemsxTnpVeUlEQXVOREUwTkRnelZqQXVORGMyTURZMVF6QXVNemsxTnpVeUlEQXVORGM1TmpnM0lEQXVNems0TWpnNElEQXVORGd5TWpJeklEQXVOREF4T1RFZ01DNDBPREl5TWpOYUlpQm1hV3hzUFNJak1EQTVNVVV5SWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0ME9UY3hNalVnTUM0ME9ESXlNak5JTUM0MU5qVTVOVU13TGpVMk9USXhJREF1TkRneU1qSXpJREF1TlRjeU1UQTRJREF1TkRjNU5qZzNJREF1TlRjeU1UQTRJREF1TkRjMk1EWTFWakF1TkRFME5EZ3pRekF1TlRjeU1UQTRJREF1TkRFeE1qSXpJREF1TlRZNU5UY3lJREF1TkRBNE16STFJREF1TlRZMU9UVWdNQzQwTURnek1qVklNQzQwT1RjeE1qVkRNQzQwT1RNNE5qVWdNQzQwTURnek1qVWdNQzQwT1RBNU5qY2dNQzQwTVRBNE5qRWdNQzQwT1RBNU5qY2dNQzQwTVRRME9ETldNQzQwTnpZd05qVkRNQzQwT1RBNU5qY2dNQzQwTnprMk9EY2dNQzQwT1RNNE5qVWdNQzQwT0RJeU1qTWdNQzQwT1RjeE1qVWdNQzQwT0RJeU1qTmFJaUJtYVd4c1BTSWpNREE1TVVVeUlpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNHpNRFV5TXlBd0xqTTVORE16TWtnd0xqTTNOREExTjBNd0xqTTNOek14T0NBd0xqTTVORE16TWlBd0xqTTRNREl4TlNBd0xqTTVNVFF6TkNBd0xqTTRNREl4TlNBd0xqTTRPREUzTkZZd0xqTXlOalU1TTBNd0xqTTRNREl4TlNBd0xqTXlNek16TXlBd0xqTTNOelk0SURBdU16SXdORE0xSURBdU16YzBNRFUzSURBdU16SXdORE0xU0RBdU16QTFNak5ETUM0ek1ERTVOeUF3TGpNeU1EUXpOU0F3TGpJNU9UQTNNaUF3TGpNeU1qazNJREF1TWprNU1EY3lJREF1TXpJMk5Ua3pWakF1TXpnNE1UYzBRekF1TWprNU5ETTFJREF1TXpreE5ETTBJREF1TXpBeE9UY2dNQzR6T1RRek16SWdNQzR6TURVeU15QXdMak01TkRNek1sb2lJR1pwYkd3OUlpTXdNRGt4UlRJaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqUXdNVGt4SURBdU16azBNek15U0RBdU5EY3dOek0yUXpBdU5EY3pPVGsySURBdU16azBNek15SURBdU5EYzJPRGswSURBdU16a3hORE0wSURBdU5EYzJPRGswSURBdU16ZzRNVGMwVmpBdU16STJOVGt6UXpBdU5EYzJPRGswSURBdU16SXpNek16SURBdU5EYzBNelU0SURBdU16SXdORE0xSURBdU5EY3dOek0ySURBdU16SXdORE0xU0RBdU5EQXhPVEZETUM0ek9UZzJOU0F3TGpNeU1EUXpOU0F3TGpNNU5UYzFNaUF3TGpNeU1qazNJREF1TXprMU56VXlJREF1TXpJMk5Ua3pWakF1TXpnNE1UYzBRekF1TXprMU56VXlJREF1TXpreE5ETTBJREF1TXprNE1qZzRJREF1TXprME16TXlJREF1TkRBeE9URWdNQzR6T1RRek16SmFJaUJtYVd4c1BTSWpNREE1TVVVeUlpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDBPVGN4TWpVZ01DNHpPVFF6TXpKSU1DNDFOalU1TlVNd0xqVTJPVEl4SURBdU16azBNek15SURBdU5UY3lNVEE0SURBdU16a3hORE0wSURBdU5UY3lNVEE0SURBdU16ZzRNVGMwVmpBdU16STJOVGt6UXpBdU5UY3lNVEE0SURBdU16SXpNek16SURBdU5UWTVNakVnTUM0ek1qQTBNelVnTUM0MU5qVTVOU0F3TGpNeU1EUXpOVWd3TGpRNU56RXlOVU13TGpRNU16ZzJOU0F3TGpNeU1EUXpOU0F3TGpRNU1EazJOeUF3TGpNeU1qazNJREF1TkRrd09UWTNJREF1TXpJMk5Ua3pWakF1TXpnNE1UYzBRekF1TkRrd09UWTNJREF1TXpreE5ETTBJREF1TkRrek9EWTFJREF1TXprME16TXlJREF1TkRrM01USTFJREF1TXprME16TXlXaUlnWm1sc2JEMGlJekF3T1RGRk1pSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVORGszTVRJMUlEQXVNekExT0RNeFNEQXVOVFkxT1RWRE1DNDFOamt5TVNBd0xqTXdOVGd6TVNBd0xqVTNNakV3T0NBd0xqTXdNekk1TlNBd0xqVTNNakV3T0NBd0xqSTVPVFkzTTFZd0xqSXpPREE1TWtNd0xqVTNNakV3T0NBd0xqSXpORGd6TWlBd0xqVTJPVEl4SURBdU1qTXhPVE0wSURBdU5UWTFPVFVnTUM0eU16RTVNelJJTUM0ME9UY3hNalZETUM0ME9UTTROalVnTUM0eU16RTVNelFnTUM0ME9UQTVOamNnTUM0eU16UTBOamtnTUM0ME9UQTVOamNnTUM0eU16Z3dPVEpXTUM0eU9UazJOek5ETUM0ME9UQTVOamNnTUM0ek1ESTVNek1nTUM0ME9UTTROalVnTUM0ek1EVTRNekVnTUM0ME9UY3hNalVnTUM0ek1EVTRNekZhSWlCbWFXeHNQU0lqTURBNU1VVXlJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQxT1RNd056SWdNQzQwT0RJeU1qTklNQzQyTmpFNE9UbERNQzQyTmpVeE5Ua2dNQzQwT0RJeU1qTWdNQzQyTmpnd05UY2dNQzQwTnprMk9EY2dNQzQyTmpnd05UY2dNQzQwTnpZd05qVldNQzQwTVRRME9ETkRNQzQyTmpnd05UY2dNQzQwTVRFeU1qTWdNQzQyTmpVMU1qSWdNQzQwTURnek1qVWdNQzQyTmpFNE9Ua2dNQzQwTURnek1qVklNQzQxT1RNd056SkRNQzQxT0RrNE1USWdNQzQwTURnek1qVWdNQzQxT0RZNU1UUWdNQzQwTVRBNE5qRWdNQzQxT0RZNU1UUWdNQzQwTVRRME9ETldNQzQwTnpZd05qVkRNQzQxT0RjeU56WWdNQzQwTnprMk9EY2dNQzQxT0RrNE1USWdNQzQwT0RJeU1qTWdNQzQxT1RNd056SWdNQzQwT0RJeU1qTmFJaUJtYVd4c1BTSWpNREE1TVVVeUlpOCtKaU40WVRzOEwyYytKaU40WVRzOFpHVm1jejRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakF1T1RnME5qRTFJaUJvWldsbmFIUTlJakF1T1RnME5qRTFJaUJtYVd4c1BTSjNhR2wwWlNJZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9NQzR3TURBeU5EUXhOREVnTUM0d01UVXpPREE1S1NJdlBpWWplR0U3UEM5amJHbHdVR0YwYUQ0bUkzaGhPend2WkdWbWN6NG1JM2hoT3p3dmMzWm5QZz09O3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b20iIGlkPSI0Ij4KICAgICAgPG14Q2VsbCBzdHlsZT0iaXIucmVmPTFlNWJlYzE5LWI5MmQtNGJmMy1iZDI1LWY4NDQxZWIyNjQ4YTtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1sZWZ0O2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT0zO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTM7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj1kb2NrZXItZW52aXJvbm1lbnQ7dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7Y29udGFpbmVyPTE7cGVyaW1ldGVyPXJlY3RhbmdsZVBlcmltZXRlcjtyZWN1cnNpdmVSZXNpemU9MDtzdHJva2VXaWR0aD0xO3RleHREaXJlY3Rpb249bHRyO3NwYWNpbmdUb3A9MTtzcGFjaW5nTGVmdD0zMjsiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCIgcGFyZW50PSIzIj4KICAgICAgICA8bXhHZW9tZXRyeSB4PSI1OCIgeT0iNTYiIHdpZHRoPSI2NjkiIGhlaWdodD0iNTA1IiBhcz0iZ2VvbWV0cnkiLz4KICAgICAgPC9teENlbGw+CiAgICA8L29iamVjdD4KICAgIDxvYmplY3QgbGFiZWw9Ik5naW54IiBpci5zb3VyY2VTdHlsZT0iY29udGFpbmVyPXVuZGVmaW5lZDtyb3VuZGVkPTE7YXJjU2l6ZT05MDtwZXJpbWV0ZXI9dW5kZWZpbmVkO3JlY3Vyc2l2ZVJlc2l6ZT11bmRlZmluZWQ7dmVydGljYWxBbGlnbj10b3A7c3Ryb2tlV2lkdGg9dW5kZWZpbmVkO3N0cm9rZUNvbG9yPSMyMEM5RTM7Zm9udFNpemU9MTI7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTtmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDthbGlnbj1jZW50ZXI7dGV4dERpcmVjdGlvbj11bmRlZmluZWQ7c3BhY2luZ1RvcD11bmRlZmluZWQ7c3BhY2luZ0xlZnQ9dW5kZWZpbmVkO2FzcGVjdD11bmRlZmluZWQ7ZGFzaGVkPXVuZGVmaW5lZDtmb250U3R5bGU9dW5kZWZpbmVkO291dGxpbmVDb25uZWN0PXVuZGVmaW5lZDtzaGFwZT11bmRlZmluZWQ7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU1UUXdNVE0zSURBdU1UYzJNVE0zUXpBdU1UUXdNVE0zSURBdU1UVTJNalUwSURBdU1UVTJNalUwSURBdU1UUXdNVE0zSURBdU1UYzJNVE0zSURBdU1UUXdNVE0zU0RBdU9ESTBNVE0zUXpBdU9EUTBNREU1SURBdU1UUXdNVE0zSURBdU9EWXdNVE0zSURBdU1UVTJNalUwSURBdU9EWXdNVE0zSURBdU1UYzJNVE0zVmpBdU9ESTBNVE0zUXpBdU9EWXdNVE0zSURBdU9EUTBNREU1SURBdU9EUTBNREU1SURBdU9EWXdNVE0zSURBdU9ESTBNVE0zSURBdU9EWXdNVE0zU0RBdU1UYzJNVE0zUXpBdU1UVTJNalUwSURBdU9EWXdNVE0zSURBdU1UUXdNVE0zSURBdU9EUTBNREU1SURBdU1UUXdNVE0zSURBdU9ESTBNVE0zVmpBdU1UYzJNVE0zV2lJZ1ptbHNiRDBpSXpBd09URkZNaUl2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1T0RBek5qSTVJREF1TkRVeE5qUkRNQzQ0TURJd09UTWdNQzQwTlRBek5pQXdMamM0T0RJM01TQXdMalF6T1RnMk5TQXdMamMxT0RVM055QXdMalF6T1RnMk5VTXdMamMxTURnNU9DQXdMalF6T1RnMk5TQXdMamMwTWprMk1pQXdMalEwTURZek15QXdMamN6TlRJNE15QXdMalEwTVRreE1rTXdMamN5T1RZMU1TQXdMalF3TWpjME9DQXdMalk1TnpFME1pQXdMak00TXpnd05TQXdMalk1TlRnMk1pQXdMak00TWpjNE1Vd3dMalk0TnpreU55QXdMak0zT0RFM05Fd3dMalk0TWpnd055QXdMak00TlRVNU4wTXdMalkzTmpRd09DQXdMak01TlRVNElEQXVOamN4TlRRMElEQXVOREEyT0RReklEQXVOalk0TnpJNElEQXVOREU0TXpZeVF6QXVOall6TXpVeklEQXVORFF3TmpNeUlEQXVOalkyTmpnZ01DNDBOakUyTWpNZ01DNDJOemM1TkRNZ01DNDBOemsxTkRGRE1DNDJOalF6TnpjZ01DNDBPRGN5TWpFZ01DNDJOREl6TmpJZ01DNDBPRGt3TVRJZ01DNDJNemMzTlRVZ01DNDBPRGt5TmpoSU1DNHlOelF5TmpSRE1DNHlOalEzT1RNZ01DNDBPRGt5TmpnZ01DNHlOVGN4TVRNZ01DNDBPVFk1TkRnZ01DNHlOVGN4TVRNZ01DNDFNRFkwTVRsRE1DNHlOVFkyTURJZ01DNDFNemd4TmlBd0xqSTJNVGszTnlBd0xqVTJPVGt3TWlBd0xqSTNNams0TkNBd0xqVTVPVGcxTVVNd0xqSTROVFV5TnlBd0xqWXpNall4TmlBd0xqTXdOREl4TkNBd0xqWTFOamt6TkNBd0xqTXlPREkzTmlBd0xqWTNNVGM0TVVNd0xqTTFOVFF4SURBdU5qZzRORElnTUM0ek9UazJPVFFnTUM0Mk9UYzRPVEVnTUM0ME5EazJNU0F3TGpZNU56ZzVNVU13TGpRM01qRXpOaUF3TGpZNU56ZzVNU0F3TGpRNU5EWTJNaUF3TGpZNU5UZzBNeUF3TGpVeE5qa3pNeUF3TGpZNU1UYzBOME13TGpVME56a3dOaUF3TGpZNE5qRXhOaUF3TGpVM056WWdNQzQyTnpVek5qVWdNQzQyTURRNU9Ea2dNQzQyTlRrM05VTXdMall5TnpVeE5pQXdMalkwTmpZNU5TQXdMalkwTnpjek9DQXdMall6TURBMU5pQXdMalkyTkRnNE9TQXdMall4TURZd01rTXdMalk1TXpneE5DQXdMalUzT0RBNU15QXdMamN4TURrMk5TQXdMalUwTVRjME5DQXdMamN5TXpVd09DQXdMalV3T1RRNU1VTXdMamN5TlRNZ01DNDFNRGswT1RFZ01DNDNNalk0TXpZZ01DNDFNRGswT1RFZ01DNDNNamcyTWpjZ01DNDFNRGswT1RGRE1DNDNOakF4TVRNZ01DNDFNRGswT1RFZ01DNDNOemsxTmpjZ01DNDBPVFk1TkRnZ01DNDNPVEF6TVRnZ01DNDBPRFl4T1RkRE1DNDNPVGMwT0RZZ01DNDBOemsxTkRFZ01DNDRNREk0TmpFZ01DNDBOekV6TlNBd0xqZ3dOamN3TVNBd0xqUTJNakV6TlV3d0xqZ3dPVEF3TlNBd0xqUTFOVFEzT1V3d0xqZ3dNell5T1NBd0xqUTFNVFkwV2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMak13T0RBMk15QXdMalEzT0RrM09VZ3dMak0xTmpZNU9VTXdMak0xT1RBd01pQXdMalEzT0RrM09TQXdMak0yTVRBMUlEQXVORGMzTVRnM0lEQXVNell4TURVZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqTTJNVEExSURBdU5ESTRPREEySURBdU16VTVNalU0SURBdU5ESTJOelU0SURBdU16VTJOams1SURBdU5ESTJOelU0U0RBdU16QTRNRFl6UXpBdU16QTFOelU1SURBdU5ESTJOelU0SURBdU16QXpOekV4SURBdU5ESTROVFVnTUM0ek1ETTNNVEVnTUM0ME16RXhNVll3TGpRM05EWXlOME13TGpNd016azJOeUF3TGpRM056RTROeUF3TGpNd05UYzFPU0F3TGpRM09EazNPU0F3TGpNd09EQTJNeUF3TGpRM09EazNPVm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNHpOelV5TURFZ01DNDBOemc1TnpsSU1DNDBNak00TXpoRE1DNDBNall4TkRFZ01DNDBOemc1TnprZ01DNDBNamd4T0RrZ01DNDBOemN4T0RjZ01DNDBNamd4T0RrZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqUXlPREU0T1NBd0xqUXlPRGd3TmlBd0xqUXlOak01TnlBd0xqUXlOamMxT0NBd0xqUXlNemd6T0NBd0xqUXlOamMxT0Vnd0xqTTNOVEl3TVVNd0xqTTNNamc1TnlBd0xqUXlOamMxT0NBd0xqTTNNRGcxSURBdU5ESTROVFVnTUM0ek56QTROU0F3TGpRek1URXhWakF1TkRjME5qSTNRekF1TXpjeE1UQTJJREF1TkRjM01UZzNJREF1TXpjeU9EazNJREF1TkRjNE9UYzVJREF1TXpjMU1qQXhJREF1TkRjNE9UYzVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqUTBNek14TmlBd0xqUTNPRGszT1Vnd0xqUTVNVGsxTTBNd0xqUTVOREkxTmlBd0xqUTNPRGszT1NBd0xqUTVOak13TkNBd0xqUTNOekU0TnlBd0xqUTVOak13TkNBd0xqUTNORFl5TjFZd0xqUXpNVEV4UXpBdU5EazJNekEwSURBdU5ESTRPREEySURBdU5EazBOVEV5SURBdU5ESTJOelU0SURBdU5Ea3hPVFV6SURBdU5ESTJOelU0U0RBdU5EUXpNekUyUXpBdU5EUXhNREV6SURBdU5ESTJOelU0SURBdU5ETTRPVFkxSURBdU5ESTROVFVnTUM0ME16ZzVOalVnTUM0ME16RXhNVll3TGpRM05EWXlOME13TGpRek9EazJOU0F3TGpRM056RTROeUF3TGpRME1EYzFOeUF3TGpRM09EazNPU0F3TGpRME16TXhOaUF3TGpRM09EazNPVm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDFNVEEyT1RrZ01DNDBOemc1TnpsSU1DNDFOVGt6TXpWRE1DNDFOakUyTXpnZ01DNDBOemc1TnprZ01DNDFOak0yT0RZZ01DNDBOemN4T0RjZ01DNDFOak0yT0RZZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqVTJNelk0TmlBd0xqUXlPRGd3TmlBd0xqVTJNVGc1TkNBd0xqUXlOamMxT0NBd0xqVTFPVE16TlNBd0xqUXlOamMxT0Vnd0xqVXhNRFk1T1VNd0xqVXdPRE01TlNBd0xqUXlOamMxT0NBd0xqVXdOak0wT0NBd0xqUXlPRFUxSURBdU5UQTJNelE0SURBdU5ETXhNVEZXTUM0ME56UTJNamRETUM0MU1EWXpORGdnTUM0ME56Y3hPRGNnTUM0MU1EZ3pPVFVnTUM0ME56ZzVOemtnTUM0MU1UQTJPVGtnTUM0ME56ZzVOemxhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVNemMxTWpBeElEQXVOREUyTnpJeVNEQXVOREl6T0RNNFF6QXVOREkyTVRReElEQXVOREUyTnpJeUlEQXVOREk0TVRnNUlEQXVOREUwTmpjMElEQXVOREk0TVRnNUlEQXVOREV5TXpjeFZqQXVNelk0T0RVMFF6QXVOREk0TVRnNUlEQXVNelkyTlRVZ01DNDBNall6T1RjZ01DNHpOalExTURJZ01DNDBNak00TXpnZ01DNHpOalExTURKSU1DNHpOelV5TURGRE1DNHpOekk0T1RjZ01DNHpOalExTURJZ01DNHpOekE0TlNBd0xqTTJOakk1TkNBd0xqTTNNRGcxSURBdU16WTRPRFUwVmpBdU5ERXlNemN4UXpBdU16Y3hNVEEySURBdU5ERTBOamMwSURBdU16Y3lPRGszSURBdU5ERTJOekl5SURBdU16YzFNakF4SURBdU5ERTJOekl5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMalEwTXpNeE5pQXdMalF4TmpjeU1rZ3dMalE1TVRrMU0wTXdMalE1TkRJMU5pQXdMalF4TmpjeU1pQXdMalE1TmpNd05DQXdMalF4TkRZM05DQXdMalE1TmpNd05DQXdMalF4TWpNM01WWXdMak0yT0RnMU5FTXdMalE1TmpNd05DQXdMak0yTmpVMUlEQXVORGswTlRFeUlEQXVNelkwTlRBeUlEQXVORGt4T1RVeklEQXVNelkwTlRBeVNEQXVORFF6TXpFMlF6QXVORFF4TURFeklEQXVNelkwTlRBeUlEQXVORE00T1RZMUlEQXVNelkyTWprMElEQXVORE00T1RZMUlEQXVNelk0T0RVMFZqQXVOREV5TXpjeFF6QXVORE00T1RZMUlEQXVOREUwTmpjMElEQXVORFF3TnpVM0lEQXVOREUyTnpJeUlEQXVORFF6TXpFMklEQXVOREUyTnpJeVdpSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpVeE1EWTVPU0F3TGpReE5qY3lNa2d3TGpVMU9UTXpOVU13TGpVMk1UWXpPQ0F3TGpReE5qY3lNaUF3TGpVMk16WTROaUF3TGpReE5EWTNOQ0F3TGpVMk16WTROaUF3TGpReE1qTTNNVll3TGpNMk9EZzFORU13TGpVMk16WTROaUF3TGpNMk5qVTFJREF1TlRZeE5qTTRJREF1TXpZME5UQXlJREF1TlRVNU16TTFJREF1TXpZME5UQXlTREF1TlRFd05qazVRekF1TlRBNE16azFJREF1TXpZME5UQXlJREF1TlRBMk16UTRJREF1TXpZMk1qazBJREF1TlRBMk16UTRJREF1TXpZNE9EVTBWakF1TkRFeU16Y3hRekF1TlRBMk16UTRJREF1TkRFME5qYzBJREF1TlRBNE16azFJREF1TkRFMk56SXlJREF1TlRFd05qazVJREF1TkRFMk56SXlXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXhNRFk1T1NBd0xqTTFOREl5TWtnd0xqVTFPVE16TlVNd0xqVTJNVFl6T0NBd0xqTTFOREl5TWlBd0xqVTJNelk0TmlBd0xqTTFNalF6SURBdU5UWXpOamcySURBdU16UTVPRGRXTUM0ek1EWXpOVFJETUM0MU5qTTJPRFlnTUM0ek1EUXdOU0F3TGpVMk1UWXpPQ0F3TGpNd01qQXdNaUF3TGpVMU9UTXpOU0F3TGpNd01qQXdNa2d3TGpVeE1EWTVPVU13TGpVd09ETTVOU0F3TGpNd01qQXdNaUF3TGpVd05qTTBPQ0F3TGpNd016YzVOQ0F3TGpVd05qTTBPQ0F3TGpNd05qTTFORll3TGpNME9UZzNRekF1TlRBMk16UTRJREF1TXpVeU1UYzBJREF1TlRBNE16azFJREF1TXpVME1qSXlJREF1TlRFd05qazVJREF1TXpVME1qSXlXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVTNPRFUzSURBdU5EYzRPVGM1U0RBdU5qSTNNakE0UXpBdU5qSTVOVEV5SURBdU5EYzRPVGM1SURBdU5qTXhOVFlnTUM0ME56Y3hPRGNnTUM0Mk16RTFOaUF3TGpRM05EWXlOMVl3TGpRek1URXhRekF1TmpNeE5UWWdNQzQwTWpnNE1EWWdNQzQyTWprM05qZ2dNQzQwTWpZM05UZ2dNQzQyTWpjeU1EZ2dNQzQwTWpZM05UaElNQzQxTnpnMU4wTXdMalUzTmpJMk55QXdMalF5TmpjMU9DQXdMalUzTkRJeE9TQXdMalF5T0RVMUlEQXVOVGMwTWpFNUlEQXVORE14TVRGV01DNDBOelEyTWpkRE1DNDFOelEwTnpVZ01DNDBOemN4T0RjZ01DNDFOell5TmpjZ01DNDBOemc1TnprZ01DNDFOemcxTnlBd0xqUTNPRGszT1ZvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhMM04yWno0PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tIiBpZD0iNSI+CiAgICAgIDxteENlbGwgc3R5bGU9ImlyLnJlZj0yYmQzZjM1NC01ZTMzLTQ3OWYtYTExZi0xMTU3MjYzZmE3ZmM7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249bGVmdDtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9MzthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEzO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZG9ja2VyLWNvbnRhaW5lcjt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtjb250YWluZXI9MTtwZXJpbWV0ZXI9cmVjdGFuZ2xlUGVyaW1ldGVyO3JlY3Vyc2l2ZVJlc2l6ZT0wO3N0cm9rZVdpZHRoPTE7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjQiPgogICAgICAgIDxteEdlb21ldHJ5IHg9IjQ5IiB5PSI0NiIgd2lkdGg9IjI0NiIgaGVpZ2h0PSIzOTgiIGFzPSJnZW9tZXRyeSIvPgogICAgICA8L214Q2VsbD4KICAgIDwvb2JqZWN0PgogICAgPG14Q2VsbCBpZD0iOCIgdmFsdWU9Im5naW54IiBzdHlsZT0iaXIucmVmPWVmZjFlNTdlLTYwNzYtNGFiNy1hZmU5LTVlMDNlZGQxOGZmYjtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj1uZ2lueDtpbWFnZT1kYXRhOmltYWdlL3BuZyxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBTWdBQUFESUNBWUFBQUN0V0s2ZUFBQVp1RWxFUVZSNDJ1MmRDMXhVOWJiSC94MDFDVkV4TVF3UVlSaVlHYkVpcFNLenN1dnBXTWRPWmk5S0xETzcyWnZPdGZLZXcvMGNMT3QyS3BPYlBPWUJPQkloS2lrb1ByT2NFQlZSY3hJU1ZOVFJVQVpCR0FVQkVXdmQvMy9QV0pnOFptRDJucjJIOWZ0ODFpZVRVV0gvMTNldnRmNlA5U2NFeForMFlUN1VKaEt0Y2hhMWVLc3BFb2hHcWVkTXB6UndwbFVZNmRkTWY3QzkxcThwdC83MmVZM3lNOXZmRVVkMGloaVNxb29pK2dodmZOQW84VW9mNUVIVXFyRkVvNWhHTktyNU5rY3VvazVzb2M0TUFsa3QwYW9LaVU2bHByK2VSMzg5bFlLcEpBc205Y2NCUWdrTUJIMWpNeGkweWtScXBRSkMwQk5yczBXbmoyazBta0tTdzcxd0FGSE9GWE1xNWx4Y2VzTTVHMGpZMnJqb3BsTXRKR3JsSkM3Nm9WQU9TeGNld1RrUmx5cXh0N0Nrb2VqS1dtdzFVQnhKR3lQSGdVZDFybFQvQUpxM3ozT0RLTkVMbzNXTU9uUXUwZnI1b0VPZ1NKQitra2MvOWVnWW9nblpST3VLdHI0TFJnZVJSU1BQNmFlUlQ1dGt3RUsvejBuMjFSMlRyOWVGNkNrWWpSUU1CS0l6WTg5R0UxTGJUeHVXS1AvcXJpajBIRGZXQW9PaGY4U0t5VEVEZFRJakhYUTY4R0VJZ0dPZ3dBQmRpQ0Z5eFFQVDBKdmNTQVl3OUorK1BtYVdkMnB3UlQ4T2pGREFxTkZUU0VLQlBjTmhhVExqMzlZOWlhQklXU1l3ZWZ4OTkrSllyL1N4bGYwMGdkYUlnV0E0Q1pRdzZLZjJoMEZMRmVVdjcxZzh5d0NBZFlwVVpBR0w5OExTcjJQSnN2Rm1ralNFRHFZY25abzNXT2l6VGZZRzd5OGpLeGFYclpzREFMaXVJbVp0cXR3MTU1NDEwUmFTT0JpSVdvWU9MQmdvTkhWTkhBSjM1a3lyWEdQYWhxbVgySFRzM00rUmM3ZkZGWkdrWVJTTVVlaXdycktVa1RTaWpJRG50cjY3NmFmelIzSGgwZVYxaHNYa25maFRkaUpaT3I2TkpBOUdCeFdMSlE4RmtuNWJ5eWRHZlR5ckJkRlRYYUExeHpiRzNManlVVE5KOUxTR2VIUk04YVZkU1Y0d0l2dmhpcXlLdkNub3NRSnAzOWtTNWJOYi83dVFMTG1CcGxOQjZJaGlONWJ5SnQ0QVQyeityMXpEcVFNQjZNRTg2bitLUHA5UE5ES2FUZzFIeDVOYzJqV0NUUTgzL3FQb2sxbm95VTZXOXZCeW4ySFpEMjNpY2x0ME5ta2JUYnM4c3Fib2t3OG00OWtVWjJoaS92TVRCNnI5SzRrNkdCZjYzS1kra2NHQUZOL1N5RFhQalVVUDc0V0dwOG5ua3hUL050dzM1WTZRMERGTkdkWG9uUmFHS1plakNscyt5WWVrQkd6Q1ZmQytBRW9vSytUMUkxWk53cFRMdm9KRE5wR29BeXN4YXZTeC9WM3EwYVZFSFlJcFY1ZEtIaFZOd2NDRFMzMDM3V29rNm9CSkNFSkgwc2hpMFVuUXVCNEFhdGtUQ01SVmNIQU4wZEE1MEg2SFJLZUlSVEJZWXpQV2FBMGRBcTBqWTUxbCttNjlFZTVGdElwY2RBUzBiaUJSOTcwT2thdzdJV3N4Z3c2QVpoY2t5cHkrMCtTT2EraXNMTWVCUjNPNFo1ZmJROEtsVlJnNTBIb1JTZHcyM2JJVzVQazQwR2k5cmtuY003VlNaZUlBbytIc1ZvZHdLQkp3WU5HY0M0bTdySk93SHdRSEZJMlh4VVRsRTFLSEl3WUhFbzNmYlNsS2llN2Qwb3laN09aM2E2Q0p3eHE1Sy9Ba05wMDdrbjdqWmh3OE5JR3NWRHJYeTdIcFhIWXpLdzRhbXFCYjVaVjZpY3hZY2RjZDQ0Q2h1Y0ptWWQyQmhpYkplZ1RyRGpTc1I3RHVRTU42Qk9zT05LeEhuRmQzS0NLeDdrQVRaVDJTS2c4UVEycTFGd2NEVFp5bXlIVjFhalVYQndGTjVHZElYSFQxQW5jeVVHSEJRVUFUdVZXNDVpU2lGTHVSY0cwdVpkUUNiUlpzdmVnRm0ySjMzL2xRYytXNXlhUjRNV3E4ME5Gam9tU0FTQWtBa3VRTkpQbEdkaTBZRE0yZUN1TnlaMEpVN3ZNd2N0WGo4S2RsRStobmZPbG5Cbk90K2ZHT3czYVc3RU9meVZDYXBvd0Z6K3hISUhMTmN4QzRjanA5anJkYm55ZTdwMFVhbDZXMmtMUXhjaUVMODFMUlB4UzFId1hFRHlKV1B3MEw5eTZCZGNjM2djRzhEM2JVbE1PQnV1TlFXbStDM2JXSDRmdnFIOEZ3cWhCeWp1YkJQNHMraFZ0V3o2REEzR3dGcHE5ZTdXYTdvT2lWNytOaHhaRmNNRlR0Z1VMNjNFcm9jOXREbjVuQi9BT3NPYm9lM3RpK0VBSXo3N0orWGlONlVEYmhBU2d1YW9Td1JzaHdkMjQwWkIzSmg0cnpsWER1WWlPMC9YSVp1dEtsWDlxZ3J1VThIRDVYQ2QrZDJnWHpkbjVDMzVUam9NOWQycE4wQTd4YThDRVUxNVRDbWVaNmFMMThxZFBuVmROc2dkMzBCZlB5cms5ZzBOSncrbUx4RjN1cXlQTVYxZGJ0SkkzaWpScWp3RHRORG0vc1drd2QvUVEwWFdvQlIvWHJyNzl5TURIbktERHZoeGUvKzdzdDlScmRKMUtxOUxKc01EZlZ3Uy8wT2RnajlxeXE2TFBTSFB3YUZKbDNpQjJTU240TGRuWllYclJ3akliQVplSHdxVEVETEswWE9FZnZyUzcvK2d2VXR0UkQ5dkV0TUR6clA2eDV0OXRHamtHd29tSXROTFcxOU9oWk5iZGRoS3pERytDVzVYZUx1NDdUcU9idzJBMVJwTk82dEJnZm1uNHJ2TGRIQ3hjN1NRbDZxaXNSWlYvTklYaDAvU3pxU0c0SVNlSU5zR2kvQmhwYW0zcjFZbUZwMTZJRDJlQzc3RTR4ejNSVjhOTmJTOHo3clRSaGNFL2VVOUJ3cVJuNEVvc21wV2VQd2xNYlo3c1hKQ2tCRUxIbWVTaXpuSFJLMUQxL3FRa2V6bi9TT29YZVovWnBzYnhOdE5FamhLWldNdmptNTJJUVFtVjFKb2paOHJKMUN0UXRVaXRQMlB6ek5taWxiMzluYWMzeEFwQjlPVjdNTTF2bGZXUG1pbHZBa3NQNGxmZURrTnBMMDYwSDF6NU4zNzRqcGIzSVNBdnF5THpaY1BSOGxWT2Z6eVdha3Q2L1pqSjlOaUsrbWRocE0xcGM5QkRwUVNoYWU5eWdDNEUzaXBKQWFLVWYreGI4bGo5Z1hWMldLaVJKWGhCZnZCZ3NGeHVjL254bUZ5V0NSMXE0ZGJGV25Cc1pqZTYvN2tHang0MnBveUduNGx0d2hSYVVyb0RCWDA2d2JiOVFTQktRN0NPck8xM3I2STF5am00RFA3MVMzQXVJdlk0aTFsWHpDakV2Q3ZxbWpZU2RWUWRjQWtqTDVWYUkzNWNFUTlMSFNuUFZQZEdMMW03ZjJyM200WWlLcXcrQ0xJUHRmUXNTODA1ZlF5ODNKS3FpeGI1cTdwdDJNK3d5bDRLcmRMYjVITVFXdkFORFV1VWlUaWM2QjhSUWFlRGx1ZXc1VXlaK1FKaWxxcUo2czJNM0h3SHBYaWNhcW1EbWxwZkJVeHNzcloydUNBaXp4RjZjOXhENVVWcVJBTUpVV0ZVQ2Q2K2VDZ00wUWR5NkRBSWlHVUJxZTdad0tJV3U3Q0lDaENucjJEWUlYdkdnTllwSW9XaEhRSHBSckV2aHJMbklBR0ZLT0pRSFBobFIwb0FFQWJsU3JPYzRCZ2ZyVGllSkExSGlBNFR0Ui9wSGNRSU0wbzBXZjlHT2dQeCtvSXFWRkE1RWo0OFJrRjdNYkxXY2d6Y0wzb0ZCMmxIaXJrY1FrUFkyMXhGQUtoR1EzcW15OFF6RWJIa2QrcWZjaElCSUFoQlZvU01OcUFFQjZiME8xcHRnWW00MGtHUmZCRVFLWnRlNWRhMGlGUUZ4bmdyTUI0RG83N1R1MlVKQXhONW9MczZlOU1xRWdEaFgyU2UyMjlvTGhTQWc0cDdONm1icmlWb1pKSzErVGRJQWhCMjIwcFd0b2c3cGlZQ0lmVGFyeXpQcjdLUVZBc0tMMkpieTk0c1hVYWNjaklDSXVsMVVWN2ZtYWxXWkNBZy9Zc2RaenpUWHdZdmZ2V2Z0dVlXQWlEVE5VaTNzS29LWUVSQitJYWs0VndsMzU4NEVrbndUQWlKS24xSVdkYlk1VVNtOW5ySFNBb1RwRjFxUDdLb3BBNUp4djdVdEtnSWlObXZyK0FvM0tWNWxJRUZBcm14SHlUbSsxYm9WeFpVeld3aUlBMWNtYUpYWkNJaHdzalpheTZXcDFnZ0VSSHoyY1VjTGhCWUVSRmpWWDJ5QUQvY2t3QURXUXNnVmU3WVFFRHNiT3FpRGdpUkl1ZVFCWVRwNjdoVE0vT1pONk1kMVNGY2dJR0twUTY0NlJLVU9tb0tBZER6cjlDc1BEUTMrcUozVlA4R2tkYk90UFcyRmhBUUI2Y0tDbE8zU3ErRFhFWkJyZFlIV0NXVU5wd1dKSkhtbmZ3Qy9uT25XTmpsQ1FZS0FkR0d5cWUwQlNVUkFycFd4N2lqY3VmRU5xR3lzRVdUNk4rdllGZ2pJdXRmYWtSQUJjYkVGejJ1M3hUMTRFd0xTQVNCbmpPQ1Q0Zy92N1ZyRUhZTGlXMDAwWW4xdS9BSkdMRlVJTS8yTGdIVGhXekoxZTBBcUVaQU9BS2t4QXZtaUg5eWNIZ1lKKzFPaHNiV0pkMGhxbXV0aC9vNTQ4S0gvSnUrUUlDQmQrRmF3N1FEVnFxZThCQXZwVWdTRTdjQlZCME5vWmlSa0g4bmpwVTNuSDNXNC9pUzh0RzBlZUhITjZPUUlpR3NBcWJVQk1pTUNBZWtHRUc2WHB3eHV5NWtDR3l0MzhkS3E4eG9IcXltSGlldGZwUDkyS0gvTkh4Q1FyZ0FCa3Z1WU55R3JZNklSRURzQTRSYnlRdUhlalMvRHRqTUhCWm5aeWp4WkNNR3JwdkxYUWdnQjZScVFGZEZSaEh6OWJCd0NZZ2NndHVzV1NHb1lQTEwxTFNpclA4RTdJTnhCcTBONUlNdTZpNTh1NlFoSTE0RGtSTWZRQ0RJakZRR3hFeEF1MVFxQ1lXbGg4TzZPRCtHVUFOTy9GeTYxUUhKSkd2anJ4emkvYUVkQXVnWmsxVk54TklMTTBDTWdEZ0JpZ3lRb0l3STBKUmxndWRqSU95UnNpbm4ramc5Z3FDN0l1ZlVJQXRKTkJIazZucENjWjNNUUVBY0JzVUdpekxvSHNnNnZkdnJOdWgzcFJJTVpvcmU4Q1FNMXZzNmIyVUpBdWdQa00xYURHQkNRSGdCaWcwU3g2bUhZV0Zra3lNeldRVnIzM0x6NmNlZmQvWWVBZEpOaVJlc1JrTjRBd2wwaUtvT3d0Yy9EOXRwRGdzeHNGWjJ0QU4rc3ljNnBSeEFRZXdDWlVZR0E5QkNRS3pOYkduK0krVzQrVFlPcUJZRmtmZVZPOE5RR0lDQzhBL0wwVmdhSUNRSHBCU0MyNzJNUWhlVDk0aS9nVEZNZDc0Q3dJN3VaaC9LQUxCbUlnUEE3aTJWZzA3eTFDRWd2QWVHK0Z6a00xb3lFMUoreXVLbFp2dFhTMWdxZkc1ZFJTQVlnSVB3QnNwZEZFRUJBbkFDSURaSWIwK1JnT0YwRWJiOWM1aDJTeGt2Tk1IM3pPMENTQmlJZy9LUllKZ1RFbVlEWUh1eWdqQWxRY2Y2VUlLY1JXYlFpS3g4SGt1S0hnQ0FnRWdDRVdZby9kZHJwWUxyQS8wbzdVM1ZMUFpEMDhkUVpSeU1nemdXa0VnSGhBeEJtU2NQZ29RMXZRTjNGODd3RHdrNGpGdGVVZ0tmT3didmFFUkM3SW9nRkFlRUJFTTRCQjhMN3hjbmNyQlBmWXF2NTJZZlhna2V5dC8wdGhCQ1E3Z0F4NGpRdm40QXdXeklRTWc3bENnSUoyeGVXWU5TRHAvb20rN2FqSUNCMlRQTWlJUHdDd2puaTliQkpvTzBvMWMzMThFckIrOUJQTTdMN1NJS0EyQU1JYmpYaEhSQ05ETHd5N29GOTljY0ZLZHAvdEpqZ3R2dzVWdWZzQ2hJRUJQZGlpUUlRYm1OaklBeGU5UmdjT1ZjcENDUUY1djBRdXZKaEd5UUtCS1FYZTdGeUVSQUJBS0Z2OG43cW0rR3hUYS9CU1FIMmJMR0Z5dHpqVzBDeGZHTG5GNGdpSUYwRHN2THBCRHd3SlJRZ05rZzhOWDd3OXZaNHFHMjI4QTVKUTJzVExDdGJBYkl2YisvWVVSRVFPdzVNSVNEQ0FXTGJqaklpTFFRU0Q2UkNVeHYvZTdiT05OWERndUxQd1NkZGNhMnpJaUIyQUxKNlJqd0NJaUFndHU4N01ETUNVZyt0RldUUEZydjI3VG5EZkJqSTlkbVNJU0QycDFpekNNbVpFWU9BQ0EySWdsdnhEc3orQzJTYXZoZWthQytxUFF4VHRyeEovMzM1N3pOYkNFaDMwN3dUYVlyMVRDUUNJakFnVi9wczBlLy85dHlub2NCOFFCQkl0bGVYd0lTODZOK25meEdRcmdGWi9xd1BJYmt2ZUNNZ0xnREVkaHB4a0U0T3oyMk5oWVAxSmtGbXRsWWYyd3poeXlkWUhSY0I2UW9RUy92bTFXWUV4QVdBMkg2RzRlbGhFRnZ3RDZpNmNGYVE3ZkdhMGk5aDlMSmJnWHpSSHdIcEhKQ2k5b0FZRUJBWEFXTDdPVVlzVmNKSGV6K0Roa3ZOdkVOUzEzSWUvbG4wT2ZocVJvUGhad1NrazkwUCtuYUF5TlFJaUFzQjRWYmFneUV3TXdxV0hsb2p5TXlXcWNFTUQyeCtHd3htSXdMU29XOEZ6VzhIU0ZBc0F1SmlRTmpNRm9NazUxRllWVmtrU05IK1EvMXhxR3R0UkVBNkJtUmF1eXZZWkZNUkVCY0Q4dHZNVmhEY24vOENGRlR4UDdQRkRscnhkU3hZOG9Db1E4YTJBeVJJaVlDSUFCQWJKQVBVSStHWnphOUF1UUFkNVBtUzVBSFJCM2xjZlZlNlZ0bUlnSWdBRU52MDd3MXFQL2hYMGI4RjJiT0ZnRnhqcGVRYWFaVDVDSWhJQUxGRmtvR2FVWkJXdGx5UVBsc0l5RldXZUMwZ09rVXNBaUlpUUd3L0g0c20yVWMzY3BmcElDQkNQWGZGdEE0QUNZOUFRRVFHQ05kQ2FCU1FqUHZBY0tZVUFSR3Mvb2p3SmgxS3E3QWdJQ0lEaEZueVRSQ1ZPeFBLTFNjRWFVYm5EQlZYSDVRb0lBb2o2VlE2WlE0Q0lrSkF1RDViZzJIV3QrOUExWVVhUVpvLzlGbEFOTXJQT2dkRXE1eUxnSWdVRUc1NyttRDRZTTlpT050aUVYMGtrU3dnT3VXVUxnQUpVeUlnSWdhRWc4UVQwc3BXd2NYTHJRaUk4NjJOSklkN2tTNmxWWm9SRUJFRHdzMXNoVURPeWUwSWlQUFRxeUxTcmJTcVRBUkV4SURZV2dpUlpYZERZZlZQQ0loVDB5dlZ3dTRCWVhQQUNJaTRBYkhOYkkzTm1RN2xscE1JaU5NQUNZL29IcEFGay9yVEQ5Y2lJQ0lIaEp2WkdnclRON3dFVlJkcXhiY09JamxBdXByZXZiWU9TVVJBSkFBSVY3UVBnOWp0ODdsRFVMaFEyQ3ViWno4Z3Fhb29CRVFpZ0ZDN1h1TUxjY1ZmQ05KQjNrMGpTQnRKbFFjUWg2UlZsaU1nMGdDRU5hTWJ1blFjTENsZmd6Vkl6MndUY1ZoYVJSd0NJaFZBRk55ejhNKzZEN0tQZjQrQU9GeWNLMkljQjRTRkhBUkVHb0RZdHNmMzF3UkJaTTVEc01OY2dvRFliNDNYSG82eVZ6cWxBUUh4bE00MHBTWVVCbXBIdzZQNXowSnAzVEVFeEw3RlFUM3BzVFNxT1FpSWhBQ3hRZUtsQzRGWHQ4VzY5RFNpZEFBWk03bm5nTERRSSthdEo2eWZWSm92YkQ2NTIra0R6Qm9hN0tncWtoNGd0cUxkTzEwRmNYc1dRNHVMOW14SkF4QkgxajZrV0t4VFJ4aVdHZ2daaHpZNmZZQlpiNm9OSjc2VktDQUtLeVFaVVJCblRIY0pJUG5IQ3lGQXI3cTZtN3hiRk9mWFJKRUliOUVlcEdLM05tbmw4T2Z2UDNMNkFMTno0SXYycDNQM25VdXo0NHYxUGhELzVmZUR0bUtMNElERTdkUERrUFJiSEx1M1hWaXI0SGFOT0VWYVpieVlwemR2elk2Q1MwN3VSbmk2cVE0VWViTTd2NzVNSWpOYjE2bjlZY0xxUjhCd2VyK2dnRHk0OXE5d0hZc2VuZDJQNkhxYlJad21Mb29vVzhTYVpnWG94OEE2R3RLZG1WN3RQdk1qWEpkeWs1Z0gyTzZYQ0hjMzR2cVpzTzlNdVNCd0ZKNytFVlJaVVdKT3J5cWRGejErcjBVU3hEeHpjMS91WTA2TEl1Ym1Pb2hhOXhxUUZIOXB3M0hWeGtZZmVEanZLVERXSE9ZVmpvdVhMOEVqRzU3alhsd2lyajFpaWRPVkhENVN2RkVrRkc3U2o0TkZCMWIyZW9EWmZxYU1RN2xBbGd4d0h6aCsyeUx2QS9ldW5nNjdxdy95QnNpOC9jdkFjK250WWdiRTNQT0ZRU2xIRVZvcmhIODFIbklxdGtJcmZZdjFOTFVxT0YwTUpIR2crOEh4R3lRM0FzbUlBdTNSelhDdXRZR2J6dTZ0MlBuNDVzdXQ4SG5KQ2dqODhqWTZGZ0Y5TEhwY1Vkb1lPYmZ6VWF3L2ZNb29DTlNId3hjbDJYRDJZb1BkemRiWUFOZlJ6Njg4c3BHbUltNE14Mjh2RXhuWEplV0pUUy9CenVvZndjS2VGWDA1OUtRUkJIc1pWVFhWd0Z0N1U4QXpQWXorM1g1aVh2ZXdkTjd6eWxsaXh4SkZQZmlqd0lNTzFPeWRuMEhKMmNQMExYbWgwL3MyMk8rZnAxOC9jdTRFekMzNFgvZE1xN3FNSmtQWkd4WG0wV2UxNTB3Sm1KdnFvT2xTUzdmM2s3Q28wOXgyRWFwcHJiYnhaQ0ZNV1QrYmUrNmlYdlBnVW5IVkhNSzdyS3ZySnJHdkpKUGtFUkNRTVE1aWQzd0NXMDV1QStQWmcxQmlNY0hoODZlNC94clBsc0ZtK3Z2djdsd0UxK3VZc3d6dlczQzBid0tSNUVXanJ5L2N0M1lPL04rUFMySHp6L1I1MVphQzBYSUNLczZmaGhNTjFYQzh3UXlsNTA2Q3NlNEk3REx2QmUxUDJYRC91aGZwbncvZy9xeDdOR1J3bHFSeWJwMjkwWmpqSjdIVmNCa016Wm9DeXRVeDRKWDFFUDMvVUM3TjRITHlLOWNpOTNWalVTQnBrSFgzUUVvQTlNdCtGTWJsem9JSDE3OEs5Njc3VDdoeDVXTkFsdDdCbllmbm5sMktuNWdYQXE4K0VLVlJSQkpCSmJWdThDeXFxSU90QzMvc3Z3aUZmUzhZMWh1WUdZT0hlMjV5S2Y0c2lVUndxWlZCb3AzMlJVTzdhbHFYNzhKY3lxY08wZnEyT1dWRFl1OEs5Z29jQ0RSeG1xcVF1Rnpzd0FrT0Jwb1lDM1BXYTFvVTBxblVPQ0JvSWx2em1FOUVJeTdWVWhoeFlOQ2syOGFIYjFtM29UVGk0S0M1ZkN1N05zeUhpRklhVlRRT0VKcUw2NDZKUk5UQ2VnUU42dzZzUjlDdzdzQjZCQTNyRHF4SDBMRHVjQjBrODNFQTBYaXVPNktKcENYbVk3cG9VdDluRlV2Y1FqcGxEZzRvbXBNUFFIMUczRWJXZXcrMzRzQ2lPUWtPUFhFN3NRdmEyYkZISEdDMDNqVmV5SFYrMHpmeFFNSjZhNVhqSUtQMWVQczZlOUc2dGF3bkVjMDQyR2dPV3JuclRnYTZCaEtNSkdqMlJ3N0pMUVE2STkzQ21nU3QrNEk4My8zVHFxNEtkNXpkUXVzOGNtUzZiMEh1eUJRd3JwT2dYVHRibFVCUTdiZWxoT0tLTzlxVmZseXhDRVJIU2dtY2p3M2QraklZWVcxRVBUb0dRZWd5a29SRTA0ZlVLUG1ibmRBY0FJUGRweGhzcHBGak1nSmdoMEl5NzVZVFRhQlJvbTB1MFJ5Q2cxMFZIYmgxaFA2T2tlajVEdWdGd3dLUDRlbWhhdFpFR2RNdXQweW5HQmh0WHFsaDhaTU1DL3FqeC9kUWQrUTlFMzI5T3FEUjJqZ1oweTQzS2NLaGY4cEk4KzA1VDJKSzVReDkvRU95ZkdqV2cwYVNQQXlkUytxV05CUTh2bnBnNjZkN2tqR2xjcVlNSm9QSHZCMGZxTGtMWDVKSG9LTkp6ZGlkSXBxd3RyY0wveFZ2QUFPbVZIenBtMVBiSnorKytlMEtzbVNROWI0S2RENXhHN3VQSmRFTC9yYmh0YjBiZmpaRW9nY0xJQk9ZUEpZZFdoVTNMUHV2TGR4TlJ5eXFvRE9Lck02UTAzUnFDQXhmL2hlTCttRG1YQU1BUmcyaFpiU1VCeTNjbDVKUDBzZFpMNlJFeHhSSk9rVnJSWDBrTE5pbjF1K3JPdXlEbnVwcVVNNGVtdmJDdC9OTTNIMkVMS1NqazdyR1VtN21hbzFudHJ4VnVydm00RVQwVEpHbFhUbkh0eTY4NitzbjJramlFRXk3QkUybjJFMjUzakJ1MWRUR3pDTWJZZ0hUS2ZHcTVtS05mRUhKaWdTeWJGd0xHelJjamVkNUZaeW1VME16eGxrK0xNbGFXSE9oQnFkdUpSTlI2R0ROM2Y3dkJLSU5idUZXNDlHaG5aOU9hUU1zTXdzL2lqZFpUTjdvY1pKZFB6RjYvM250WS9FRE5iNlc2OWkxeG15TEE2N0k5MnhESVgxMjE5RjB5a1BqWjU2YyswaXN3V1R5UUE5ekV5VVljNzFWeXlmRTlkY0VtTG5VQUNGeEVBNDU5Tk1HVktneTc0alZtL1FJaHJ1S2JZTDBYYWFhTTBBWGJPRHFFd1NsR3pCQzI2N1RoT1g3WnFpaWNWTmhINU4vNnEwQmYxSUh4MUZReWhHVWF4YjY5cktUZlg3THgrTTZCb29xSlNpS2FNTVNxWFBVOXVsN050UmhIeFAxcUxIb0VLaU90WUQwcDlGa0d0ZFJvMjgwdURNUnJTS1Z1KzhlaFhKWTdESjZyWEt1dGZPS3d1SUdRSmh0OE0vaUd2aWhVRTZWTGp5Q3U1ZUNOVFNUeERWekhOVFpIT1FNZGhSSytBaWptc3BCdzI3NDFTa05Ma3JOS3JtTExMVktXa2VwWHFmZnh4U01FQ2p4aWpWYTFpZ2lLVGd4MUduanVUc3RtTEgyL1F3aUswZ21XdzNRVWVwV2EvdDZ4VytmWjJtZTllOUlwUmJIWFQvR0lscWZiYzNKdi80Zi9ibVZHUUkvZXJnQUFBQUFTVVZPUks1Q1lJST07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCIgcGFyZW50PSI1Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iNzgiIHk9IjE1OCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG9iamVjdCBsYWJlbD0iSXJpdXNSaXNrIiBpci5zb3VyY2VTdHlsZT0iY29udGFpbmVyPXVuZGVmaW5lZDtyb3VuZGVkPTE7YXJjU2l6ZT05MDtwZXJpbWV0ZXI9dW5kZWZpbmVkO3JlY3Vyc2l2ZVJlc2l6ZT11bmRlZmluZWQ7dmVydGljYWxBbGlnbj10b3A7c3Ryb2tlV2lkdGg9dW5kZWZpbmVkO3N0cm9rZUNvbG9yPSMyMEM5RTM7Zm9udFNpemU9MTI7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTtmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDthbGlnbj1jZW50ZXI7dGV4dERpcmVjdGlvbj11bmRlZmluZWQ7c3BhY2luZ1RvcD11bmRlZmluZWQ7c3BhY2luZ0xlZnQ9dW5kZWZpbmVkO2FzcGVjdD11bmRlZmluZWQ7ZGFzaGVkPXVuZGVmaW5lZDtmb250U3R5bGU9dW5kZWZpbmVkO291dGxpbmVDb25uZWN0PXVuZGVmaW5lZDtzaGFwZT11bmRlZmluZWQ7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU1UUXdNVE0zSURBdU1UYzJNVE0zUXpBdU1UUXdNVE0zSURBdU1UVTJNalUwSURBdU1UVTJNalUwSURBdU1UUXdNVE0zSURBdU1UYzJNVE0zSURBdU1UUXdNVE0zU0RBdU9ESTBNVE0zUXpBdU9EUTBNREU1SURBdU1UUXdNVE0zSURBdU9EWXdNVE0zSURBdU1UVTJNalUwSURBdU9EWXdNVE0zSURBdU1UYzJNVE0zVmpBdU9ESTBNVE0zUXpBdU9EWXdNVE0zSURBdU9EUTBNREU1SURBdU9EUTBNREU1SURBdU9EWXdNVE0zSURBdU9ESTBNVE0zSURBdU9EWXdNVE0zU0RBdU1UYzJNVE0zUXpBdU1UVTJNalUwSURBdU9EWXdNVE0zSURBdU1UUXdNVE0zSURBdU9EUTBNREU1SURBdU1UUXdNVE0zSURBdU9ESTBNVE0zVmpBdU1UYzJNVE0zV2lJZ1ptbHNiRDBpSXpBd09URkZNaUl2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1T0RBek5qSTVJREF1TkRVeE5qUkRNQzQ0TURJd09UTWdNQzQwTlRBek5pQXdMamM0T0RJM01TQXdMalF6T1RnMk5TQXdMamMxT0RVM055QXdMalF6T1RnMk5VTXdMamMxTURnNU9DQXdMalF6T1RnMk5TQXdMamMwTWprMk1pQXdMalEwTURZek15QXdMamN6TlRJNE15QXdMalEwTVRreE1rTXdMamN5T1RZMU1TQXdMalF3TWpjME9DQXdMalk1TnpFME1pQXdMak00TXpnd05TQXdMalk1TlRnMk1pQXdMak00TWpjNE1Vd3dMalk0TnpreU55QXdMak0zT0RFM05Fd3dMalk0TWpnd055QXdMak00TlRVNU4wTXdMalkzTmpRd09DQXdMak01TlRVNElEQXVOamN4TlRRMElEQXVOREEyT0RReklEQXVOalk0TnpJNElEQXVOREU0TXpZeVF6QXVOall6TXpVeklEQXVORFF3TmpNeUlEQXVOalkyTmpnZ01DNDBOakUyTWpNZ01DNDJOemM1TkRNZ01DNDBOemsxTkRGRE1DNDJOalF6TnpjZ01DNDBPRGN5TWpFZ01DNDJOREl6TmpJZ01DNDBPRGt3TVRJZ01DNDJNemMzTlRVZ01DNDBPRGt5TmpoSU1DNHlOelF5TmpSRE1DNHlOalEzT1RNZ01DNDBPRGt5TmpnZ01DNHlOVGN4TVRNZ01DNDBPVFk1TkRnZ01DNHlOVGN4TVRNZ01DNDFNRFkwTVRsRE1DNHlOVFkyTURJZ01DNDFNemd4TmlBd0xqSTJNVGszTnlBd0xqVTJPVGt3TWlBd0xqSTNNams0TkNBd0xqVTVPVGcxTVVNd0xqSTROVFV5TnlBd0xqWXpNall4TmlBd0xqTXdOREl4TkNBd0xqWTFOamt6TkNBd0xqTXlPREkzTmlBd0xqWTNNVGM0TVVNd0xqTTFOVFF4SURBdU5qZzRORElnTUM0ek9UazJPVFFnTUM0Mk9UYzRPVEVnTUM0ME5EazJNU0F3TGpZNU56ZzVNVU13TGpRM01qRXpOaUF3TGpZNU56ZzVNU0F3TGpRNU5EWTJNaUF3TGpZNU5UZzBNeUF3TGpVeE5qa3pNeUF3TGpZNU1UYzBOME13TGpVME56a3dOaUF3TGpZNE5qRXhOaUF3TGpVM056WWdNQzQyTnpVek5qVWdNQzQyTURRNU9Ea2dNQzQyTlRrM05VTXdMall5TnpVeE5pQXdMalkwTmpZNU5TQXdMalkwTnpjek9DQXdMall6TURBMU5pQXdMalkyTkRnNE9TQXdMall4TURZd01rTXdMalk1TXpneE5DQXdMalUzT0RBNU15QXdMamN4TURrMk5TQXdMalUwTVRjME5DQXdMamN5TXpVd09DQXdMalV3T1RRNU1VTXdMamN5TlRNZ01DNDFNRGswT1RFZ01DNDNNalk0TXpZZ01DNDFNRGswT1RFZ01DNDNNamcyTWpjZ01DNDFNRGswT1RGRE1DNDNOakF4TVRNZ01DNDFNRGswT1RFZ01DNDNOemsxTmpjZ01DNDBPVFk1TkRnZ01DNDNPVEF6TVRnZ01DNDBPRFl4T1RkRE1DNDNPVGMwT0RZZ01DNDBOemsxTkRFZ01DNDRNREk0TmpFZ01DNDBOekV6TlNBd0xqZ3dOamN3TVNBd0xqUTJNakV6TlV3d0xqZ3dPVEF3TlNBd0xqUTFOVFEzT1V3d0xqZ3dNell5T1NBd0xqUTFNVFkwV2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMak13T0RBMk15QXdMalEzT0RrM09VZ3dMak0xTmpZNU9VTXdMak0xT1RBd01pQXdMalEzT0RrM09TQXdMak0yTVRBMUlEQXVORGMzTVRnM0lEQXVNell4TURVZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqTTJNVEExSURBdU5ESTRPREEySURBdU16VTVNalU0SURBdU5ESTJOelU0SURBdU16VTJOams1SURBdU5ESTJOelU0U0RBdU16QTRNRFl6UXpBdU16QTFOelU1SURBdU5ESTJOelU0SURBdU16QXpOekV4SURBdU5ESTROVFVnTUM0ek1ETTNNVEVnTUM0ME16RXhNVll3TGpRM05EWXlOME13TGpNd016azJOeUF3TGpRM056RTROeUF3TGpNd05UYzFPU0F3TGpRM09EazNPU0F3TGpNd09EQTJNeUF3TGpRM09EazNPVm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNHpOelV5TURFZ01DNDBOemc1TnpsSU1DNDBNak00TXpoRE1DNDBNall4TkRFZ01DNDBOemc1TnprZ01DNDBNamd4T0RrZ01DNDBOemN4T0RjZ01DNDBNamd4T0RrZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqUXlPREU0T1NBd0xqUXlPRGd3TmlBd0xqUXlOak01TnlBd0xqUXlOamMxT0NBd0xqUXlNemd6T0NBd0xqUXlOamMxT0Vnd0xqTTNOVEl3TVVNd0xqTTNNamc1TnlBd0xqUXlOamMxT0NBd0xqTTNNRGcxSURBdU5ESTROVFVnTUM0ek56QTROU0F3TGpRek1URXhWakF1TkRjME5qSTNRekF1TXpjeE1UQTJJREF1TkRjM01UZzNJREF1TXpjeU9EazNJREF1TkRjNE9UYzVJREF1TXpjMU1qQXhJREF1TkRjNE9UYzVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqUTBNek14TmlBd0xqUTNPRGszT1Vnd0xqUTVNVGsxTTBNd0xqUTVOREkxTmlBd0xqUTNPRGszT1NBd0xqUTVOak13TkNBd0xqUTNOekU0TnlBd0xqUTVOak13TkNBd0xqUTNORFl5TjFZd0xqUXpNVEV4UXpBdU5EazJNekEwSURBdU5ESTRPREEySURBdU5EazBOVEV5SURBdU5ESTJOelU0SURBdU5Ea3hPVFV6SURBdU5ESTJOelU0U0RBdU5EUXpNekUyUXpBdU5EUXhNREV6SURBdU5ESTJOelU0SURBdU5ETTRPVFkxSURBdU5ESTROVFVnTUM0ME16ZzVOalVnTUM0ME16RXhNVll3TGpRM05EWXlOME13TGpRek9EazJOU0F3TGpRM056RTROeUF3TGpRME1EYzFOeUF3TGpRM09EazNPU0F3TGpRME16TXhOaUF3TGpRM09EazNPVm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDFNVEEyT1RrZ01DNDBOemc1TnpsSU1DNDFOVGt6TXpWRE1DNDFOakUyTXpnZ01DNDBOemc1TnprZ01DNDFOak0yT0RZZ01DNDBOemN4T0RjZ01DNDFOak0yT0RZZ01DNDBOelEyTWpkV01DNDBNekV4TVVNd0xqVTJNelk0TmlBd0xqUXlPRGd3TmlBd0xqVTJNVGc1TkNBd0xqUXlOamMxT0NBd0xqVTFPVE16TlNBd0xqUXlOamMxT0Vnd0xqVXhNRFk1T1VNd0xqVXdPRE01TlNBd0xqUXlOamMxT0NBd0xqVXdOak0wT0NBd0xqUXlPRFUxSURBdU5UQTJNelE0SURBdU5ETXhNVEZXTUM0ME56UTJNamRETUM0MU1EWXpORGdnTUM0ME56Y3hPRGNnTUM0MU1EZ3pPVFVnTUM0ME56ZzVOemtnTUM0MU1UQTJPVGtnTUM0ME56ZzVOemxhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVNemMxTWpBeElEQXVOREUyTnpJeVNEQXVOREl6T0RNNFF6QXVOREkyTVRReElEQXVOREUyTnpJeUlEQXVOREk0TVRnNUlEQXVOREUwTmpjMElEQXVOREk0TVRnNUlEQXVOREV5TXpjeFZqQXVNelk0T0RVMFF6QXVOREk0TVRnNUlEQXVNelkyTlRVZ01DNDBNall6T1RjZ01DNHpOalExTURJZ01DNDBNak00TXpnZ01DNHpOalExTURKSU1DNHpOelV5TURGRE1DNHpOekk0T1RjZ01DNHpOalExTURJZ01DNHpOekE0TlNBd0xqTTJOakk1TkNBd0xqTTNNRGcxSURBdU16WTRPRFUwVmpBdU5ERXlNemN4UXpBdU16Y3hNVEEySURBdU5ERTBOamMwSURBdU16Y3lPRGszSURBdU5ERTJOekl5SURBdU16YzFNakF4SURBdU5ERTJOekl5V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96eHdZWFJvSUdROUlrMHdMalEwTXpNeE5pQXdMalF4TmpjeU1rZ3dMalE1TVRrMU0wTXdMalE1TkRJMU5pQXdMalF4TmpjeU1pQXdMalE1TmpNd05DQXdMalF4TkRZM05DQXdMalE1TmpNd05DQXdMalF4TWpNM01WWXdMak0yT0RnMU5FTXdMalE1TmpNd05DQXdMak0yTmpVMUlEQXVORGswTlRFeUlEQXVNelkwTlRBeUlEQXVORGt4T1RVeklEQXVNelkwTlRBeVNEQXVORFF6TXpFMlF6QXVORFF4TURFeklEQXVNelkwTlRBeUlEQXVORE00T1RZMUlEQXVNelkyTWprMElEQXVORE00T1RZMUlEQXVNelk0T0RVMFZqQXVOREV5TXpjeFF6QXVORE00T1RZMUlEQXVOREUwTmpjMElEQXVORFF3TnpVM0lEQXVOREUyTnpJeUlEQXVORFF6TXpFMklEQXVOREUyTnpJeVdpSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpVeE1EWTVPU0F3TGpReE5qY3lNa2d3TGpVMU9UTXpOVU13TGpVMk1UWXpPQ0F3TGpReE5qY3lNaUF3TGpVMk16WTROaUF3TGpReE5EWTNOQ0F3TGpVMk16WTROaUF3TGpReE1qTTNNVll3TGpNMk9EZzFORU13TGpVMk16WTROaUF3TGpNMk5qVTFJREF1TlRZeE5qTTRJREF1TXpZME5UQXlJREF1TlRVNU16TTFJREF1TXpZME5UQXlTREF1TlRFd05qazVRekF1TlRBNE16azFJREF1TXpZME5UQXlJREF1TlRBMk16UTRJREF1TXpZMk1qazBJREF1TlRBMk16UTRJREF1TXpZNE9EVTBWakF1TkRFeU16Y3hRekF1TlRBMk16UTRJREF1TkRFME5qYzBJREF1TlRBNE16azFJREF1TkRFMk56SXlJREF1TlRFd05qazVJREF1TkRFMk56SXlXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXhNRFk1T1NBd0xqTTFOREl5TWtnd0xqVTFPVE16TlVNd0xqVTJNVFl6T0NBd0xqTTFOREl5TWlBd0xqVTJNelk0TmlBd0xqTTFNalF6SURBdU5UWXpOamcySURBdU16UTVPRGRXTUM0ek1EWXpOVFJETUM0MU5qTTJPRFlnTUM0ek1EUXdOU0F3TGpVMk1UWXpPQ0F3TGpNd01qQXdNaUF3TGpVMU9UTXpOU0F3TGpNd01qQXdNa2d3TGpVeE1EWTVPVU13TGpVd09ETTVOU0F3TGpNd01qQXdNaUF3TGpVd05qTTBPQ0F3TGpNd016YzVOQ0F3TGpVd05qTTBPQ0F3TGpNd05qTTFORll3TGpNME9UZzNRekF1TlRBMk16UTRJREF1TXpVeU1UYzBJREF1TlRBNE16azFJREF1TXpVME1qSXlJREF1TlRFd05qazVJREF1TXpVME1qSXlXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVTNPRFUzSURBdU5EYzRPVGM1U0RBdU5qSTNNakE0UXpBdU5qSTVOVEV5SURBdU5EYzRPVGM1SURBdU5qTXhOVFlnTUM0ME56Y3hPRGNnTUM0Mk16RTFOaUF3TGpRM05EWXlOMVl3TGpRek1URXhRekF1TmpNeE5UWWdNQzQwTWpnNE1EWWdNQzQyTWprM05qZ2dNQzQwTWpZM05UZ2dNQzQyTWpjeU1EZ2dNQzQwTWpZM05UaElNQzQxTnpnMU4wTXdMalUzTmpJMk55QXdMalF5TmpjMU9DQXdMalUzTkRJeE9TQXdMalF5T0RVMUlEQXVOVGMwTWpFNUlEQXVORE14TVRGV01DNDBOelEyTWpkRE1DNDFOelEwTnpVZ01DNDBOemN4T0RjZ01DNDFOell5TmpjZ01DNDBOemc1TnprZ01DNDFOemcxTnlBd0xqUTNPRGszT1ZvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhMM04yWno0PTt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tIiBpZD0iNiI+CiAgICAgIDxteENlbGwgc3R5bGU9ImlyLnJlZj0wMmQ3ZDRkNi03ZWUyLTQzNTItOTIzYi05OWYzODMyNGIxNjI7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249bGVmdDtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9MzthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEzO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9ZG9ja2VyLWNvbnRhaW5lcjt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTtjb250YWluZXI9MTtwZXJpbWV0ZXI9cmVjdGFuZ2xlUGVyaW1ldGVyO3JlY3Vyc2l2ZVJlc2l6ZT0wO3N0cm9rZVdpZHRoPTE7dGV4dERpcmVjdGlvbj1sdHI7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyOyIgdmVydGV4PSIxIiBpc1RodW1iPSIwIiBwYXJlbnQ9IjQiPgogICAgICAgIDxteEdlb21ldHJ5IHg9IjM2NyIgeT0iNTAiIHdpZHRoPSIyNDYiIGhlaWdodD0iMzk4IiBhcz0iZ2VvbWV0cnkiLz4KICAgICAgPC9teENlbGw+CiAgICA8L29iamVjdD4KICAgIDxteENlbGwgaWQ9IjciIHZhbHVlPSJXZWIgQXBwbGljYXRpb24gLSBTZXJ2ZXIgc2lkZSIgc3R5bGU9ImlyLnJlZj05NGU4MWE2Zi00MWEwLTQ5MTAtYjY0Yy1hODQzNTkxMjhlOTg7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9d2ViLWFwcGxpY2F0aW9uLXNlcnZlci1zaWRlO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BITjBlV3hsUGlZamVHRTdJQ0FnSUM1cFkyOXVMV1pwYkd3Z2V5WWplR0U3SUNBZ0lDQWdJQ0JtYVd4c09pQWpNVEZCT0VOR095WWplR0U3SUNBZ0lIMG1JM2hoT3p3dmMzUjViR1UrSmlONFlUczhaeUJqYkdsd0xYQmhkR2c5SW5WeWJDZ2pZMnhwY0RBcElqNG1JM2hoT3p4bklHTnNhWEF0Y0dGMGFEMGlkWEpzS0NOamJHbHdNU2tpUGlZamVHRTdQSEJoZEdnZ1ptbHNiQzF5ZFd4bFBTSmxkbVZ1YjJSa0lpQmpiR2x3TFhKMWJHVTlJbVYyWlc1dlpHUWlJR1E5SWswd0xqTTJOVGcxTXlBd0xqSTVPRFkyTVVNd0xqTTJOVGcxTXlBd0xqSTRNamM0TWlBd0xqTTNPRGN5TlNBd0xqSTJPVGt4TVNBd0xqTTVORFl3TXlBd0xqSTJPVGt4TVVnd0xqWXdOVFF6TmtNd0xqWXlNVE14TkNBd0xqSTJPVGt4TVNBd0xqWXpOREU0TmlBd0xqSTRNamM0TWlBd0xqWXpOREU0TmlBd0xqSTVPRFkyTVVNd0xqWXpOREU0TmlBd0xqTXhORFV6T1NBd0xqWXlNVE14TkNBd0xqTXlOelF4TVNBd0xqWXdOVFF6TmlBd0xqTXlOelF4TVVnd0xqTTVORFl3TTBNd0xqTTNPRGN5TlNBd0xqTXlOelF4TVNBd0xqTTJOVGcxTXlBd0xqTXhORFV6T1NBd0xqTTJOVGcxTXlBd0xqSTVPRFkyTVZwTk1DNHpPVFEyTURNZ01DNDJPVEUxTnpoRE1DNHpOemczTWpVZ01DNDJPVEUxTnpnZ01DNHpOalU0TlRNZ01DNDNNRFEwTlNBd0xqTTJOVGcxTXlBd0xqY3lNRE15T0VNd0xqTTJOVGcxTXlBd0xqY3pOakl3TmlBd0xqTTNPRGN5TlNBd0xqYzBPVEEzT0NBd0xqTTVORFl3TXlBd0xqYzBPVEEzT0Vnd0xqVTFNREF4T1ZZd0xqWTVNVFUzT0Vnd0xqTTVORFl3TTFwTk1DNDJNakF6TlRFZ01DNDJNams1TVRGSU1DNDJNRFExTmpWRE1DNDFPVGN4TkRRZ01DNDJNams1TVRFZ01DNDFPVEF3TmpnZ01DNDJNekV6T1RNZ01DNDFPRE0yTVRrZ01DNDJNelF3TnpoSU1DNHpPVFEyTURORE1DNHpOemczTWpVZ01DNDJNelF3TnpnZ01DNHpOalU0TlRNZ01DNDJNakV5TURZZ01DNHpOalU0TlRNZ01DNDJNRFV6TWpoRE1DNHpOalU0TlRNZ01DNDFPRGswTkRrZ01DNHpOemczTWpVZ01DNDFOelkxTnpnZ01DNHpPVFEyTURNZ01DNDFOelkxTnpoSU1DNDJNRFUwTXpaRE1DNDJNakV6TVRRZ01DNDFOelkxTnpnZ01DNDJNelF4T0RZZ01DNDFPRGswTkRrZ01DNDJNelF4T0RZZ01DNDJNRFV6TWpoRE1DNDJNelF4T0RZZ01DNDJNVFUzTkRVZ01DNDJNamcyTkRZZ01DNDJNalE0TmpnZ01DNDJNakF6TlRFZ01DNDJNams1TVRGYVRUQXVOamN5TlRFNUlEQXVOakk1T1RFeFZqQXVNak14TlRjM1F6QXVOamN5TlRFNUlEQXVNVGs1T0RJeElEQXVOalEyTnpjMklEQXVNVGMwTURjM0lEQXVOakUxTURFNUlEQXVNVGMwTURjM1NEQXVNemcxTURKRE1DNHpOVE15TmpNZ01DNHhOelF3TnpjZ01DNHpNamMxTWlBd0xqRTVPVGd5TVNBd0xqTXlOelV5SURBdU1qTXhOVGMzVmpBdU56WTRNalExUXpBdU16STNOVElnTUM0NE1EQXdNREVnTUM0ek5UTXlOak1nTUM0NE1qVTNORFVnTUM0ek9EVXdNaUF3TGpneU5UYzBOVWd3TGpVMU1EQXhPVll3TGpnM05UTTJOa013TGpVMU1EQXhPU0F3TGpnM09EQTBNaUF3TGpVMU1ESXhNaUF3TGpnNE1EWTNNaUF3TGpVMU1EVTROQ0F3TGpnNE16STBOVWd3TGpNNE5UQXlRekF1TXpJeE5UQTNJREF1T0Rnek1qUTFJREF1TWpjd01ESWdNQzQ0TXpFM05UY2dNQzR5TnpBd01pQXdMamMyT0RJME5WWXdMakl6TVRVM04wTXdMakkzTURBeUlEQXVNVFk0TURZMElEQXVNekl4TlRBM0lEQXVNVEUyTlRjM0lEQXVNemcxTURJZ01DNHhNVFkxTnpkSU1DNDJNVFV3TVRsRE1DNDJOemcxTXpJZ01DNHhNVFkxTnpjZ01DNDNNekF3TVRrZ01DNHhOamd3TmpRZ01DNDNNekF3TVRrZ01DNHlNekUxTnpkV01DNDJNams1TVRGSU1DNDJOekkxTVRsYUlpQmpiR0Z6Y3owaWFXTnZiaTFtYVd4c0lpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDNOemMxTWpRZ01DNDJOakkzTWt3d0xqYzNPVGsxT1NBd0xqWTJNamM0T0VNd0xqZ3dNVGN6TmlBd0xqWTJOREF3TlNBd0xqZ3hPVEUyT0NBd0xqWTRNVFF6TnlBd0xqZ3lNRE00TmlBd0xqY3dNekU1T0V3d0xqZ3lNRFExTXlBd0xqY3dOVFl6TTFZd0xqZzFOelE0TWt3d0xqZ3lNRE00TmlBd0xqZzFPVGt4TjBNd0xqZ3hPVEUyT0NBd0xqZzRNVFkzT0NBd0xqZ3dNVGN6TnlBd0xqZzVPVEV4SURBdU56YzVPVGMxSURBdU9UQXdNekk0VERBdU56YzNOVFFnTUM0NU1EQXpPVFpJTUM0Mk1qVTJOemRETUM0Mk1ESTNPVFFnTUM0NU1EQXpPVFlnTUM0MU9EUXdPVFFnTUM0NE9ESTBPRFFnTUM0MU9ESTRNeklnTUM0NE5UazVNVGRNTUM0MU9ESTNOalFnTUM0NE5UYzBPREpXTUM0M01EVTJNek5ETUM0MU9ESTNOalFnTUM0Mk9ESTNOU0F3TGpZd01EWTNOQ0F3TGpZMk5EQTFJREF1TmpJek1qUXlJREF1TmpZeU56ZzRUREF1TmpJMU5qYzNJREF1TmpZeU56SklNQzQzTnpjMU1qUmFUVEF1TnprME1ESTVJREF1TnpJNE56UXhTREF1TmpBNU1UZzRUREF1TmpBNU1UY3lJREF1T0RVM05EZ3lRekF1TmpBNU1UY3lJREF1T0RZMk1ESTRJREF1TmpFMU5qWTNJREF1T0Rjek1EVTJJREF1TmpJek9UZzVJREF1T0Rjek9UQXhUREF1TmpJMU5qYzNJREF1T0Rjek9UZzNTREF1TnpjM05UUk1NQzQzTnpreU1qZ2dNQzQ0TnpNNU1ERkRNQzQzT0RZNU9UWWdNQzQ0TnpNeE1UTWdNQzQzT1RNeE56RWdNQzQ0TmpZNU16Y2dNQzQzT1RNNU5pQXdMamcxT1RFM1REQXVOemswTURRMUlEQXVPRFUzTkRneVREQXVOemswTURJNUlEQXVOekk0TnpReFdrMHdMalkzT0RRNU15QXdMamMwT0RVME4wTXdMalk0TXpVd055QXdMamMwT0RVME55QXdMalk0TnpZMUlEQXVOelV5TWpjeklEQXVOamc0TXpBMklEQXVOelUzTVRBM1REQXVOamc0TXprM0lEQXVOelU0TkRWV01DNDROVEE0T0VNd0xqWTRPRE01TnlBd0xqZzFOVGc1TXlBd0xqWTRORFkzTVNBd0xqZzJNREF6TnlBd0xqWTNPVGd6TnlBd0xqZzJNRFk1TTB3d0xqWTNPRFE1TXlBd0xqZzJNRGM0TTBnd0xqWXpNakkzT1VNd0xqWXlOekkyTmlBd0xqZzJNRGM0TXlBd0xqWXlNekV5TWlBd0xqZzFOekExTnlBd0xqWXlNalEyTmlBd0xqZzFNakl5TkV3d0xqWXlNak0zTmlBd0xqZzFNRGc0VmpBdU56VTRORFZETUM0Mk1qSXpOellnTUM0M05UTTBNemNnTUM0Mk1qWXhNRElnTUM0M05Ea3lPVE1nTUM0Mk16QTVNelVnTUM0M05EZzJNemhNTUM0Mk16SXlOemtnTUM0M05EZzFORGRJTUM0Mk56ZzBPVE5hVFRBdU5qWTROVGtnTUM0M05qZ3pOVFJJTUM0Mk5ESXhPREpXTUM0NE5EQTVOemRJTUM0Mk5qZzFPVll3TGpjMk9ETTFORnBOTUM0M05UYzNNVGdnTUM0M09EZ3hPVGxETUM0M05qTXhPRGNnTUM0M09EZ3hPVGtnTUM0M05qYzJNakVnTUM0M09USTJNek1nTUM0M05qYzJNakVnTUM0M09UZ3hNRE5ETUM0M05qYzJNakVnTUM0NE1ETXhNVFlnTUM0M05qTTRPVFlnTUM0NE1EY3lOaUF3TGpjMU9UQTJNaUF3TGpnd056a3hOVXd3TGpjMU56Y3hPQ0F3TGpnd09EQXdOa2d3TGpjeE1UVTJNa013TGpjd05qQTVNeUF3TGpnd09EQXdOaUF3TGpjd01UWTFPU0F3TGpnd016VTNNaUF3TGpjd01UWTFPU0F3TGpjNU9ERXdNME13TGpjd01UWTFPU0F3TGpjNU16QTRPU0F3TGpjd05UTTROQ0F3TGpjNE9EazBOaUF3TGpjeE1ESXhPQ0F3TGpjNE9ESTVUREF1TnpFeE5UWXlJREF1TnpnNE1UazVTREF1TnpVM056RTRXazB3TGpjM01Ea3lNaUF3TGpjME9EVTBOME13TGpjM05qTTVNaUF3TGpjME9EVTBOeUF3TGpjNE1EZ3lOU0F3TGpjMU1qazRNU0F3TGpjNE1EZ3lOU0F3TGpjMU9EUTFRekF1Tnpnd09ESTFJREF1TnpZek5EWTBJREF1TnpjM01TQXdMamMyTnpZd055QXdMamMzTWpJMk5pQXdMamMyT0RJMk0wd3dMamMzTURreU1pQXdMamMyT0RNMU5FZ3dMamN4TVRVMk1rTXdMamN3TmpBNU15QXdMamMyT0RNMU5DQXdMamN3TVRZMU9TQXdMamMyTXpreUlEQXVOekF4TmpVNUlEQXVOelU0TkRWRE1DNDNNREUyTlRrZ01DNDNOVE0wTXpjZ01DNDNNRFV6T0RRZ01DNDNORGt5T1RNZ01DNDNNVEF5TVRnZ01DNDNORGcyTXpoTU1DNDNNVEUxTmpJZ01DNDNORGcxTkRkSU1DNDNOekE1TWpKYUlpQmpiR0Z6Y3owaWFXTnZiaTFtYVd4c0lpOCtKaU40WVRzOEwyYytKaU40WVRzOEwyYytKaU40WVRzOFpHVm1jejRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakVpSUdobGFXZG9kRDBpTVNJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZZMnhwY0ZCaGRHZytKaU40WVRzOFkyeHBjRkJoZEdnZ2FXUTlJbU5zYVhBeElqNG1JM2hoT3p4eVpXTjBJSGRwWkhSb1BTSXdMamt5SWlCb1pXbG5hSFE5SWpBdU9USWlJR1pwYkd3OUluZG9hWFJsSWlCMGNtRnVjMlp2Y20wOUluUnlZVzV6YkdGMFpTZ3dMakEwTURBek9URWdNQzR3TkRBd016a3hLU0l2UGlZamVHRTdQQzlqYkdsd1VHRjBhRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCIgcGFyZW50PSI2Ij4KICAgICAgPG14R2VvbWV0cnkgeD0iNzgiIHk9IjE1NCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogIDwvcm9vdD4KPC9teEdyYXBoTW9kZWw+Cg==</schema>
  </diagram>
  <trustZones>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="60"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows/>
  <customFields/>
  <components>
    <component uuid="7ba743e6-0a7c-47a7-b5cd-356df50bdafb" diagramComponentId="7cb7af85-a2fa-46b6-a6a1-7961e0eab808" ref="7e30ea22-2585-454c-bd82-24c131f1bad4" name="EC2 - Elastic Compute Cloud" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="ec2">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" name="Ensure that the EC2 instances are managed by the systems manager" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances. Additional configuration is needed in Systems Manager for patch deployment to managed EC2 instances.&lt;/p&gt;&lt;p&gt;If you use EC2 instances managed by Systems Manager to collect inventory for your cardholder data environment (CDE), make sure that the instances are managed by Systems Manager. Using Systems Manager can help to maintain an inventory of system components that are in scope for PCI DSS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For systems that are in scope for PCI DSS, before you install vendor patches in a production environment, you should test and validate them. After you deploy patches, validate security settings and controls to ensure that deployed patches have not affected the security of the CDE. If you use EC2 instances managed by Systems Manager to patch managed instances in your CDE, ensure that the instances are managed by Systems Manager. Systems Manager deploys system patches, which helps to protect system components and software from known vulnerabilities.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You can use the Systems Manager quick setup to set up Systems Manager to manage your EC2 instances.&lt;/p&gt;&lt;p&gt;To determine whether your instances can support Systems Manager associations, see Systems Manager prerequisites in the &lt;i&gt;AWS Systems Manager User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To ensure EC2 instances are managed by Systems Manager&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the AWS Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Quick setup&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;On the configuration screen, keep the default options.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Set up Systems Manager&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.337">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.332">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-1" name="VPC default security group should prohibit inbound and outbound traffic" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If a service that is in scope for PCI DSS is associated with the default security group, the default rules for the security group will allow all outbound traffic. The rules also allow all inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.&lt;/p&gt;&lt;p&gt;You should change the default security group rules setting to restrict inbound and outbound traffic. Using the default might violate the requirement to allow only necessary traffic to and from the CDE.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, create new security groups and assign those security groups to your resources. To prevent the default security groups from being used, remove their inbound and outbound rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To create new security groups and assign them to your resources&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;. View the default security groups details to see the resources that are assigned to them.&lt;/li&gt;&lt;li&gt;Create a set of least-privilege security groups for the resources. For details on how to create security groups, see Creating a security group in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;On the Amazon EC2 console, change the security group for the resources that use the default security groups to the least-privilege security group you created. See Changing an instance's security groups in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After you assign the new security groups to the resources, remove the inbound and outbound rules from the default security groups. This ensures that the default security groups are not used.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To remove the rules from the default security group&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.&lt;/li&gt;&lt;li&gt;In the navigation pane, choose &lt;strong&gt;Security groups&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select a default security group, and choose the &lt;strong&gt;Inbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit inbound rules&lt;/strong&gt;. Then delete all of the inbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;li&gt;Select a default security group and choose the &lt;strong&gt;Outbound rules&lt;/strong&gt; tab. Choose &lt;strong&gt;Edit outbound rules&lt;/strong&gt;. Then delete all of the outbound rules. Choose &lt;strong&gt;Save rules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Repeat the previous step for each default security group.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-1" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="5"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="5"/>
                <countermeasure ref="aws-tier-6.10" mitigation="5"/>
                <countermeasure ref="aws-tier-6.11" mitigation="5"/>
                <countermeasure ref="aws-tier-6.12" mitigation="5"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="5"/>
                <countermeasure ref="aws-tier-6.16" mitigation="5"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="5"/>
                <countermeasure ref="aws-tier-6.24" mitigation="5"/>
                <countermeasure ref="aws-tier-6.25" mitigation="5"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="5"/>
                <countermeasure ref="aws-tier-6.31" mitigation="5"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="5"/>
                <countermeasure ref="aws-tier-6.9" mitigation="5"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SYSTEMS-MANAGER4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4593841e-0bd9-41c8-b459-ff561d41d874" diagramComponentId="a2285224-87d0-45c6-afd5-3d2afe3a0ef7" ref="60842bae-3feb-47ef-8826-213c77f15660" name="VPC #1" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="vpc">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.855">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.856">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-VPC2" name="Connect to VPC using an AWS Site-to-Site VPN connection" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to VPC using an AWS Site-to-Site VPN connection&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, instances that you launch into an Amazon VPC can't communicate with your own (remote) network. You can enable access to your remote network from your VPC by creating an AWS Site-to-Site VPN (Site-to-Site VPN) connection, and configuring routing to pass traffic through the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS VPC - VPN connections" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html"/>
            <reference name="What is AWS Site-to-Site VPN?" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs.&lt;/li&gt; 
  &lt;li&gt;Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic.&lt;/li&gt; 
  &lt;li&gt;If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance.&lt;/li&gt; 
  &lt;li&gt;(Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device.&lt;/li&gt; 
  &lt;li&gt;(Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing.&lt;/li&gt; 
  &lt;li&gt;Ensure that you have configured routing in your subnet route tables for the VPN connection.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.662">
              <output/>
            </source>
            <references>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC1" name="Control access to VPC resources with IAM identities and policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to VPC resources with IAM identities and policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely control access to AWS resources. IAM administrators control who can be authenticated (signed in) and authorized (have permissions) to use Amazon VPC resources. IAM is an AWS service that you can use with no additional charge. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Control access to VPC resources by using: 
&lt;/div&gt; 
&lt;div&gt;
  1. Identities: 
&lt;/div&gt; 
&lt;div&gt;
  Authentication is how you sign in to AWS using your identity credentials. 
&lt;/div&gt; 
&lt;div&gt;
  You must be authenticated (signed in to AWS) as the AWS account root user, an IAM user, or by assuming an IAM role. You can also use your company's single sign-on authentication, or even sign in using Google or Facebook. In these cases, your administrator previously set up identity federation using IAM roles. When you access AWS using credentials from another company, you are assuming a role indirectly. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Identity-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Identity-based policies are JSON permissions policy documents that you can attach to an identity, such as an IAM user, role, or group. These policies control what actions that identity can perform, on which resources, and under what conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Resource-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. Service administrators can use these policies to define what actions a specified principal (account member, user, or role) can perform on that resource and under what conditions. Resource-based policies are inline policies. There are no managed resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Access control lists (ACLs): 
&lt;/div&gt; 
&lt;div&gt;
  Access control lists (ACLs) are a type of policy that controls which principals (account members, users, or roles) have permissions to access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and access management for Amazon VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/security-iam.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.662">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC8" name="Create CloudWatch alarms to monitor a NAT gateway" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Creating CloudWatch alarms to monitor a NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor your NAT gateway using CloudWatch, which collects information from your NAT gateway and creates readable, near real-time metrics. You can use this information to monitor and troubleshoot your NAT gateway. NAT gateway metric data is provided at 1-minute intervals, and statistics are recorded for a period of 15 months. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the amount of traffic coming in or leaving the NAT gateway. The following alarm monitors the amount of outbound traffic from clients in your VPC through the NAT gateway to the internet. It sends a notification when the number of bytes reaches a threshold of 5,000,000 during a 15-minute period. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for outbound traffic through the NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the BytesOutToDestination metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt;= and enter 5000000. Enter 1 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 15 minutes and specify a statistic of Sum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can create an alarm that monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm to monitor port allocation errors 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the ErrorPortAllocation metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt; and enter 0. Enter 3 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 5 minutes and specify a statistic of Maximum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring NAT gateways using Amazon CloudWatch" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can test an alarm by setting it to any state using the SetAlarmState API action or the set-alarm-state command in the AWS CLI. This temporary state change lasts only until the next alarm comparison occurs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references>
              <reference name="Using Amazon CloudWatch Alarms" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC3" name="Create Route 53 alias records for VPC endpoints" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for VPC endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An Amazon Virtual Private Cloud (Amazon VPC) interface endpoint lets you use AWS PrivateLink to access selected services. These services include some AWS services, services that are hosted by other AWS customers and partners in their own VPCs, and supported AWS Marketplace partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To route domain traffic to an interface endpoint, use Amazon Route 53 to create an alias record. An alias record is a Route 53 extension to DNS. It's similar to a CNAME record, but you can create an alias record both for the root domain, such as example.com, and for subdomains, such as www.example.com. (You can create CNAME records only for subdomains.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To route traffic to an Amazon VPC interface endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the Route 53 hosted zone and the Amazon VPC interface endpoint using the same account, skip to step 2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the hosted zone and the interface endpoint using different accounts, get the service name for the interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console and open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the right pane, choose the endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the bottom pane, get the value of DNS name, for example, vpce-0fd00dd593example-dexample.cloudtrail.us-west-2.vpce.amazonaws.com. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the Route 53 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Hosted Zones. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the name of the hosted zone that has the domain name that you want to use to route traffic to your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create Record Set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Specify the following values: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Name 
&lt;/div&gt; 
&lt;div&gt;
  Enter the domain name that you want to use to route traffic to your Amazon VPC interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type 
&lt;/div&gt; 
&lt;div&gt;
  Choose A - IPv4 address. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias 
&lt;/div&gt; 
&lt;div&gt;
  Choose Yes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias Target 
&lt;/div&gt; 
&lt;div&gt;
  How you specify the value for Alias Target depends on whether you created the hosted zone and the interface endpoint using the same AWS account or different accounts: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Same account - Choose the list, and find the category Amazon VPC Endpoints. Then choose the DNS name of the interface endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Different accounts - Enter the value that you got in step 1 of this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Routing Policy 
&lt;/div&gt; 
&lt;div&gt;
  Choose the applicable routing policy. For more information, see Choosing a routing policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Evaluate Target Health 
&lt;/div&gt; 
&lt;div&gt;
  Accept the default value of No. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.662">
              <output/>
            </source>
            <references>
              <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC7" name="Do not put sensitive data into VPC free-form fields" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with Amazon VPC or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into Amazon VPC or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon Virtual Private Cloud" url="https://docs.aws.amazon.com/vpc/latest/userguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC9" name="Enable VPC Traffic Mirroring" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable VPC Traffic Mirroring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an elastic network interface of Amazon EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Content inspection 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Threat monitoring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Troubleshooting 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The security and monitoring appliances can be deployed as individual instances, or as a fleet of instances behind a Network Load Balancer with a UDP listener. Traffic Mirroring supports filters and packet truncation, so that you only extract the traffic of interest to monitor by using monitoring tools of your choice. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your traffic mirror resources using any of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your traffic mirror resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC. The AWS CLI is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs. The AWS SDKs take care of many of the connection details, such as calculating signatures, handling request retries, and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as generating the hash to sign the request and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Traffic Mirroring?" url="https://docs.aws.amazon.com/vpc/latest/mirroring/what-is-traffic-mirroring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can review your traffic mirror targets, filters and sessions from Amazon VPC console:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Region selector, choose the AWS Region that you used when you created the VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the navigation pane, choose Traffic Mirroring, Mirror Targets/Mirror Filters/Mirror Sessions. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references>
              <reference name="Getting started with Traffic Mirroring" url="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.661">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC6" name="Use Network ACLs for VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Network ACLs for VPC as an additional layer of security 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it's associated with. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the parts of a network ACL rule: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it's applied regardless of any higher-numbered rule that might contradict it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Protocol. You can specify any protocol that has a standard protocol number. For more information, see Protocol Numbers. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Source. [Inbound rules only] The source of the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Destination. [Outbound rules only] The destination for the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Allow/Deny. Whether to allow or deny the specified traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Review your Network ACLs using the console:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Network ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select a Network ACL to see details. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.663">
              <output/>
            </source>
            <references>
              <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC4" name="Use VPC endpoint policies" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use VPC endpoint policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When you create an endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. Endpoint policies must be written in JSON format. Not all services support endpoint policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service. If a service does not support endpoint policies, the endpoint allows full access to the service. An endpoint policy does not override or replace IAM user policies or service-specific policies (such as S3 bucket policies). It is a separate policy for controlling access from the endpoint to the specified service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You cannot attach more than one policy to an endpoint. However, you can modify the policy at any time. If you do modify a policy, it can take a few minutes for the changes to take effect. For more information about writing policies, see Overview of IAM Policies in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your endpoint policy can be like any IAM policy; however, take note of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Only the parts of the policy that relate to the specified service will work. You cannot use an endpoint policy to allow resources in your VPC to perform other actions; for example, if you add EC2 actions to an endpoint policy for an endpoint to Amazon S3, they will have no effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your policy must contain a Principal element. For additional information related gateway endpoints, see Endpoint policies for gateway endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The size of an endpoint policy cannot exceed 20,480 characters (including white space). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling access to services with VPC endpoints" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.662">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:23.662">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                    <countermeasure ref="AWS-VPC1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                <countermeasure ref="AWS-VPC1" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC8" mitigation="33"/>
                    <countermeasure ref="AWS-VPC9" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC8" mitigation="33"/>
                <countermeasure ref="AWS-VPC9" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC4" mitigation="17"/>
                    <countermeasure ref="AWS-VPC5" mitigation="17"/>
                    <countermeasure ref="AWS-VPC6" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC3" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC3" mitigation="17"/>
                <countermeasure ref="AWS-VPC4" mitigation="17"/>
                <countermeasure ref="AWS-VPC5" mitigation="17"/>
                <countermeasure ref="AWS-VPC6" mitigation="17"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="55776976-4051-4dcd-af60-c770202b3e58" diagramComponentId="1e5bec19-b92d-4bf3-bd25-f8441eb2648a" ref="3b611e07-0f0f-4404-95a9-aba716523820" name="Docker Environment" desc="" library="" parentComponentRef="7e30ea22-2585-454c-bd82-24c131f1bad4" componentDefinitionRef="docker-environment">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="5c19eb7b-4d9f-454b-adaf-088825825ba8" diagramComponentId="02d7d4d6-7ee2-4352-923b-99f38324b162" ref="cecef08a-e03f-4f80-a951-e8c4d8c29944" name="IriusRisk" desc="" library="Docker CIS" parentComponentRef="3b611e07-0f0f-4404-95a9-aba716523820" componentDefinitionRef="docker-container">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.111">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.584">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.111">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.111">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.110">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100" issueId="" issueLink="">
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.584">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The application does not sufficiently encapsulate critical data or functionality.
                        &lt;/div&gt;
                        &lt;p&gt;Encapsulation is about drawing strong boundaries. In a web browser, this might mean
                        ensuring that your mobile code cannot be abused by other mobile code. On the server, it might
                        mean differentiating between validated data and unvalidated data, between one user's data and
                        another's, or between data that users are allowed to see and data that they are not.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify boundaries on the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Make sure that the application adequately enforces access control across those
                            boundaries. &amp;nbsp;For example, does it require some form of authentication at the
                            boundary? &amp;nbsp;Or does it prevent access across the boundary entirely?&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-400" name="Uncontrolled Resource Consumption ('Resource Exhaustion')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.110">
              <output/>
            </source>
            <references>
              <reference name="CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')" url="https://cwe.mitre.org/data/definitions/400.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.109">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.583">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="D5.1" name="Ensure AppArmor Profile is Enabled" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AppArmor is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Debian and Ubuntu. Rationale: AppArmor
                        protects the Linux OS and applications from various threats by enforcing security policy which
                        is also known as AppArmor profile. You can create your own AppArmor profile for containers or
                        use the Docker's default AppArmor profile. This would enforce security policies on the
                        containers as defined in the profile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If AppArmor is applicable for your Linux OS, use it. You may have to follow below set of steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Verify if AppArmor is installed. If not, install it.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import an AppArmor profile for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Put this profile in enforcing mode.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the customized AppArmor profile. For example,&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --security-opt=&amp;quot;apparmor:PROFILENAME&amp;quot; centos
                        /bin/bash
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Alternatively, you can keep the docker's default apparmor profile.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the AppArmor profile. If
                        your AppArmor profile is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Apparmor" url="https://docs.docker.com/engine/security/apparmor/"/>
            <reference name="Docker docs: other kernel security features" url="https://docs.docker.com/engine/security/security/#other-kernel-security-features"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: AppArmorProfile={{
                            .AppArmorProfile }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return a valid AppArmor Profile for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.1" name="Ensure a user for the container has been created" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create a non-root user for the container in the Dockerfile for the container image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is a good practice to run the container as a non-root user, if possible. Though user
                        namespace mapping is now available, if a user is already defined in the container image, the
                        container is run as that user by default and specific user namespace remapping is not required.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that the Dockerfile for the container image contains the below instruction: USER Where
                        username or ID refers to the user that could be found in the container base image. If there is
                        no specific user created in the container base image, then add a useradd command to add the
                        specific user before USER instruction. For example, add the below lines in the Dockerfile to
                        create a user in the container:
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        RUN useradd -d /home/username -m -s /bin/bash username USER username&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        Note: If there are users in the image that the containers do not need, consider deleting them.
                        After deleting those users, commit the image and then generate new instances of containers for
                        use.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 2918" url="https://github.com/docker/docker/issues/2918"/>
            <reference name="Docker github: 4572" url="https://github.com/docker/docker/pull/4572"/>
            <reference name="Docker github: 7906" url="https://github.com/docker/docker/issues/7906"/>
          </references>
          <standards>
            <standard ref="4.1" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: User={{ .Config.User }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return container username or user ID. If it is blank it means, the
                            container is running as root.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.24" name="Ensure cgroup usage is confirmed" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>It is possible to attach to a particular cgroup on container run. Confirming cgroup usage
                        would ensure that containers are running under defined cgroups.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        System administrators typically define cgroups under which containers are supposed to run. Even
                        if cgroups are not explicitly defined by the system administrators, containers run under docker
                        cgroup by default. At run-time, it is possible to attach to a different cgroup other than the
                        one that was expected to be used. This usage should be monitored and confirmed. By attaching to
                        a different cgroup than the one that is expected, excess permissions and resources might be
                        granted to the container and thus, can prove to be unsafe.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --cgroup-parent option in docker run command unless needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: custom cgroups" url="https://docs.docker.com/engine/reference/run/#specify-custom-cgroups"/>
            <reference name="Docker redhat: resource management" url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch01.html"/>
          </references>
          <standards>
            <standard ref="5.24" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CgroupParent={{
                            .HostConfig.CgroupParent }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the cgroup under which the containers are running. If it is
                            blank, it means containers are running under default docker cgroup. In that case, this
                            recommendation is compliant. If the containers are found to be running under cgroup other
                            than the one that was expected, this recommendation is non-compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.26" name="Ensure container health is checked at runtime" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd
                        parameter at container runtime for checking container health.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. If the container image you are using does
                        not have a predefined HEALTHCHECK instruction, use the --health-cmd parameter to check container
                        health at runtime. Based on the reported health status, you could take necessary actions.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container using --health-cmd and the other parameters. For example, docker run -d
                        --health-cmd='stat /etc/passwd || exit 1' nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run healthcheck" url="https://docs.docker.com/engine/reference/run/#healthcheck"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.26" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that all the containers are reporting health status:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Health={{ .State.Health.Status
                            }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.5" name="Ensure Content trust for Docker is Enabled" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Content trust is disabled by default. You should enable it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content trust provides the ability to use digital signatures for data sent to and received from
                        remote Docker registries. These signatures allow client-side verification of the integrity and
                        publisher of specific image tags. This ensures provenance of container images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To enable content trust in a bash shell, enter the following command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        export DOCKER_CONTENT_TRUST=1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, set this environment variable in your profile file so that content trust in
                        enabled on every login.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures
                        while working with images - build, create, pull, push and run. You can use the
                        --disable-content-trust flag to run individual operations on tagged images without content trust
                        on an as-needed basis but that defeats the purpose of enabling content trust and hence, should
                        be avoided wherever possible.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Content trust is currently only available for users of the public Docker Hub. It is
                        currently not available for the Docker Trusted Registry or for private registries.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Content trust" url="https://docs.docker.com/engine/security/trust/content_trust/"/>
            <reference name="Docker docs: Environment variables" url="https://docs.docker.com/engine/reference/commandline/cli/#environment-variables"/>
            <reference name="Docker docs: Notary" url="https://docs.docker.com/engine/reference/commandline/cli/#notary"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            echo $DOCKER_CONTENT_TRUST&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should return 1.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.9" name="Ensure COPY is used instead of ADD in Dockerfile" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use COPY instruction instead of ADD instruction in the Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        COPY instruction just copies the files from the local host machine to the container file system.
                        ADD instruction potentially could retrieve files from remote URLs and perform operations such as
                        unpacking. Thus, ADD instruction introduces risks such as adding malicious files from URLs
                        without scanning and unpacking procedures for vulnerabilities.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use COPY instructions in Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to take care of the functionalities provided by ADD instructions such as fetching
                        files from remote URLs.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: add or copy" url="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;Run the below command for each image in the list above and look
                            for any ADD instructions:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            docker history
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no ADD
                            instructions.
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.512">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.11" name="Ensure CPU priority is set appropriately on the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as CPU shares, you can control the host CPU
                        resources that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, CPU time is divided between containers equally. If it is desired, to control the CPU
                        time amongst the container instances, you can use the CPU sharing feature. CPU sharing allows
                        prioritization of one container over the other and forbids the lower priority container claiming
                        CPU resources more often. This ensures that the high priority containers are served better.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Manage the CPU shares between your containers. To do so, start the container using the
                        --cpu-shares argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cpu-shares 512 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In the above example, the container is started with CPU shares of 50% of what the other
                        containers use. So, if the other container has CPU shares of 80%, this container will have CPU
                        shares of 40%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Every new container will have 1024 shares of CPU by default. However, this value is shown
                        as 0 if you run the command mentioned in the audit section. Alternatively,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Check your container instance ID using docker ps.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Now, inside the above directory (in step 1), you would have a directory named
                        docker-.scope. For example,
                        docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this
                        directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You will find a file named cpu.shares. Execute cat cpu.shares.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;This will always give you the CPU share value based on the system. So, even if there
                        is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this
                        file will have a value of 1024. If we set one container's CPU shares to 512
                        it will receive half
                        of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to
                        derive the number that you should set for respective CPU shares. For example, use 512 if you
                        want to set 50% and 256 if you want to set 25%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you do not set proper CPU shares, the container process may have to starve if the resources
                        on the host are not available. If the CPU resources on the host are free, CPU shares do not
                        place any restrictions on the CPU that the container may use.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run metrics" url="https://docs.docker.com/engine/admin/runmetrics/"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Goldmann blog: run options" url="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.11" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CpuShares={{
                            .HostConfig.CpuShares }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0 or 1024, it means the CPU shares are not in place. If the
                            above command returns a non-zero value other than 1024, it means CPU shares are in place.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.27" name="Ensure docker commands always get the latest version of the image" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Always ensure that you are using the latest version of the image within your repository and
                        not the cached older versions.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Multiple docker commands such as docker pull, docker run, etc. are known to have an issue that
                        by default, they extract the local copy of the image, if present, even though there is an
                        updated version of the image with the &amp;quot;same tag&amp;quot; in the upstream repository.
                        This could lead to using older and vulnerable images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use proper version pinning mechanisms (the latest tag which is assigned by default is still
                        vulnerable to caching attacks) to avoid extracting the cached older versions. Version pinning
                        mechanisms should be used for base images, packages, and entire images too. You can customize
                        version pinning rules as per your requirements.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 16609" url="https://github.com/docker/docker/pull/16609"/>
          </references>
          <standards>
            <standard ref="5.27" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D08 - Container Image Integrity and Origin" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Open your image repository and list the image version history
                            for the image you are inspecting.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Observe the status when the docker pull command is triggered. If
                            the status is shown as Image is up to date, it means that you are getting the cached version
                            of the image.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 3:&lt;/b&gt; Match the version of the image you are running with the latest
                            version reported in your repository which tells if you are running the cached version or the
                            latest copy.
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.22" name="Ensure docker exec commands are not used with privileged option" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use docker exec with --privileged option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --privileged option in docker exec gives extended Linux capabilities to the command. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --privileged option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None. If you need enhanced capabilities within the container, then run the container with the
                        required capabilities.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: exec" url="https://docs.docker.com/engine/reference/commandline/exec/"/>
          </references>
          <standards>
            <standard ref="5.22" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>If you have auditing enabled, you can use the below command to filter out docker exec
                            commands that used --privileged option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep privileged
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.23" name="Ensure docker exec commands are not used with user option" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use docker exec with --user option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --user option in docker exec executes the command within the container as that user. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions. For example, suppose your container is
                        running as tomcat user (or any other non-root user), it would be possible to run a command
                        through docker exec as root with --user=root option. This could be potentially dangerous.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --user option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: exec" url="https://docs.docker.com/engine/reference/commandline/exec/"/>
          </references>
          <standards>
            <standard ref="5.23" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>If you have auditing enabled as prescribed in Section 1, you can use the below command to
                            filter out docker exec commands that used --user option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.29" name="Ensure Docker's default bridge docker0 is not used" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use Docker's default bridge docker0. Use docker's user-defined networks for container
                        networking.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker connects virtual interfaces created in the bridge mode to a common bridge called docker0.
                        This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there
                        is no filtering applied.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and set up a user-defined network. Run all the containers in the
                        defined network.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You have to manage the user-defined networks.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker arxiv" url="https://arxiv.org/pdf/1501.02967"/>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
            <reference name="Niantec github: narwhal" url="https://github.com/nyantec/narwhal"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.29" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command, and verify that containers are on a user-defined network and not
                            the default docker0 bridge.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network ls --quiet | xargs xargs docker network inspect --format '{{ .Name }}: {{
                            .Options }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.6" name="Ensure HEALTHCHECK instructions have been added to the container image" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Add HEALTHCHECK instruction in your docker container images to perform the health check on
                        running containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. Adding HEALTHCHECK instruction to your
                        container image ensures that the docker engine periodically checks the running container
                        instances against that instruction to ensure that the instances are still working. Based on the
                        reported health status, the docker engine could then exit non-working containers and instantiate
                        new ones.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and rebuild your container image with HEALTHCHECK instruction.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Healthcheck" url="https://docs.docker.com/engine/reference/builder/#healthcheck"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.6" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that the docker image has appropriate HEALTHCHECK
                            instruction set up.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker inspect --format='{{ .Config.Healthcheck }}'
                            &lt;img /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.17" name="Ensure host devices are not directly exposed to containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Host devices can be directly exposed to containers at runtime. Do not directly expose host
                        devices to containers especially for containers that are not trusted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --device option exposes the host devices to the containers and consequently, the containers
                        can directly access such host devices. You would not require the container to run in privileged
                        mode to access and manipulate the host devices. By default, the container will be able to read,
                        write and mknod these devices.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, it is possible for containers to remove block devices from the host. Hence, do not
                        expose host devices to containers directly. If at all you would want to expose the host device
                        to a container, use the sharing permissions appropriately:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;r - read only&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;w - writable&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;m - mknod allowed&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not directly expose the host devices to containers. If at all you need to expose the host
                        devices to containers, use the correct set of permissions: For example, do not start a container
                        as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm
                        --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example, share the host device with correct permissions:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw
                        --device=/dev/temp_sda:/dev/temp_sda:r centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact: &lt;/b&gt;You would not be able to use the host devices directly within the
                        containers.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
          </references>
          <standards>
            <standard ref="5.17" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Devices={{
                            .HostConfig.Devices }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would list out each device with below information:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;CgroupPermissions - For example, rwm&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathInContainer - Device path within the container&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathOnHost - Device path on the host&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;Verify that the host device is required to be accessed from within the container
                            and the permissions required are correctly set. If the above command returns [], then the
                            container does not have access to host devices. This recommendation can be assumed to be
                            compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.4" name="Ensure images are scanned and rebuilt to include security patches" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Images should be scanned 'frequently' for any vulnerabilities. Rebuild the images to include
                        patches and then instantiate new containers from it.

                        Rationale:
                        Vulnerabilities are loopholes/bugs that can be exploited and security patches are updates to
                        resolve these vulnerabilities. We can use image vulnerability scanning tools to find any kind of
                        vulnerabilities within the images and then check for available patches to mitigate these
                        vulnerabilities. Patches update the system to the most recent code base. Being on the current
                        code base is important because that's where vendors focus on fixing problems. Evaluate the
                        security patches before applying and follow the patching best practices.
                        Also, it would be better if, image vulnerability scanning tools could perform binary level
                        analysis or hash based verification instead of just version string matching.

                        Remediation:
                        Follow the below steps to rebuild the images with security patches:

                        Step 1: Pull all the base images (i.e., given your set of Dockerfiles, extract all images
                        declared in FROM instructions, and re-pull them to check for an updated/patched versions). Patch
                        the packages within the images too.

                        docker pull

                        Step 2: Force a rebuild of each image:

                        docker build --no-cache

                        Step 3: Restart all containers with the updated images.
                        You could also use ONBUILD directive in the Dockerfile to trigger particular update instructions
                        for images that you know are used as base images frequently.

                        Impact:
                        None</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: security images scan" url="https://blog.docker.com/2016/05/docker-security-scanning/"/>
            <reference name="Docker docs: Docker images" url="https://docs.docker.com/userguide/dockerimages/"/>
            <reference name="Docker docs: Image scan" url="https://docs.docker.com/docker-cloud/builds/image-scan/"/>
            <reference name="Docker docs: Onbuild" url="https://docs.docker.com/engine/reference/builder/#/onbuild"/>
          </references>
          <standards>
            <standard ref="4.4" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D02 - Patch Management Strategy" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command to find the list of packages installed within the container. Ensure that the
                            security updates for various affected packages are installed.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, you could run image vulnerability scanning tools which can scan all the
                            images in your ecosystem and then apply patches for the detected vulnerabilities based on
                            your patch management procedures.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.13" name="Ensure incoming container traffic is binded to a specific host interface" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, Docker containers can make connections to the outside world, but the outside world
                        cannot connect to containers. Each outgoing connection will appear to originate from one of the
                        host machine's own IP addresses. Only allow container services to be contacted through a
                        specific external interface on the host machine.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you have multiple network interfaces on your host machine, the container can accept
                        connections on the exposed ports on any network interface. This might not be desired and may not
                        be secured. Many times a particular interface is exposed externally and services such as
                        intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those
                        interfaces to screen incoming public traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Hence, you should not accept incoming connections on any interface. You should only allow
                        incoming connections from a particular external interface.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bind the container port to a specific host interface on the desired host port. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --publish 10.2.3.4:49153:80 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the example above, the container port 80 is bound to the host port on 49153 and would accept
                        incoming connection only from 10.2.3.4 external interface. Impact: None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.13" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Review the list and ensure that the exposed container ports are tied to a particular
                            interface and not to the wildcard IP address - 0.0.0.0. For example, if the above command
                            returns as below, then this is non-compliant and the container can accept connections on any
                            host interface on the specified port 49153.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostPort:49153 HostIp:0.0.0.0]]]&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            However, if the exposed port is tied to a particular interface on the host as below, then
                            this recommendation is configured as desired and is compliant.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostIp:10.2.3.4 HostPort:49153]]]
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.3" name="Ensure Linux Kernel Capabilities are restricted within containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, Docker starts containers with a restricted set of Linux Kernel Capabilities. This
                        means that any process may be granted the required capabilities instead of root access. Using
                        Linux Kernel Capabilities, the processes do not have to run as root for almost all the specific
                        areas where root privileges are usually needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker supports the addition and removal of capabilities, allowing the use of a non-default
                        profile. This may make Docker more secure through capability removal, or less secure through the
                        addition of capabilities. It is thus recommended to remove all capabilities except those
                        explicitly required for your container process. For example, capabilities such as below are
                        usually not needed for container process: NET_ADMIN SYS_ADMIN SYS_MODULE&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Execute the below command to add needed capabilities:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example,&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-add={&amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Execute the below command to drop unneeded capabilities:&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop={&amp;quot;SETUID&amp;quot;,&amp;quot;SETGID&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, You may choose to drop all capabilities and add only the needed ones:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop=all --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability
                        2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop=all --cap-add= &amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Based on what Linux Kernel Capabilities were added or dropped, restrictions within the container
                        would apply.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Linux kernel capabilities" url="https://docs.docker.com/engine/security/security/#linux-kernel-capabilities"/>
            <reference name="Docker linux: capabilities" url="https://man7.org/linux/man-pages/man7/capabilities.7.html"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CapAdd={{
                            .HostConfig.CapAdd }} CapDrop={{ .HostConfig.CapDrop }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Verify that the added and dropped Linux Kernel Capabilities are in line with the ones needed
                            for container process for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.10" name="Ensure memory usage for container is limited" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as memory limit, you can control the amount of
                        memory that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, container can use all of the memory on the host. You can use memory limit mechanism
                        to prevent a denial of service arising from one container consuming all of the host's resources
                        such that other containers on the same host cannot perform their intended functions. Having no
                        limit on memory can lead to issues where one container can easily make the whole system unstable
                        and as a result unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container with only as much memory as required. Always run the container using the
                        --memory argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --memory 256m centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;In the above example, the container is started with a memory limit of 256 MB.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Please note that the output of the below command would return values in scientific
                        notation if memory limits are in place.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example, if the memory limit is set to 256 MB for the above container
                        instance, the output of the above command would be 2.68435456e+08 and NOT 256mb. You should
                        convert this value using a scientific calculator or programmatic methods. Impact: If you do not
                        set proper limits, the container process may have to starve.</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run metrics" url="https://docs.docker.com/engine/admin/runmetrics/"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Goldmann blog: run options" url="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.10" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{
                            .HostConfig.Memory }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0, it means the memory limits are not in place. If the above
                            command returns a non-zero value, it means memory limits are in place.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.19" name="Ensure mount propagation mode is not set to shared" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Mount propagation mode allows mounting volumes in shared, slave or private mode on a
                        container. Do not use shared mount propagation mode until needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A shared mount is replicated at all mounts and the changes made at any mount point are
                        propagated to all mounts. Mounting a volume in shared mode does not restrict any other container
                        to mount and make changes to that volume. This might be catastrophic if the mounted volume is
                        sensitive to changes. Do not set mount propagation mode to shared until needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount volumes in shared mode propagation. For example, do not start container as below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --volume=/hostPath:/containerPath:shared&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: volume shared filesystems" url="https://docs.docker.com/engine/reference/run/#volume-shared-filesystems"/>
            <reference name="Docker github: 17034" url="https://github.com/docker/docker/pull/17034"/>
            <reference name="Kernel: shared sub tree" url="https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt"/>
          </references>
          <standards>
            <standard ref="5.19" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Propagation={{range $mnt
                            := .Mounts}} {{json $mnt.Propagation}} {{end}}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the propagation mode for mounted volumes. Propagation mode
                            should not be set to shared unless needed. The above command might throw errors if there are
                            no mounts. In that case, this recommendation is not applicable.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.14" name="Ensure 'on-failure' container restart policy is set to '5'" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using the --restart flag in docker run command you can specify a restart policy for how a
                        container should or should not be restarted on exit. You should choose the on-failure restart
                        policy and limit the restart attempts to 5.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you indefinitely keep trying to start the container, it could possibly lead to a denial of
                        service on the host. It could be an easy way to do a distributed denial of service attack
                        especially if you have many containers on the same host. Additionally, ignoring the exit status
                        of the container and always attempting to restart the container leads to non-investigation of
                        the root cause behind containers getting terminated. If a container gets terminated, you should
                        investigate the reason behind it instead of just attempting to restart it indefinitely. Thus, it
                        is recommended to use on-failure restart policy and limit it to a maximum of 5 restart attempts.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If a container is desired to be restarted on its own, then, for example, you could start the
                        container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --restart=on-failure:5 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container would attempt to restart only 5 times.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: restart policies" url="https://docs.docker.com/engine/reference/commandline/run/#restart-policies-restart"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.14" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: RestartPolicyName={{
                            .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{
                            .HostConfig.RestartPolicy.MaximumRetryCount }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=always, then the system is not
                            configured as desired and hence this recommendation is non-compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=no or just RestartPolicyName=, then
                            the restart policies are not being used and the container would never be restarted on its
                            own. This recommendation is then Not Applicable and can be assumed to be compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=on-failure, then verify that the
                            number of restart attempts is set to 5 or less by looking at MaximumRetryCount.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.902">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.8" name="Ensure only needed ports are open on the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Dockerfile for a container image defines the ports to be opened by default on a container
                        instance. The list of ports may or may not be relevant to the application you are running within
                        the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A container can be run just with the ports defined in the Dockerfile for its image or can be
                        arbitrarily passed run time parameters to open a list of ports. Additionally, over time,
                        Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant
                        to the application you are running within the container. Opening unneeded ports increases the
                        attack surface of the container and the containerized application. As a recommended practice, do
                        not open unneeded ports.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Fix the Dockerfile of the container image to expose only needed ports by your containerized
                        application. You can also completely ignore the list of ports defined in the Dockerfile by NOT
                        using -P (UPPERCASE) or --publish-all flag when starting the container. Use the -p (lowercase)
                        or --publish flag to explicitly define the ports that you need for a particular container
                        instance. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.8" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that the ports mapped are the ones that are really needed for the
                            container.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.28" name="Ensure PIDs cgroup limit is used" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use --pids-limit flag at container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Attackers could launch a fork bomb with a single command inside the container. This fork bomb
                        can crash the entire system and requires a restart of the host to make the system functional
                        again. PIDs cgroup --pids-limit will prevent this kind of attack by restricting the number of
                        forks that can happen inside a container at a given time.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use --pids-limit flag while launching the container with an appropriate value. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run -it --pids-limit 100&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the above example, the number of processes allowed to run at any given time is set to 100.
                        After a limit of 100 concurrently running processes is reached, docker would restrict any new
                        process creations.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Set the PIDs limit value as appropriate. Incorrect values might render the containers unusable.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Docker github: 18697" url="https://github.com/docker/docker/pull/18697"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.28" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that PidsLimit is not set to 0 or -1. A PidsLimit of 0
                            or -1 means that any number of processes can be forked inside the container concurrently.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidsLimit={{
                            .HostConfig.PidsLimit }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.4" name="Ensure privileged containers are not used" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using the --privileged flag gives all Linux Kernel Capabilities to the container thus
                        overwriting the --cap-add and --cap-drop flags. Ensure that it is not used.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --privileged flag gives all capabilities to the container, and it also lifts all the
                        limitations enforced by the device cgroup controller. In other words, the container can then do
                        almost everything the host can do. This flag exists to allow special use-cases, like running
                        Docker within Docker.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not run container with the --privileged flag. For example, do not start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --privileged centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Linux Kernel Capabilities other than defaults would not be available for use within container.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs:Runtime privilege and linux capabilities" url="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Privileged={{
                            .HostConfig.Privileged }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Privileged=false for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.7" name="Ensure privileged ports are not mapped within containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes
                        are not allowed to use them for various security reasons. Docker allows a container port to be
                        mapped to a privileged port.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, if the user does not specifically declare the container port to host port mapping,
                        Docker automatically and correctly maps the container port to one available in 49153-65535 block
                        on the host. But, Docker allows a container port to be mapped to a privileged port on the host
                        if the user explicitly declared it. This is so because containers are executed with
                        NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The
                        privileged ports receive and transmit various sensitive and privileged data. Allowing containers
                        to use them can bring about serious implications.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not map the container ports to privileged host ports when starting a container. Also, ensure
                        that there is no such container to host privileged port mapping declarations in the Dockerfile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.7" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all running containers instances and their port mapping by executing the below
                            command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that container ports are not mapped to host port numbers below
                            1024.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.10" name="Ensure secrets are not stored in Dockerfiles" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not store any secrets in Dockerfiles.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Dockerfiles could be backtracked easily by using native Docker commands such as docker history
                        and various tools and utilities. Also, as a general practice, image publishers provide
                        Dockerfiles to build the credibility for their images. Hence, the secrets within these
                        Dockerfiles could be easily exposed and potentially be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not store any kind of secrets within Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to identify a way to handle secrets for your Docker images.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker 12factor: config" url="https://12factor.net/config"/>
            <reference name="Docker avicoder: dump" url="https://avicoder.me/2016/07/22/Twitter-Vine-Source-code-dump/"/>
            <reference name="Docker github: 13490" url="https://github.com/docker/docker/issues/13490"/>
          </references>
          <standards>
            <standard ref="4.10" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D06 - Protect Secrets" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any secrets:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            secrets as described above.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.2" name="Ensure SELinux security options are set, if applicable" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>SELinux is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Red Hat and Fedora.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default
                        Discretionary Access Control (DAC) model. You can thus add an extra layer of safety by enabling
                        SELinux on your Linux host, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If SELinux is applicable for your Linux OS, use it. You may have to follow the below set of
                        steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Set the SELinux State.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Set the SELinux Policy.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import a SELinux policy template for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start Docker in daemon mode with SELinux enabled. For example, docker daemon
                        --selinux-enabled&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the security options. For example, docker run
                        --interactive --tty --security-opt label=level:TopSecret centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the SELinux policy. If
                        your SELinux policy is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: other kernel security features" url="https://docs.docker.com/engine/security/security/#other-kernel-security-features"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
            <reference name="Docker redhat: seLinux security profile" url="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy"/>
            <reference name="Fedora docs: Linux security" url="https://docs.fedoraproject.org/en-US/Fedora/13/html/Security-Enhanced_Linux/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.2" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.5" name="Ensure sensitive host system directories are not mounted on containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Sensitive host system directories such as below should not be allowed to be mounted as
                        container volumes especially in read-write mode. / /boot /dev /etc /lib /proc /sys /usr&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If sensitive directories are mounted in read-write mode, it would be possible to make changes to
                        files within those sensitive directories. The changes might have negative security implications
                        or unwarranted changes that could put the Docker host in compromised state.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount host sensitive directories on containers especially in read-write mode.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Volumes" url="https://docs.docker.com/engine/tutorials/dockervolumes/"/>
          </references>
          <standards>
            <standard ref="5.5" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above commands would return the list of current mapped directories and whether they are
                            mounted in read-write mode for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.8" name="Ensure setuid and setgid permissions are removed in the images" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Removing setuid and setgid permissions in the images will help prevent privilege escalation
                        attacks in the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        setuid and setgid permissions could be used for elevating privileges. While these permissions
                        are at times legitimately needed, these could potentially be used in privilege escalation
                        attacks. Thus, you should consider dropping these permissions for the packages which do not need
                        them within the images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Allow setuid and setgid permissions only on executables which need them. You could remove these
                        permissions during build time by adding the following command in your Dockerfile, preferably
                        towards the end of the Dockerfile:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        RUN find / -perm +6000 -type f -exec chmod a-s {} \; || true&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Above command breaks all the executables that depend on setuid or setgid permissions including
                        the legitimate ones. Hence, be careful to modify the command to suit your requirements so that
                        it does not drop the permissions of legitimate programs. This requires a careful examination of
                        each executable and fine tuning the permissions.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker container solutions" url="https://info.container-solutions.com/hubfs/Imported_Blog_Media/15_06_15_DockerCheatSheet_A41-1024x724-1.jpg"/>
            <reference name="Docker linux: setgid" url="https://man7.org/linux/man-pages/man2/setgid.2.html"/>
            <reference name="Docker linux: setuid" url="https://man7.org/linux/man-pages/man2/setuid.2.html"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.8" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D04 - Secure Defaults and Hardening" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command on the image to list the executables having setuid and setgid
                            permissions:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker run find / -perm +6000 -type f -exec ls -ld {} \; 2&amp;gt; /dev/null&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Carefully, review the list and ensure that it is legitimate.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.6" name="Ensure SSH is not run within containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>SSH server should not be running within the container. You should SSH into the Docker host,
                        and use nsenter tool to enter a container from a remote host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Running SSH within the container increases the complexity of security management by making it&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Difficult to manage access policies and security compliance for SSH server&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage keys and passwords across various containers&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage security upgrades for SSH server It is possible to have shell
                        access to a container without using SSH.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;Needlessly increasing the complexity of security management should be avoided.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Uninstall SSH server from the container and use nsenteror or any other commands such as docker
                        exec or docker attach to interact with the container instance.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker exec --interactive --tty $INSTANCE_ID sh&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        OR&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker attach $INSTANCE_ID&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: docker sshd" url="https://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.6" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID ps -el&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that there is no process for SSH server.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.25" name="Ensure the container is restricted from acquiring additional privileges" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Restrict the container from acquiring additional privileges via suid or sgid bits.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve.
                        The no_new_priv bit ensures that the process or its children processes do not gain any
                        additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot
                        less dangerous because there is no possibility of subverting privileged binaries.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, you should start your container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --rm -it --security-opt=no-new-privileges ubuntu bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not
                        allowed to the current process.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 20727" url="https://github.com/docker/docker/pull/20727"/>
            <reference name="Docker github: 269" url="https://github.com/projectatomic/atomic-site/issues/269"/>
            <reference name="Docker lwn: 475362" url="https://lwn.net/Articles/475362/"/>
            <reference name="Docker lwn: 475678" url="https://lwn.net/Articles/475678/"/>
            <reference name="Kernel: No new privs" url="https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt"/>
          </references>
          <standards>
            <standard ref="5.25" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers. no-new-privileges should also be one of them.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.12" name="Ensure the container's root filesystem is mounted as read only" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The container's root filesystem should be treated as a 'golden image' by using Docker run's
                        --read-only option. This prevents any writes to the container's root filesystem at container
                        runtime and enforces the principle of immutable infrastructure.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling this option forces containers at runtime to explicitly define their data writing
                        strategy to persist or not persist their data. This also reduces security attack vectors since
                        the container instance's filesystem cannot be tampered with or written to unless it has explicit
                        read-write permissions on its filesystem folder and directories.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be
                        mounted as read only. docker run --read-only Enabling the --read-only option at a container's
                        runtime should be used by administrators to force a container's executable processes to only
                        write container data to explicit storage locations during the container's runtime.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Examples of explicit storage locations during a container's runtime include, but are not limited
                        to:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Use the --tmpfs option to mount a temporary file system for non-persistent data
                        writes. docker run --interactive --tty --read-only --tmpfs &amp;quot;/run&amp;quot; --tmpfs
                        &amp;quot;/tmp&amp;quot; centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Enabling Docker rw mounts at a container's runtime to persist container data directly
                        on the Docker host filesystem. docker run --interactive --tty --read-only -v
                        /opt/app/data:/run/app/data:rw centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Utilizing Docker shared-storage volume plugins for Docker data volume to persist
                        container data. docker volume create -d convoy --opt o=size=20GB my-named-volume docker run
                        --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Transmitting container data outside of the docker during the container's runtime for
                        container data to persist container data. Examples include hosted databases, network file
                        shares, and APIs.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling --read-only at container runtime may break some container OS packages if a data writing
                        strategy is not defined. Define what the container's data should and should not persist at
                        runtime to determine which recommendation procedure to utilize.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Volumes" url="https://docs.docker.com/engine/tutorials/dockervolumes/"/>
            <reference name="Docker docs: mount tmpfs" url="https://docs.docker.com/engine/reference/commandline/run/#mount-tmpfs-tmpfs"/>
            <reference name="Docker docs: run" url="https://docs.docker.com/engine/reference/commandline/run/"/>
          </references>
          <standards>
            <standard ref="5.12" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D09 - Follow Immutable Paradigm" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the following command on the docker host:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: ReadonlyRootfs={{
                            .HostConfig.ReadonlyRootfs }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns true, it means the container's root filesystem is mounted
                            read-only. If the above command returns false, it means the container's root filesystem is
                            writable.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.21" name="Ensure the default seccomp profile is not Disabled" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Seccomp filtering provides a means for a process to specify a filter for incoming system
                        calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls
                        blocking all others. It should not be disabled unless it hinders your container application
                        usage.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A large number of system calls are exposed to every userland process with many of them going
                        unused for the entire lifetime of the process. Most of the applications do not need all the
                        system calls and thus benefit by having a reduced set of available system calls. The reduced set
                        of system calls reduces the total kernel surface exposed to the application and thus improves
                        application security.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, seccomp profiles are enabled. You do not need to do anything unless you want to
                        modify and use the modified seccomp profile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        With Docker 1.10 and greater, the default seccomp profile blocks syscalls, regardless of
                        --cap-add passed to the container. You should create your own custom seccomp profile in such
                        cases. You may also disable the default seccomp profile by passing
                        --security-opt=seccomp:unconfined on docker run.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: Seccomp profiles" url="https://blog.aquasec.com/new-docker-security-features-and-what-they-mean-seccomp-profiles"/>
            <reference name="Docker docs: Seccomp" url="https://docs.docker.com/engine/security/seccomp/"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
            <reference name="Docker github: 22870" url="https://github.com/docker/docker/issues/22870"/>
            <reference name="Docker github: Seccomp" url="https://github.com/docker/docker/blob/master/profiles/seccomp/default.json"/>
            <reference name="Seccomp kernel" url="https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt"/>
          </references>
          <standards>
            <standard ref="5.21" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return or your modified seccomp profile. If it returns
                            [seccomp:unconfined], that means this recommendation is non-compliant and the container is
                            running without any seccomp profiles.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.18" name="Ensure the default ulimit is overwritten at runtime, only if needed" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The default ulimit is set at the Docker daemon level. However, you may override the default
                        ulimit setting, if needed, during container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        ulimit provides control over the resources available to the shell and to processes started by
                        it. Setting system resource limits judiciously saves you from many disasters such as a fork
                        bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and
                        in-turn can make the system unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The default ulimit set at the Docker daemon level should be honored. If the default ulimit
                        settings are not appropriate for a particular container instance, you may override them as an
                        exception. But, do not make this a practice. If most of the container instances are overriding
                        default ulimit settings, consider changing the default ulimit settings to something that is
                        appropriate for your needs.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Only override the default ulimit settings if needed. For example, to override default ulimit
                        settings start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the ulimits are not set properly, the desired resource control might not be achieved and
                        might even make the system unusable.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: set ulimits in container" url="https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container-ulimit"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.18" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ulimits={{
                            .HostConfig.Ulimits }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Ulimits= for each container instance until and unless there
                            is an exception and a need to override the default ulimit settings.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.31" name="Ensure the Docker socket is not mounted inside any containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The docker socket docker.sock should not be mounted inside a container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the docker socket is mounted inside a container it would allow processes running within the
                        container to execute docker commands which effectively allows for full control of the host.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;/b&gt;Ensure that no containers mount docker.sock as a volume.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker forums: docker in docker vs mounting var run docker sock" url="https://forums.docker.com/t/docker-in-docker-vs-mounting-var-run-docker-sock/9450/2"/>
            <reference name="Docker github: 21109" url="https://github.com/docker/docker/issues/21109"/>
            <reference name="Docker raesene github" url="https://raesene.github.io/blog/2016/03/06/The-Dangers-Of-Docker.sock/"/>
          </references>
          <standards>
            <standard ref="5.31" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' |
                            grep docker.sock&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return any instances where docker.sock had been mapped to a
                            container as a volume.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.16" name="Ensure the host's IPC namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores
                        and message queues. IPC namespace on the host thus should not be shared with the containers and
                        should remain isolated.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        IPC namespace provides separation of IPC between the host and containers. If the host's IPC
                        namespace is shared with the container, it would basically allow processes within the container
                        to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between
                        the host and the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually manipulate the host IPC. This can be
                        catastrophic. Hence, do not share the host's IPC namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;Do not start a container with --ipc=host argument. For example, do not start a
                        container as below:
                        &lt;div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; Shared memory segments are used to accelerate inter-process
                        communication. It is commonly used by high-performance applications. If such applications are
                        containerized into multiple containers, you might need to share the IPC namespace of the
                        containers to achieve high performance. In such cases, you should still be sharing container
                        specific IPC namespaces only and not the host IPC namespace. You may share the container's IPC
                        namespace with another container as below: For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: ipc settings" url="https://docs.docker.com/engine/reference/run/#ipc-settings-ipc"/>
            <reference name="Linux: namespaces" url="https://man7.org/linux/man-pages/man7/namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.16" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: IpcMode={{
                            .HostConfig.IpcMode }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host IPC namespace is shared with the
                            container.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns nothing, then the host's IPC namespace is not shared. This
                            recommendation is then compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.9" name="Ensure the host's network namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The networking mode on a container when set to --net=host, skips placing the container inside
                        a separate network stack. In essence, this choice tells Docker to not containerize the
                        container's networking. This would network-wise mean that the container lives &amp;quot;outside&amp;quot;
                        in the main Docker host and has full access to its network interfaces.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is potentially dangerous. It allows the container process to open low-numbered ports like
                        any other root process. It also allows the container to access network services like D-bus on
                        the Docker host. Thus, a container process can potentially do unexpected things such as shutting
                        down the Docker host. You should not use this option.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not pass --net=host option when starting the container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Network settings" url="https://docs.docker.com/engine/reference/run/#network-settings"/>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.9" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: NetworkMode={{
                            .HostConfig.NetworkMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns NetworkMode=host, it means that --net=host option was passed
                            when the container was started. This would be non-compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.15" name="Ensure the host's process namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Process ID (PID) namespaces isolate the process ID number space, meaning that processes in
                        different PID namespaces can have the same PID. This is process level isolation between
                        containers and the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        PID namespace provides separation of processes. The PID Namespace removes the view of the system
                        processes, and allows process ids to be reused including PID 1. If the host's PID namespace is
                        shared with the container, it would basically allow processes within the container to see all of
                        the processes on the host system. This breaks the benefit of process level isolation between the
                        host and the containers.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually know all the processes running on the host
                        system and can even kill the host system processes from within the container. This can be
                        catastrophic. Hence, do not share the host's process namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not start a container with --pid=host argument. For example, do not start a container as
                        below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --pid=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Container processes cannot see the processes on the host system. In certain cases, you want your
                        container to share the host's process namespace. For example, you could build a container with
                        debugging tools like strace or gdb, but want to use these tools when debugging processes within
                        the container. If this is desired, then share only one (or needed) host process by using the -p
                        switch. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --pid=host rhel7 strace -p 1234
                        &lt;/div&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: pid settings" url="https://docs.docker.com/engine/reference/run/#pid-settings-pid"/>
            <reference name="Linux: pid namespaces" url="https://man7.org/linux/man-pages/man7/pid_namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.15" supportedStandardRef="Level 1 - Docker"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidMode={{
                            .HostConfig.PidMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host PID namespace is shared with the
                            container, if not, this recommendation is compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.30" name="Ensure the host's user namespaces is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not share the host's user namespaces with the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        User namespaces ensure that a root process inside the container will be mapped to a non-root
                        process outside the container. Sharing the user namespaces of the host with the container thus
                        does not isolate users on the host with users on the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not share user namespaces between host and containers. For example, do not run a container as
                        below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --rm -it --userns=host ubuntu bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker - linux foundation: Namespaces" url="https://events.static.linuxfound.org/sites/events/files/slides/User%20Namespaces%20-%20ContainerCon%202015%20-%2016-9-final_0.pdf"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Docker docs: userns remap" url="https://docs.docker.com/engine/security/userns-remap/"/>
            <reference name="Docker github: 12648" url="https://github.com/docker/docker/pull/12648"/>
          </references>
          <standards>
            <standard ref="5.30" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that it does not return any value for UsernsMode. If it
                            returns a value of host, it means the host user namespace is shared with the containers.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UsernsMode={{
                            .HostConfig.UsernsMode }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.907">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.20" name="Ensure the host's UTS namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain
                        name. It is used for setting the hostname and the domain that is visible to running processes in
                        that namespace. Processes running within containers do not typically require to know hostname
                        and domain name. Hence, the namespace should not be shared with the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Sharing the UTS namespace with the host provides full permission to the container to change the
                        hostname of the host. This is insecure and should not be allowed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Do not start a container with --uts=host argument. For example, do not start a container as
                        below: docker run --rm --interactive --tty --uts=host rhel7.2&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: uts settings" url="https://docs.docker.com/engine/reference/run/#uts-settings-uts"/>
            <reference name="Linux: namespaces" url="https://man7.org/linux/man-pages/man7/namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.20" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UTSMode={{
                            .HostConfig.UTSMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host UTS namespace is shared with the
                            container and this recommendation is non-compliant. If the above command returns nothing,
                            then the host's UTS namespace is not shared. This recommendation is then compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.3" name="Ensure unnecessary packages are not installed in the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Containers tend to be minimal and slimmed down versions of the Operating System. Do not
                        install anything that does not justify the purpose of the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bloated containers with unnecessary software could possibly increase the attack surface of the
                        container. This also voids the concept of minimal and slimmed down versions of container images.
                        Hence, do not install anything else apart from what is truly needed for the purpose of the
                        container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At the outset, do not install anything on the container that does not justify the purpose. If
                        the image had some packages that your container does not use, uninstall them. Consider using a
                        minimal base image rather than the standard Redhat/Centos/Debian images if you can. Some of the
                        options include BusyBox and Alpine. Not only does this trim your image size from &amp;gt;150Mb
                        to ~20 Mb, there are also fewer tools and paths to escalate privileges. You can even remove the
                        package installer as a final hardening measure for leaf/production containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Docker images" url="https://docs.docker.com/userguide/dockerimages/"/>
            <reference name="Docker github: busybox" url="https://github.com/progrium/busybox"/>
            <reference name="Docker linux: slimming down" url="https://livewyer.io/blog/2015/02/24/slimming-down-your-docker-containers-alpine-linux/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.3" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D04 - Secure Defaults and Hardening" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command will list the packages installed on the container. Review the list and
                            ensure that it is legitimate.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.7" name="Ensure update instructions are not used alone in the Dockerfile" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use update instructions such as apt-get update alone or in a single line in the
                        Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Adding the update instructions in a single line on the Dockerfile will cache the update layer.
                        Thus, when you build any image later using the same instruction, previously cached update layer
                        will be used. This could potentially deny any fresh updates to go in the later builds.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use update instructions along with install instructions (or any other) and version pinning for
                        packages while installing them. This would bust the cache and force extraction of the required
                        versions.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternatively, you could use --no-cache flag during docker build process to avoid using cached
                        layers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Best practices" url="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run"/>
            <reference name="Docker github: 3313" url="https://github.com/docker/docker/issues/3313"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.7" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D02 - Patch Management Strategy" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any update instructions being in a single line:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            update instructions as described above.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.11" name="Ensure verified packages only are Installed" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Verify authenticity of the packages before installing them in the image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Verifying authenticity of the packages is essential for building a secure container image.
                        Tampered packages could potentially be malicious or have some known vulnerabilities that could
                        be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use GPG keys for downloading and verifying packages or any other secure package distribution
                        mechanism of your choice.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: Dockerfile" url="https://github.com/docker-library/httpd/blob/12bf8c8883340c98b3988a7bade8ef2d0d6dcf8a/2.4/Dockerfile"/>
            <reference name="Docker github: Dockerfile alpine" url="https://github.com/docker-library/php/blob/d8a4ccf4d620ec866d5b42335b699742df08c5f0/7.0/alpine/Dockerfile"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
            <reference name="Docker redhat: team key" url="https://access.redhat.com/security/team/key"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.11" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for how the authenticity of the packages is determined. This could be via the use of GPG
                            keys or other secure package distribution mechanisms:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that the authenticity
                            of the packages is checked.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION AND AUTHORIZATION" name="Authentication and Authorization" desc="" library="Docker CIS">
          <threats>
            <threat ref="CAPEC-122-DOCKER-CONTAINER-RUNTIME" name="Attackers gain access without the necessary privileged to the docker container runtime" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.25" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.31" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.17" mitigation="8"/>
                    <countermeasure ref="D5.19" mitigation="8"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.25" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.31" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.12" mitigation="9"/>
                <countermeasure ref="D5.17" mitigation="8"/>
                <countermeasure ref="D5.19" mitigation="8"/>
                <countermeasure ref="D5.21" mitigation="9"/>
                <countermeasure ref="D5.22" mitigation="9"/>
                <countermeasure ref="D5.23" mitigation="8"/>
                <countermeasure ref="D5.24" mitigation="8"/>
                <countermeasure ref="D5.25" mitigation="8"/>
                <countermeasure ref="D5.3" mitigation="8"/>
                <countermeasure ref="D5.31" mitigation="8"/>
                <countermeasure ref="D5.4" mitigation="9"/>
                <countermeasure ref="D5.5" mitigation="8"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122-DOCKER-IMAGES-BUILD-FILES" name="Attackers gain access without the necessary privileged to the docker images and build files" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.1" mitigation="50"/>
                <countermeasure ref="D4.8" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Docker CIS">
          <threats>
            <threat ref="CAPEC-125-CONTAINER-RUNTIME" name="Attackers consume the resources of the Container Runtime by rapidly engaging to do the target inaccessible or to break the target" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary consumes the resources of a target by rapidly engaging in a large number
                                of interactions with the target. This type of attack generally exposes a weakness in
                                rate limiting or flow. When successful this attack prevents legitimate users from
                                accessing the service and can cause the target to crash. This attack differs from
                                resource depletion through leaks or allocations in that the latter attacks do not rely
                                on the volume of requests made to the target but instead focus on manipulation of the
                                target's operations. The key factor in a flooding attack is the number of requests the
                                adversary can make in a given period of time. The greater this number, the more likely
                                an attack is to succeed against a given target.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-400">
                  <countermeasures>
                    <countermeasure ref="D5.10" mitigation="20"/>
                    <countermeasure ref="D5.11" mitigation="20"/>
                    <countermeasure ref="D5.14" mitigation="20"/>
                    <countermeasure ref="D5.18" mitigation="20"/>
                    <countermeasure ref="D5.28" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.10" mitigation="20"/>
                <countermeasure ref="D5.11" mitigation="20"/>
                <countermeasure ref="D5.14" mitigation="20"/>
                <countermeasure ref="D5.18" mitigation="20"/>
                <countermeasure ref="D5.28" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-CONTAINER-RUNTIME" name="Attackers gain access to the docker container by using sensitive data which was found embedded within it" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials which can be used as an intermediate step in a larger
                                attack.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="D5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-IMAGES-BUILD-FILE" name="Attackers gain access to the docker images and build files by using sensitive data which was found embedded within it" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="D4.10" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.10" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A6:2017-DOCKER-CONTAINER-RUNTIME" name="Exploitation of Security Misconfiguration of the Docker container runtime" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="D5.1" mitigation="5"/>
                    <countermeasure ref="D5.10" mitigation="5"/>
                    <countermeasure ref="D5.11" mitigation="5"/>
                    <countermeasure ref="D5.13" mitigation="5"/>
                    <countermeasure ref="D5.14" mitigation="5"/>
                    <countermeasure ref="D5.18" mitigation="5"/>
                    <countermeasure ref="D5.2" mitigation="5"/>
                    <countermeasure ref="D5.26" mitigation="5"/>
                    <countermeasure ref="D5.28" mitigation="5"/>
                    <countermeasure ref="D5.29" mitigation="5"/>
                    <countermeasure ref="D5.6" mitigation="5"/>
                    <countermeasure ref="D5.7" mitigation="5"/>
                    <countermeasure ref="D5.8" mitigation="5"/>
                    <countermeasure ref="D5.9" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-485">
                  <countermeasures>
                    <countermeasure ref="D5.15" mitigation="5"/>
                    <countermeasure ref="D5.16" mitigation="5"/>
                    <countermeasure ref="D5.20" mitigation="5"/>
                    <countermeasure ref="D5.30" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-SERVER">
                  <countermeasures>
                    <countermeasure ref="D5.27" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.1" mitigation="5"/>
                <countermeasure ref="D5.10" mitigation="5"/>
                <countermeasure ref="D5.11" mitigation="5"/>
                <countermeasure ref="D5.13" mitigation="5"/>
                <countermeasure ref="D5.14" mitigation="5"/>
                <countermeasure ref="D5.15" mitigation="5"/>
                <countermeasure ref="D5.16" mitigation="5"/>
                <countermeasure ref="D5.18" mitigation="5"/>
                <countermeasure ref="D5.2" mitigation="5"/>
                <countermeasure ref="D5.20" mitigation="5"/>
                <countermeasure ref="D5.26" mitigation="5"/>
                <countermeasure ref="D5.27" mitigation="10"/>
                <countermeasure ref="D5.28" mitigation="5"/>
                <countermeasure ref="D5.29" mitigation="5"/>
                <countermeasure ref="D5.30" mitigation="5"/>
                <countermeasure ref="D5.6" mitigation="5"/>
                <countermeasure ref="D5.7" mitigation="5"/>
                <countermeasure ref="D5.8" mitigation="5"/>
                <countermeasure ref="D5.9" mitigation="5"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A6:2017-DOCKER-IMAGES-BUILD-FILES" name="Exploitation of Security Misconfiguration of the Docker images and build files security" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="D4.11" mitigation="12"/>
                    <countermeasure ref="D4.3" mitigation="13"/>
                    <countermeasure ref="D4.5" mitigation="13"/>
                    <countermeasure ref="D4.6" mitigation="13"/>
                    <countermeasure ref="D4.7" mitigation="12"/>
                    <countermeasure ref="D4.8" mitigation="13"/>
                    <countermeasure ref="D4.9" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-SERVER">
                  <countermeasures>
                    <countermeasure ref="D4.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.11" mitigation="12"/>
                <countermeasure ref="D4.3" mitigation="13"/>
                <countermeasure ref="D4.4" mitigation="12"/>
                <countermeasure ref="D4.5" mitigation="13"/>
                <countermeasure ref="D4.6" mitigation="13"/>
                <countermeasure ref="D4.7" mitigation="12"/>
                <countermeasure ref="D4.8" mitigation="13"/>
                <countermeasure ref="D4.9" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Docker CIS">
          <threats>
            <threat ref="DOCKER-WIDE-ATTACK-SURFACE-CONTAINER" name="Attackers gain access to the Docker container by exploiting the vulnerabilities of the network" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="D5.13" mitigation="20"/>
                    <countermeasure ref="D5.29" mitigation="20"/>
                    <countermeasure ref="D5.7" mitigation="20"/>
                    <countermeasure ref="D5.8" mitigation="20"/>
                    <countermeasure ref="D5.9" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.13" mitigation="20"/>
                <countermeasure ref="D5.29" mitigation="20"/>
                <countermeasure ref="D5.7" mitigation="20"/>
                <countermeasure ref="D5.8" mitigation="20"/>
                <countermeasure ref="D5.9" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-157-IMAGES-BUILD-FILES" name="Attackers get sensitive data from docker images and build files through sniffing the transmisions between components" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker monitors information transmitted between logical or physical nodes of a
                                network. The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic. The attacker might precipitate or
                                indirectly influence the content of the observed transaction, but the attacker is never
                                the intended recipient of the information. Any transmission medium can theoretically be
                                sniffed if the attacker can listen to the contents between the sender and recipient.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="D4.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-94-IMAGES-BUILD-FILES" name="Attackers steal sensitive data from the docker images and build files by listening the communication between components" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="D4.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="bb686e38-3553-490d-919b-9ffc17b26a1b" diagramComponentId="2bd3f354-5e33-479f-a11f-1157263fa7fc" ref="18504e91-5988-47b1-8f1d-b4259b113242" name="Nginx" desc="" library="Docker CIS" parentComponentRef="3b611e07-0f0f-4404-95a9-aba716523820" componentDefinitionRef="docker-container">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.929">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100" issueId="" issueLink="">
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The application does not sufficiently encapsulate critical data or functionality.
                        &lt;/div&gt;
                        &lt;p&gt;Encapsulation is about drawing strong boundaries. In a web browser, this might mean
                        ensuring that your mobile code cannot be abused by other mobile code. On the server, it might
                        mean differentiating between validated data and unvalidated data, between one user's data and
                        another's, or between data that users are allowed to see and data that they are not.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify boundaries on the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Make sure that the application adequately enforces access control across those
                            boundaries. &amp;nbsp;For example, does it require some form of authentication at the
                            boundary? &amp;nbsp;Or does it prevent access across the boundary entirely?&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.928">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-400" name="Uncontrolled Resource Consumption ('Resource Exhaustion')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.928">
              <output/>
            </source>
            <references>
              <reference name="CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')" url="https://cwe.mitre.org/data/definitions/400.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.420">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="D5.1" name="Ensure AppArmor Profile is Enabled" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AppArmor is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Debian and Ubuntu. Rationale: AppArmor
                        protects the Linux OS and applications from various threats by enforcing security policy which
                        is also known as AppArmor profile. You can create your own AppArmor profile for containers or
                        use the Docker's default AppArmor profile. This would enforce security policies on the
                        containers as defined in the profile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If AppArmor is applicable for your Linux OS, use it. You may have to follow below set of steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Verify if AppArmor is installed. If not, install it.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import an AppArmor profile for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Put this profile in enforcing mode.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the customized AppArmor profile. For example,&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --security-opt=&amp;quot;apparmor:PROFILENAME&amp;quot; centos
                        /bin/bash
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Alternatively, you can keep the docker's default apparmor profile.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the AppArmor profile. If
                        your AppArmor profile is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Apparmor" url="https://docs.docker.com/engine/security/apparmor/"/>
            <reference name="Docker docs: other kernel security features" url="https://docs.docker.com/engine/security/security/#other-kernel-security-features"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: AppArmorProfile={{
                            .AppArmorProfile }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return a valid AppArmor Profile for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.770">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.1" name="Ensure a user for the container has been created" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create a non-root user for the container in the Dockerfile for the container image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is a good practice to run the container as a non-root user, if possible. Though user
                        namespace mapping is now available, if a user is already defined in the container image, the
                        container is run as that user by default and specific user namespace remapping is not required.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that the Dockerfile for the container image contains the below instruction: USER Where
                        username or ID refers to the user that could be found in the container base image. If there is
                        no specific user created in the container base image, then add a useradd command to add the
                        specific user before USER instruction. For example, add the below lines in the Dockerfile to
                        create a user in the container:
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        RUN useradd -d /home/username -m -s /bin/bash username USER username&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        Note: If there are users in the image that the containers do not need, consider deleting them.
                        After deleting those users, commit the image and then generate new instances of containers for
                        use.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 2918" url="https://github.com/docker/docker/issues/2918"/>
            <reference name="Docker github: 4572" url="https://github.com/docker/docker/pull/4572"/>
            <reference name="Docker github: 7906" url="https://github.com/docker/docker/issues/7906"/>
          </references>
          <standards>
            <standard ref="4.1" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: User={{ .Config.User }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return container username or user ID. If it is blank it means, the
                            container is running as root.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.24" name="Ensure cgroup usage is confirmed" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>It is possible to attach to a particular cgroup on container run. Confirming cgroup usage
                        would ensure that containers are running under defined cgroups.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        System administrators typically define cgroups under which containers are supposed to run. Even
                        if cgroups are not explicitly defined by the system administrators, containers run under docker
                        cgroup by default. At run-time, it is possible to attach to a different cgroup other than the
                        one that was expected to be used. This usage should be monitored and confirmed. By attaching to
                        a different cgroup than the one that is expected, excess permissions and resources might be
                        granted to the container and thus, can prove to be unsafe.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --cgroup-parent option in docker run command unless needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: custom cgroups" url="https://docs.docker.com/engine/reference/run/#specify-custom-cgroups"/>
            <reference name="Docker redhat: resource management" url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch01.html"/>
          </references>
          <standards>
            <standard ref="5.24" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CgroupParent={{
                            .HostConfig.CgroupParent }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the cgroup under which the containers are running. If it is
                            blank, it means containers are running under default docker cgroup. In that case, this
                            recommendation is compliant. If the containers are found to be running under cgroup other
                            than the one that was expected, this recommendation is non-compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.26" name="Ensure container health is checked at runtime" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd
                        parameter at container runtime for checking container health.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. If the container image you are using does
                        not have a predefined HEALTHCHECK instruction, use the --health-cmd parameter to check container
                        health at runtime. Based on the reported health status, you could take necessary actions.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container using --health-cmd and the other parameters. For example, docker run -d
                        --health-cmd='stat /etc/passwd || exit 1' nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run healthcheck" url="https://docs.docker.com/engine/reference/run/#healthcheck"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.26" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that all the containers are reporting health status:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Health={{ .State.Health.Status
                            }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.5" name="Ensure Content trust for Docker is Enabled" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Content trust is disabled by default. You should enable it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content trust provides the ability to use digital signatures for data sent to and received from
                        remote Docker registries. These signatures allow client-side verification of the integrity and
                        publisher of specific image tags. This ensures provenance of container images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To enable content trust in a bash shell, enter the following command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        export DOCKER_CONTENT_TRUST=1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, set this environment variable in your profile file so that content trust in
                        enabled on every login.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures
                        while working with images - build, create, pull, push and run. You can use the
                        --disable-content-trust flag to run individual operations on tagged images without content trust
                        on an as-needed basis but that defeats the purpose of enabling content trust and hence, should
                        be avoided wherever possible.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Content trust is currently only available for users of the public Docker Hub. It is
                        currently not available for the Docker Trusted Registry or for private registries.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Content trust" url="https://docs.docker.com/engine/security/trust/content_trust/"/>
            <reference name="Docker docs: Environment variables" url="https://docs.docker.com/engine/reference/commandline/cli/#environment-variables"/>
            <reference name="Docker docs: Notary" url="https://docs.docker.com/engine/reference/commandline/cli/#notary"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            echo $DOCKER_CONTENT_TRUST&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should return 1.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.9" name="Ensure COPY is used instead of ADD in Dockerfile" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use COPY instruction instead of ADD instruction in the Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        COPY instruction just copies the files from the local host machine to the container file system.
                        ADD instruction potentially could retrieve files from remote URLs and perform operations such as
                        unpacking. Thus, ADD instruction introduces risks such as adding malicious files from URLs
                        without scanning and unpacking procedures for vulnerabilities.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use COPY instructions in Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to take care of the functionalities provided by ADD instructions such as fetching
                        files from remote URLs.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: add or copy" url="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;Run the below command for each image in the list above and look
                            for any ADD instructions:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            docker history
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no ADD
                            instructions.
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.11" name="Ensure CPU priority is set appropriately on the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as CPU shares, you can control the host CPU
                        resources that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, CPU time is divided between containers equally. If it is desired, to control the CPU
                        time amongst the container instances, you can use the CPU sharing feature. CPU sharing allows
                        prioritization of one container over the other and forbids the lower priority container claiming
                        CPU resources more often. This ensures that the high priority containers are served better.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Manage the CPU shares between your containers. To do so, start the container using the
                        --cpu-shares argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cpu-shares 512 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In the above example, the container is started with CPU shares of 50% of what the other
                        containers use. So, if the other container has CPU shares of 80%, this container will have CPU
                        shares of 40%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Every new container will have 1024 shares of CPU by default. However, this value is shown
                        as 0 if you run the command mentioned in the audit section. Alternatively,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Check your container instance ID using docker ps.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Now, inside the above directory (in step 1), you would have a directory named
                        docker-.scope. For example,
                        docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this
                        directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You will find a file named cpu.shares. Execute cat cpu.shares.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;This will always give you the CPU share value based on the system. So, even if there
                        is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this
                        file will have a value of 1024. If we set one container's CPU shares to 512
                        it will receive half
                        of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to
                        derive the number that you should set for respective CPU shares. For example, use 512 if you
                        want to set 50% and 256 if you want to set 25%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you do not set proper CPU shares, the container process may have to starve if the resources
                        on the host are not available. If the CPU resources on the host are free, CPU shares do not
                        place any restrictions on the CPU that the container may use.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run metrics" url="https://docs.docker.com/engine/admin/runmetrics/"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Goldmann blog: run options" url="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.11" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CpuShares={{
                            .HostConfig.CpuShares }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0 or 1024, it means the CPU shares are not in place. If the
                            above command returns a non-zero value other than 1024, it means CPU shares are in place.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.770">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.27" name="Ensure docker commands always get the latest version of the image" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Always ensure that you are using the latest version of the image within your repository and
                        not the cached older versions.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Multiple docker commands such as docker pull, docker run, etc. are known to have an issue that
                        by default, they extract the local copy of the image, if present, even though there is an
                        updated version of the image with the &amp;quot;same tag&amp;quot; in the upstream repository.
                        This could lead to using older and vulnerable images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use proper version pinning mechanisms (the latest tag which is assigned by default is still
                        vulnerable to caching attacks) to avoid extracting the cached older versions. Version pinning
                        mechanisms should be used for base images, packages, and entire images too. You can customize
                        version pinning rules as per your requirements.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 16609" url="https://github.com/docker/docker/pull/16609"/>
          </references>
          <standards>
            <standard ref="5.27" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D08 - Container Image Integrity and Origin" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Open your image repository and list the image version history
                            for the image you are inspecting.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Observe the status when the docker pull command is triggered. If
                            the status is shown as Image is up to date, it means that you are getting the cached version
                            of the image.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 3:&lt;/b&gt; Match the version of the image you are running with the latest
                            version reported in your repository which tells if you are running the cached version or the
                            latest copy.
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.22" name="Ensure docker exec commands are not used with privileged option" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use docker exec with --privileged option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --privileged option in docker exec gives extended Linux capabilities to the command. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --privileged option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None. If you need enhanced capabilities within the container, then run the container with the
                        required capabilities.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: exec" url="https://docs.docker.com/engine/reference/commandline/exec/"/>
          </references>
          <standards>
            <standard ref="5.22" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>If you have auditing enabled, you can use the below command to filter out docker exec
                            commands that used --privileged option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep privileged
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.23" name="Ensure docker exec commands are not used with user option" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use docker exec with --user option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --user option in docker exec executes the command within the container as that user. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions. For example, suppose your container is
                        running as tomcat user (or any other non-root user), it would be possible to run a command
                        through docker exec as root with --user=root option. This could be potentially dangerous.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --user option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: exec" url="https://docs.docker.com/engine/reference/commandline/exec/"/>
          </references>
          <standards>
            <standard ref="5.23" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>If you have auditing enabled as prescribed in Section 1, you can use the below command to
                            filter out docker exec commands that used --user option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.29" name="Ensure Docker's default bridge docker0 is not used" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use Docker's default bridge docker0. Use docker's user-defined networks for container
                        networking.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker connects virtual interfaces created in the bridge mode to a common bridge called docker0.
                        This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there
                        is no filtering applied.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and set up a user-defined network. Run all the containers in the
                        defined network.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You have to manage the user-defined networks.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker arxiv" url="https://arxiv.org/pdf/1501.02967"/>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
            <reference name="Niantec github: narwhal" url="https://github.com/nyantec/narwhal"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.29" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command, and verify that containers are on a user-defined network and not
                            the default docker0 bridge.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network ls --quiet | xargs xargs docker network inspect --format '{{ .Name }}: {{
                            .Options }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.770">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.6" name="Ensure HEALTHCHECK instructions have been added to the container image" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Add HEALTHCHECK instruction in your docker container images to perform the health check on
                        running containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. Adding HEALTHCHECK instruction to your
                        container image ensures that the docker engine periodically checks the running container
                        instances against that instruction to ensure that the instances are still working. Based on the
                        reported health status, the docker engine could then exit non-working containers and instantiate
                        new ones.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and rebuild your container image with HEALTHCHECK instruction.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Healthcheck" url="https://docs.docker.com/engine/reference/builder/#healthcheck"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.6" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that the docker image has appropriate HEALTHCHECK
                            instruction set up.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker inspect --format='{{ .Config.Healthcheck }}'
                            &lt;img /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.17" name="Ensure host devices are not directly exposed to containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Host devices can be directly exposed to containers at runtime. Do not directly expose host
                        devices to containers especially for containers that are not trusted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --device option exposes the host devices to the containers and consequently, the containers
                        can directly access such host devices. You would not require the container to run in privileged
                        mode to access and manipulate the host devices. By default, the container will be able to read,
                        write and mknod these devices.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, it is possible for containers to remove block devices from the host. Hence, do not
                        expose host devices to containers directly. If at all you would want to expose the host device
                        to a container, use the sharing permissions appropriately:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;r - read only&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;w - writable&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;m - mknod allowed&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not directly expose the host devices to containers. If at all you need to expose the host
                        devices to containers, use the correct set of permissions: For example, do not start a container
                        as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm
                        --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example, share the host device with correct permissions:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw
                        --device=/dev/temp_sda:/dev/temp_sda:r centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact: &lt;/b&gt;You would not be able to use the host devices directly within the
                        containers.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
          </references>
          <standards>
            <standard ref="5.17" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Devices={{
                            .HostConfig.Devices }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would list out each device with below information:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;CgroupPermissions - For example, rwm&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathInContainer - Device path within the container&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathOnHost - Device path on the host&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;Verify that the host device is required to be accessed from within the container
                            and the permissions required are correctly set. If the above command returns [], then the
                            container does not have access to host devices. This recommendation can be assumed to be
                            compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.4" name="Ensure images are scanned and rebuilt to include security patches" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Images should be scanned 'frequently' for any vulnerabilities. Rebuild the images to include
                        patches and then instantiate new containers from it.

                        Rationale:
                        Vulnerabilities are loopholes/bugs that can be exploited and security patches are updates to
                        resolve these vulnerabilities. We can use image vulnerability scanning tools to find any kind of
                        vulnerabilities within the images and then check for available patches to mitigate these
                        vulnerabilities. Patches update the system to the most recent code base. Being on the current
                        code base is important because that's where vendors focus on fixing problems. Evaluate the
                        security patches before applying and follow the patching best practices.
                        Also, it would be better if, image vulnerability scanning tools could perform binary level
                        analysis or hash based verification instead of just version string matching.

                        Remediation:
                        Follow the below steps to rebuild the images with security patches:

                        Step 1: Pull all the base images (i.e., given your set of Dockerfiles, extract all images
                        declared in FROM instructions, and re-pull them to check for an updated/patched versions). Patch
                        the packages within the images too.

                        docker pull

                        Step 2: Force a rebuild of each image:

                        docker build --no-cache

                        Step 3: Restart all containers with the updated images.
                        You could also use ONBUILD directive in the Dockerfile to trigger particular update instructions
                        for images that you know are used as base images frequently.

                        Impact:
                        None</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: security images scan" url="https://blog.docker.com/2016/05/docker-security-scanning/"/>
            <reference name="Docker docs: Docker images" url="https://docs.docker.com/userguide/dockerimages/"/>
            <reference name="Docker docs: Image scan" url="https://docs.docker.com/docker-cloud/builds/image-scan/"/>
            <reference name="Docker docs: Onbuild" url="https://docs.docker.com/engine/reference/builder/#/onbuild"/>
          </references>
          <standards>
            <standard ref="4.4" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D02 - Patch Management Strategy" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command to find the list of packages installed within the container. Ensure that the
                            security updates for various affected packages are installed.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, you could run image vulnerability scanning tools which can scan all the
                            images in your ecosystem and then apply patches for the detected vulnerabilities based on
                            your patch management procedures.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.13" name="Ensure incoming container traffic is binded to a specific host interface" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, Docker containers can make connections to the outside world, but the outside world
                        cannot connect to containers. Each outgoing connection will appear to originate from one of the
                        host machine's own IP addresses. Only allow container services to be contacted through a
                        specific external interface on the host machine.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you have multiple network interfaces on your host machine, the container can accept
                        connections on the exposed ports on any network interface. This might not be desired and may not
                        be secured. Many times a particular interface is exposed externally and services such as
                        intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those
                        interfaces to screen incoming public traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Hence, you should not accept incoming connections on any interface. You should only allow
                        incoming connections from a particular external interface.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bind the container port to a specific host interface on the desired host port. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --publish 10.2.3.4:49153:80 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the example above, the container port 80 is bound to the host port on 49153 and would accept
                        incoming connection only from 10.2.3.4 external interface. Impact: None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.13" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Review the list and ensure that the exposed container ports are tied to a particular
                            interface and not to the wildcard IP address - 0.0.0.0. For example, if the above command
                            returns as below, then this is non-compliant and the container can accept connections on any
                            host interface on the specified port 49153.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostPort:49153 HostIp:0.0.0.0]]]&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            However, if the exposed port is tied to a particular interface on the host as below, then
                            this recommendation is configured as desired and is compliant.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostIp:10.2.3.4 HostPort:49153]]]
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.3" name="Ensure Linux Kernel Capabilities are restricted within containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, Docker starts containers with a restricted set of Linux Kernel Capabilities. This
                        means that any process may be granted the required capabilities instead of root access. Using
                        Linux Kernel Capabilities, the processes do not have to run as root for almost all the specific
                        areas where root privileges are usually needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker supports the addition and removal of capabilities, allowing the use of a non-default
                        profile. This may make Docker more secure through capability removal, or less secure through the
                        addition of capabilities. It is thus recommended to remove all capabilities except those
                        explicitly required for your container process. For example, capabilities such as below are
                        usually not needed for container process: NET_ADMIN SYS_ADMIN SYS_MODULE&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Execute the below command to add needed capabilities:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example,&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-add={&amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Execute the below command to drop unneeded capabilities:&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop={&amp;quot;SETUID&amp;quot;,&amp;quot;SETGID&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, You may choose to drop all capabilities and add only the needed ones:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop=all --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability
                        2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop=all --cap-add= &amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Based on what Linux Kernel Capabilities were added or dropped, restrictions within the container
                        would apply.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Linux kernel capabilities" url="https://docs.docker.com/engine/security/security/#linux-kernel-capabilities"/>
            <reference name="Docker linux: capabilities" url="https://man7.org/linux/man-pages/man7/capabilities.7.html"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CapAdd={{
                            .HostConfig.CapAdd }} CapDrop={{ .HostConfig.CapDrop }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Verify that the added and dropped Linux Kernel Capabilities are in line with the ones needed
                            for container process for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.770">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.10" name="Ensure memory usage for container is limited" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as memory limit, you can control the amount of
                        memory that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, container can use all of the memory on the host. You can use memory limit mechanism
                        to prevent a denial of service arising from one container consuming all of the host's resources
                        such that other containers on the same host cannot perform their intended functions. Having no
                        limit on memory can lead to issues where one container can easily make the whole system unstable
                        and as a result unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container with only as much memory as required. Always run the container using the
                        --memory argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --memory 256m centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;In the above example, the container is started with a memory limit of 256 MB.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Please note that the output of the below command would return values in scientific
                        notation if memory limits are in place.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example, if the memory limit is set to 256 MB for the above container
                        instance, the output of the above command would be 2.68435456e+08 and NOT 256mb. You should
                        convert this value using a scientific calculator or programmatic methods. Impact: If you do not
                        set proper limits, the container process may have to starve.</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run metrics" url="https://docs.docker.com/engine/admin/runmetrics/"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Goldmann blog: run options" url="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.10" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{
                            .HostConfig.Memory }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0, it means the memory limits are not in place. If the above
                            command returns a non-zero value, it means memory limits are in place.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.19" name="Ensure mount propagation mode is not set to shared" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Mount propagation mode allows mounting volumes in shared, slave or private mode on a
                        container. Do not use shared mount propagation mode until needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A shared mount is replicated at all mounts and the changes made at any mount point are
                        propagated to all mounts. Mounting a volume in shared mode does not restrict any other container
                        to mount and make changes to that volume. This might be catastrophic if the mounted volume is
                        sensitive to changes. Do not set mount propagation mode to shared until needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount volumes in shared mode propagation. For example, do not start container as below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --volume=/hostPath:/containerPath:shared&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: volume shared filesystems" url="https://docs.docker.com/engine/reference/run/#volume-shared-filesystems"/>
            <reference name="Docker github: 17034" url="https://github.com/docker/docker/pull/17034"/>
            <reference name="Kernel: shared sub tree" url="https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt"/>
          </references>
          <standards>
            <standard ref="5.19" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Propagation={{range $mnt
                            := .Mounts}} {{json $mnt.Propagation}} {{end}}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the propagation mode for mounted volumes. Propagation mode
                            should not be set to shared unless needed. The above command might throw errors if there are
                            no mounts. In that case, this recommendation is not applicable.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.14" name="Ensure 'on-failure' container restart policy is set to '5'" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using the --restart flag in docker run command you can specify a restart policy for how a
                        container should or should not be restarted on exit. You should choose the on-failure restart
                        policy and limit the restart attempts to 5.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you indefinitely keep trying to start the container, it could possibly lead to a denial of
                        service on the host. It could be an easy way to do a distributed denial of service attack
                        especially if you have many containers on the same host. Additionally, ignoring the exit status
                        of the container and always attempting to restart the container leads to non-investigation of
                        the root cause behind containers getting terminated. If a container gets terminated, you should
                        investigate the reason behind it instead of just attempting to restart it indefinitely. Thus, it
                        is recommended to use on-failure restart policy and limit it to a maximum of 5 restart attempts.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If a container is desired to be restarted on its own, then, for example, you could start the
                        container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --restart=on-failure:5 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container would attempt to restart only 5 times.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: restart policies" url="https://docs.docker.com/engine/reference/commandline/run/#restart-policies-restart"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.14" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: RestartPolicyName={{
                            .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{
                            .HostConfig.RestartPolicy.MaximumRetryCount }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=always, then the system is not
                            configured as desired and hence this recommendation is non-compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=no or just RestartPolicyName=, then
                            the restart policies are not being used and the container would never be restarted on its
                            own. This recommendation is then Not Applicable and can be assumed to be compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=on-failure, then verify that the
                            number of restart attempts is set to 5 or less by looking at MaximumRetryCount.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.770">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.8" name="Ensure only needed ports are open on the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Dockerfile for a container image defines the ports to be opened by default on a container
                        instance. The list of ports may or may not be relevant to the application you are running within
                        the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A container can be run just with the ports defined in the Dockerfile for its image or can be
                        arbitrarily passed run time parameters to open a list of ports. Additionally, over time,
                        Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant
                        to the application you are running within the container. Opening unneeded ports increases the
                        attack surface of the container and the containerized application. As a recommended practice, do
                        not open unneeded ports.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Fix the Dockerfile of the container image to expose only needed ports by your containerized
                        application. You can also completely ignore the list of ports defined in the Dockerfile by NOT
                        using -P (UPPERCASE) or --publish-all flag when starting the container. Use the -p (lowercase)
                        or --publish flag to explicitly define the ports that you need for a particular container
                        instance. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.8" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that the ports mapped are the ones that are really needed for the
                            container.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.28" name="Ensure PIDs cgroup limit is used" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use --pids-limit flag at container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Attackers could launch a fork bomb with a single command inside the container. This fork bomb
                        can crash the entire system and requires a restart of the host to make the system functional
                        again. PIDs cgroup --pids-limit will prevent this kind of attack by restricting the number of
                        forks that can happen inside a container at a given time.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use --pids-limit flag while launching the container with an appropriate value. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run -it --pids-limit 100&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the above example, the number of processes allowed to run at any given time is set to 100.
                        After a limit of 100 concurrently running processes is reached, docker would restrict any new
                        process creations.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Set the PIDs limit value as appropriate. Incorrect values might render the containers unusable.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Docker github: 18697" url="https://github.com/docker/docker/pull/18697"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.28" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that PidsLimit is not set to 0 or -1. A PidsLimit of 0
                            or -1 means that any number of processes can be forked inside the container concurrently.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidsLimit={{
                            .HostConfig.PidsLimit }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.4" name="Ensure privileged containers are not used" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using the --privileged flag gives all Linux Kernel Capabilities to the container thus
                        overwriting the --cap-add and --cap-drop flags. Ensure that it is not used.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --privileged flag gives all capabilities to the container, and it also lifts all the
                        limitations enforced by the device cgroup controller. In other words, the container can then do
                        almost everything the host can do. This flag exists to allow special use-cases, like running
                        Docker within Docker.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not run container with the --privileged flag. For example, do not start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --privileged centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Linux Kernel Capabilities other than defaults would not be available for use within container.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs:Runtime privilege and linux capabilities" url="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D05 - Maintain Security Contexts" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Privileged={{
                            .HostConfig.Privileged }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Privileged=false for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.7" name="Ensure privileged ports are not mapped within containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes
                        are not allowed to use them for various security reasons. Docker allows a container port to be
                        mapped to a privileged port.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, if the user does not specifically declare the container port to host port mapping,
                        Docker automatically and correctly maps the container port to one available in 49153-65535 block
                        on the host. But, Docker allows a container port to be mapped to a privileged port on the host
                        if the user explicitly declared it. This is so because containers are executed with
                        NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The
                        privileged ports receive and transmit various sensitive and privileged data. Allowing containers
                        to use them can bring about serious implications.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not map the container ports to privileged host ports when starting a container. Also, ensure
                        that there is no such container to host privileged port mapping declarations in the Dockerfile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.7" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>List all running containers instances and their port mapping by executing the below
                            command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that container ports are not mapped to host port numbers below
                            1024.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.10" name="Ensure secrets are not stored in Dockerfiles" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not store any secrets in Dockerfiles.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Dockerfiles could be backtracked easily by using native Docker commands such as docker history
                        and various tools and utilities. Also, as a general practice, image publishers provide
                        Dockerfiles to build the credibility for their images. Hence, the secrets within these
                        Dockerfiles could be easily exposed and potentially be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not store any kind of secrets within Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to identify a way to handle secrets for your Docker images.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker 12factor: config" url="https://12factor.net/config"/>
            <reference name="Docker avicoder: dump" url="https://avicoder.me/2016/07/22/Twitter-Vine-Source-code-dump/"/>
            <reference name="Docker github: 13490" url="https://github.com/docker/docker/issues/13490"/>
          </references>
          <standards>
            <standard ref="4.10" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D06 - Protect Secrets" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any secrets:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            secrets as described above.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.2" name="Ensure SELinux security options are set, if applicable" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>SELinux is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Red Hat and Fedora.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default
                        Discretionary Access Control (DAC) model. You can thus add an extra layer of safety by enabling
                        SELinux on your Linux host, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If SELinux is applicable for your Linux OS, use it. You may have to follow the below set of
                        steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Set the SELinux State.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Set the SELinux Policy.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import a SELinux policy template for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start Docker in daemon mode with SELinux enabled. For example, docker daemon
                        --selinux-enabled&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the security options. For example, docker run
                        --interactive --tty --security-opt label=level:TopSecret centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the SELinux policy. If
                        your SELinux policy is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: other kernel security features" url="https://docs.docker.com/engine/security/security/#other-kernel-security-features"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
            <reference name="Docker redhat: seLinux security profile" url="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy"/>
            <reference name="Fedora docs: Linux security" url="https://docs.fedoraproject.org/en-US/Fedora/13/html/Security-Enhanced_Linux/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.2" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.5" name="Ensure sensitive host system directories are not mounted on containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Sensitive host system directories such as below should not be allowed to be mounted as
                        container volumes especially in read-write mode. / /boot /dev /etc /lib /proc /sys /usr&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If sensitive directories are mounted in read-write mode, it would be possible to make changes to
                        files within those sensitive directories. The changes might have negative security implications
                        or unwarranted changes that could put the Docker host in compromised state.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount host sensitive directories on containers especially in read-write mode.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Volumes" url="https://docs.docker.com/engine/tutorials/dockervolumes/"/>
          </references>
          <standards>
            <standard ref="5.5" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above commands would return the list of current mapped directories and whether they are
                            mounted in read-write mode for each container instance.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.8" name="Ensure setuid and setgid permissions are removed in the images" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Removing setuid and setgid permissions in the images will help prevent privilege escalation
                        attacks in the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        setuid and setgid permissions could be used for elevating privileges. While these permissions
                        are at times legitimately needed, these could potentially be used in privilege escalation
                        attacks. Thus, you should consider dropping these permissions for the packages which do not need
                        them within the images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Allow setuid and setgid permissions only on executables which need them. You could remove these
                        permissions during build time by adding the following command in your Dockerfile, preferably
                        towards the end of the Dockerfile:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        RUN find / -perm +6000 -type f -exec chmod a-s {} \; || true&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Above command breaks all the executables that depend on setuid or setgid permissions including
                        the legitimate ones. Hence, be careful to modify the command to suit your requirements so that
                        it does not drop the permissions of legitimate programs. This requires a careful examination of
                        each executable and fine tuning the permissions.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker container solutions" url="https://info.container-solutions.com/hubfs/Imported_Blog_Media/15_06_15_DockerCheatSheet_A41-1024x724-1.jpg"/>
            <reference name="Docker linux: setgid" url="https://man7.org/linux/man-pages/man2/setgid.2.html"/>
            <reference name="Docker linux: setuid" url="https://man7.org/linux/man-pages/man2/setuid.2.html"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.8" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D04 - Secure Defaults and Hardening" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command on the image to list the executables having setuid and setgid
                            permissions:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker run find / -perm +6000 -type f -exec ls -ld {} \; 2&amp;gt; /dev/null&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Carefully, review the list and ensure that it is legitimate.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.6" name="Ensure SSH is not run within containers" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>SSH server should not be running within the container. You should SSH into the Docker host,
                        and use nsenter tool to enter a container from a remote host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Running SSH within the container increases the complexity of security management by making it&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Difficult to manage access policies and security compliance for SSH server&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage keys and passwords across various containers&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage security upgrades for SSH server It is possible to have shell
                        access to a container without using SSH.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;Needlessly increasing the complexity of security management should be avoided.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Uninstall SSH server from the container and use nsenteror or any other commands such as docker
                        exec or docker attach to interact with the container instance.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker exec --interactive --tty $INSTANCE_ID sh&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        OR&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker attach $INSTANCE_ID&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: docker sshd" url="https://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.6" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID ps -el&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that there is no process for SSH server.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.771">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.25" name="Ensure the container is restricted from acquiring additional privileges" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Restrict the container from acquiring additional privileges via suid or sgid bits.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve.
                        The no_new_priv bit ensures that the process or its children processes do not gain any
                        additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot
                        less dangerous because there is no possibility of subverting privileged binaries.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, you should start your container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --rm -it --security-opt=no-new-privileges ubuntu bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not
                        allowed to the current process.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: 20727" url="https://github.com/docker/docker/pull/20727"/>
            <reference name="Docker github: 269" url="https://github.com/projectatomic/atomic-site/issues/269"/>
            <reference name="Docker lwn: 475362" url="https://lwn.net/Articles/475362/"/>
            <reference name="Docker lwn: 475678" url="https://lwn.net/Articles/475678/"/>
            <reference name="Kernel: No new privs" url="https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt"/>
          </references>
          <standards>
            <standard ref="5.25" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers. no-new-privileges should also be one of them.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.12" name="Ensure the container's root filesystem is mounted as read only" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The container's root filesystem should be treated as a 'golden image' by using Docker run's
                        --read-only option. This prevents any writes to the container's root filesystem at container
                        runtime and enforces the principle of immutable infrastructure.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling this option forces containers at runtime to explicitly define their data writing
                        strategy to persist or not persist their data. This also reduces security attack vectors since
                        the container instance's filesystem cannot be tampered with or written to unless it has explicit
                        read-write permissions on its filesystem folder and directories.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be
                        mounted as read only. docker run --read-only Enabling the --read-only option at a container's
                        runtime should be used by administrators to force a container's executable processes to only
                        write container data to explicit storage locations during the container's runtime.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Examples of explicit storage locations during a container's runtime include, but are not limited
                        to:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Use the --tmpfs option to mount a temporary file system for non-persistent data
                        writes. docker run --interactive --tty --read-only --tmpfs &amp;quot;/run&amp;quot; --tmpfs
                        &amp;quot;/tmp&amp;quot; centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Enabling Docker rw mounts at a container's runtime to persist container data directly
                        on the Docker host filesystem. docker run --interactive --tty --read-only -v
                        /opt/app/data:/run/app/data:rw centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Utilizing Docker shared-storage volume plugins for Docker data volume to persist
                        container data. docker volume create -d convoy --opt o=size=20GB my-named-volume docker run
                        --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Transmitting container data outside of the docker during the container's runtime for
                        container data to persist container data. Examples include hosted databases, network file
                        shares, and APIs.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling --read-only at container runtime may break some container OS packages if a data writing
                        strategy is not defined. Define what the container's data should and should not persist at
                        runtime to determine which recommendation procedure to utilize.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Volumes" url="https://docs.docker.com/engine/tutorials/dockervolumes/"/>
            <reference name="Docker docs: mount tmpfs" url="https://docs.docker.com/engine/reference/commandline/run/#mount-tmpfs-tmpfs"/>
            <reference name="Docker docs: run" url="https://docs.docker.com/engine/reference/commandline/run/"/>
          </references>
          <standards>
            <standard ref="5.12" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D09 - Follow Immutable Paradigm" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the following command on the docker host:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: ReadonlyRootfs={{
                            .HostConfig.ReadonlyRootfs }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns true, it means the container's root filesystem is mounted
                            read-only. If the above command returns false, it means the container's root filesystem is
                            writable.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.21" name="Ensure the default seccomp profile is not Disabled" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Seccomp filtering provides a means for a process to specify a filter for incoming system
                        calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls
                        blocking all others. It should not be disabled unless it hinders your container application
                        usage.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A large number of system calls are exposed to every userland process with many of them going
                        unused for the entire lifetime of the process. Most of the applications do not need all the
                        system calls and thus benefit by having a reduced set of available system calls. The reduced set
                        of system calls reduces the total kernel surface exposed to the application and thus improves
                        application security.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, seccomp profiles are enabled. You do not need to do anything unless you want to
                        modify and use the modified seccomp profile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        With Docker 1.10 and greater, the default seccomp profile blocks syscalls, regardless of
                        --cap-add passed to the container. You should create your own custom seccomp profile in such
                        cases. You may also disable the default seccomp profile by passing
                        --security-opt=seccomp:unconfined on docker run.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker blog: Seccomp profiles" url="https://blog.aquasec.com/new-docker-security-features-and-what-they-mean-seccomp-profiles"/>
            <reference name="Docker docs: Seccomp" url="https://docs.docker.com/engine/security/seccomp/"/>
            <reference name="Docker docs: security configuration" url="https://docs.docker.com/engine/reference/run/#security-configuration"/>
            <reference name="Docker github: 22870" url="https://github.com/docker/docker/issues/22870"/>
            <reference name="Docker github: Seccomp" url="https://github.com/docker/docker/blob/master/profiles/seccomp/default.json"/>
            <reference name="Seccomp kernel" url="https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt"/>
          </references>
          <standards>
            <standard ref="5.21" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return or your modified seccomp profile. If it returns
                            [seccomp:unconfined], that means this recommendation is non-compliant and the container is
                            running without any seccomp profiles.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.18" name="Ensure the default ulimit is overwritten at runtime, only if needed" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The default ulimit is set at the Docker daemon level. However, you may override the default
                        ulimit setting, if needed, during container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        ulimit provides control over the resources available to the shell and to processes started by
                        it. Setting system resource limits judiciously saves you from many disasters such as a fork
                        bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and
                        in-turn can make the system unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The default ulimit set at the Docker daemon level should be honored. If the default ulimit
                        settings are not appropriate for a particular container instance, you may override them as an
                        exception. But, do not make this a practice. If most of the container instances are overriding
                        default ulimit settings, consider changing the default ulimit settings to something that is
                        appropriate for your needs.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Only override the default ulimit settings if needed. For example, to override default ulimit
                        settings start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the ulimits are not set properly, the desired resource control might not be achieved and
                        might even make the system unusable.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: set ulimits in container" url="https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container-ulimit"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.18" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ulimits={{
                            .HostConfig.Ulimits }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Ulimits= for each container instance until and unless there
                            is an exception and a need to override the default ulimit settings.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.31" name="Ensure the Docker socket is not mounted inside any containers" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The docker socket docker.sock should not be mounted inside a container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the docker socket is mounted inside a container it would allow processes running within the
                        container to execute docker commands which effectively allows for full control of the host.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;/b&gt;Ensure that no containers mount docker.sock as a volume.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker forums: docker in docker vs mounting var run docker sock" url="https://forums.docker.com/t/docker-in-docker-vs-mounting-var-run-docker-sock/9450/2"/>
            <reference name="Docker github: 21109" url="https://github.com/docker/docker/issues/21109"/>
            <reference name="Docker raesene github" url="https://raesene.github.io/blog/2016/03/06/The-Dangers-Of-Docker.sock/"/>
          </references>
          <standards>
            <standard ref="5.31" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' |
                            grep docker.sock&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return any instances where docker.sock had been mapped to a
                            container as a volume.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.16" name="Ensure the host's IPC namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores
                        and message queues. IPC namespace on the host thus should not be shared with the containers and
                        should remain isolated.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        IPC namespace provides separation of IPC between the host and containers. If the host's IPC
                        namespace is shared with the container, it would basically allow processes within the container
                        to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between
                        the host and the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually manipulate the host IPC. This can be
                        catastrophic. Hence, do not share the host's IPC namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;Do not start a container with --ipc=host argument. For example, do not start a
                        container as below:
                        &lt;div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; Shared memory segments are used to accelerate inter-process
                        communication. It is commonly used by high-performance applications. If such applications are
                        containerized into multiple containers, you might need to share the IPC namespace of the
                        containers to achieve high performance. In such cases, you should still be sharing container
                        specific IPC namespaces only and not the host IPC namespace. You may share the container's IPC
                        namespace with another container as below: For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: ipc settings" url="https://docs.docker.com/engine/reference/run/#ipc-settings-ipc"/>
            <reference name="Linux: namespaces" url="https://man7.org/linux/man-pages/man7/namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.16" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: IpcMode={{
                            .HostConfig.IpcMode }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host IPC namespace is shared with the
                            container.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns nothing, then the host's IPC namespace is not shared. This
                            recommendation is then compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.9" name="Ensure the host's network namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The networking mode on a container when set to --net=host, skips placing the container inside
                        a separate network stack. In essence, this choice tells Docker to not containerize the
                        container's networking. This would network-wise mean that the container lives &amp;quot;outside&amp;quot;
                        in the main Docker host and has full access to its network interfaces.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is potentially dangerous. It allows the container process to open low-numbered ports like
                        any other root process. It also allows the container to access network services like D-bus on
                        the Docker host. Thus, a container process can potentially do unexpected things such as shutting
                        down the Docker host. You should not use this option.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not pass --net=host option when starting the container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Network settings" url="https://docs.docker.com/engine/reference/run/#network-settings"/>
            <reference name="Docker docs: Networking" url="https://docs.docker.com/engine/userguide/networking/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.9" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: NetworkMode={{
                            .HostConfig.NetworkMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns NetworkMode=host, it means that --net=host option was passed
                            when the container was started. This would be non-compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.773">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.15" name="Ensure the host's process namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Process ID (PID) namespaces isolate the process ID number space, meaning that processes in
                        different PID namespaces can have the same PID. This is process level isolation between
                        containers and the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        PID namespace provides separation of processes. The PID Namespace removes the view of the system
                        processes, and allows process ids to be reused including PID 1. If the host's PID namespace is
                        shared with the container, it would basically allow processes within the container to see all of
                        the processes on the host system. This breaks the benefit of process level isolation between the
                        host and the containers.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually know all the processes running on the host
                        system and can even kill the host system processes from within the container. This can be
                        catastrophic. Hence, do not share the host's process namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not start a container with --pid=host argument. For example, do not start a container as
                        below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --pid=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Container processes cannot see the processes on the host system. In certain cases, you want your
                        container to share the host's process namespace. For example, you could build a container with
                        debugging tools like strace or gdb, but want to use these tools when debugging processes within
                        the container. If this is desired, then share only one (or needed) host process by using the -p
                        switch. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --pid=host rhel7 strace -p 1234
                        &lt;/div&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: pid settings" url="https://docs.docker.com/engine/reference/run/#pid-settings-pid"/>
            <reference name="Linux: pid namespaces" url="https://man7.org/linux/man-pages/man7/pid_namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.15" supportedStandardRef="Level 1 - Docker"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidMode={{
                            .HostConfig.PidMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host PID namespace is shared with the
                            container, if not, this recommendation is compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.773">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.30" name="Ensure the host's user namespaces is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not share the host's user namespaces with the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        User namespaces ensure that a root process inside the container will be mapped to a non-root
                        process outside the container. Sharing the user namespaces of the host with the container thus
                        does not isolate users on the host with users on the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not share user namespaces between host and containers. For example, do not run a container as
                        below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --rm -it --userns=host ubuntu bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker - linux foundation: Namespaces" url="https://events.static.linuxfound.org/sites/events/files/slides/User%20Namespaces%20-%20ContainerCon%202015%20-%2016-9-final_0.pdf"/>
            <reference name="Docker docs: run options" url="https://docs.docker.com/engine/reference/commandline/run/#options"/>
            <reference name="Docker docs: userns remap" url="https://docs.docker.com/engine/security/userns-remap/"/>
            <reference name="Docker github: 12648" url="https://github.com/docker/docker/pull/12648"/>
          </references>
          <standards>
            <standard ref="5.30" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D01 - Secure User Mapping" supportedStandardRef="owasp-docker-top-10-2018"/>
            <standard ref="D03 - Network Segmentation and Firewalling" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Run the below command and ensure that it does not return any value for UsernsMode. If it
                            returns a value of host, it means the host user namespace is shared with the containers.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UsernsMode={{
                            .HostConfig.UsernsMode }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D5.20" name="Ensure the host's UTS namespace is not shared" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain
                        name. It is used for setting the hostname and the domain that is visible to running processes in
                        that namespace. Processes running within containers do not typically require to know hostname
                        and domain name. Hence, the namespace should not be shared with the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Sharing the UTS namespace with the host provides full permission to the container to change the
                        hostname of the host. This is insecure and should not be allowed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Do not start a container with --uts=host argument. For example, do not start a container as
                        below: docker run --rm --interactive --tty --uts=host rhel7.2&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: uts settings" url="https://docs.docker.com/engine/reference/run/#uts-settings-uts"/>
            <reference name="Linux: namespaces" url="https://man7.org/linux/man-pages/man7/namespaces.7.html"/>
          </references>
          <standards>
            <standard ref="5.20" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="D07 - Resource Protection" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UTSMode={{
                            .HostConfig.UTSMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host UTS namespace is shared with the
                            container and this recommendation is non-compliant. If the above command returns nothing,
                            then the host's UTS namespace is not shared. This recommendation is then compliant.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.772">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.3" name="Ensure unnecessary packages are not installed in the container" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Containers tend to be minimal and slimmed down versions of the Operating System. Do not
                        install anything that does not justify the purpose of the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bloated containers with unnecessary software could possibly increase the attack surface of the
                        container. This also voids the concept of minimal and slimmed down versions of container images.
                        Hence, do not install anything else apart from what is truly needed for the purpose of the
                        container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At the outset, do not install anything on the container that does not justify the purpose. If
                        the image had some packages that your container does not use, uninstall them. Consider using a
                        minimal base image rather than the standard Redhat/Centos/Debian images if you can. Some of the
                        options include BusyBox and Alpine. Not only does this trim your image size from &amp;gt;150Mb
                        to ~20 Mb, there are also fewer tools and paths to escalate privileges. You can even remove the
                        package installer as a final hardening measure for leaf/production containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Docker images" url="https://docs.docker.com/userguide/dockerimages/"/>
            <reference name="Docker github: busybox" url="https://github.com/progrium/busybox"/>
            <reference name="Docker linux: slimming down" url="https://livewyer.io/blog/2015/02/24/slimming-down-your-docker-containers-alpine-linux/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.3" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D04 - Secure Defaults and Hardening" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command will list the packages installed on the container. Review the list and
                            ensure that it is legitimate.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.7" name="Ensure update instructions are not used alone in the Dockerfile" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use update instructions such as apt-get update alone or in a single line in the
                        Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Adding the update instructions in a single line on the Dockerfile will cache the update layer.
                        Thus, when you build any image later using the same instruction, previously cached update layer
                        will be used. This could potentially deny any fresh updates to go in the later builds.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use update instructions along with install instructions (or any other) and version pinning for
                        packages while installing them. This would bust the cache and force extraction of the required
                        versions.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternatively, you could use --no-cache flag during docker build process to avoid using cached
                        layers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker docs: Best practices" url="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run"/>
            <reference name="Docker github: 3313" url="https://github.com/docker/docker/issues/3313"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.7" supportedStandardRef="Level 1 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="D02 - Patch Management Strategy" supportedStandardRef="owasp-docker-top-10-2018"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any update instructions being in a single line:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            update instructions as described above.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="D4.11" name="Ensure verified packages only are Installed" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="Docker CIS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Verify authenticity of the packages before installing them in the image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Verifying authenticity of the packages is essential for building a secure container image.
                        Tampered packages could potentially be malicious or have some known vulnerabilities that could
                        be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use GPG keys for downloading and verifying packages or any other secure package distribution
                        mechanism of your choice.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Docker github: Dockerfile" url="https://github.com/docker-library/httpd/blob/12bf8c8883340c98b3988a7bade8ef2d0d6dcf8a/2.4/Dockerfile"/>
            <reference name="Docker github: Dockerfile alpine" url="https://github.com/docker-library/php/blob/d8a4ccf4d620ec866d5b42335b699742df08c5f0/7.0/alpine/Dockerfile"/>
            <reference name="Docker oreily: Docker security" url="https://www.oreilly.com/content/docker-security/"/>
            <reference name="Docker redhat: team key" url="https://access.redhat.com/security/team/key"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.11" supportedStandardRef="Level 2 - Docker"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for how the authenticity of the packages is determined. This could be via the use of GPG
                            keys or other secure package distribution mechanisms:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that the authenticity
                            of the packages is checked.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:24.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION AND AUTHORIZATION" name="Authentication and Authorization" desc="" library="Docker CIS">
          <threats>
            <threat ref="CAPEC-122-DOCKER-CONTAINER-RUNTIME" name="Attackers gain access without the necessary privileged to the docker container runtime" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.25" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.31" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="D5.12" mitigation="9"/>
                    <countermeasure ref="D5.17" mitigation="8"/>
                    <countermeasure ref="D5.19" mitigation="8"/>
                    <countermeasure ref="D5.21" mitigation="9"/>
                    <countermeasure ref="D5.22" mitigation="9"/>
                    <countermeasure ref="D5.23" mitigation="8"/>
                    <countermeasure ref="D5.24" mitigation="8"/>
                    <countermeasure ref="D5.25" mitigation="8"/>
                    <countermeasure ref="D5.3" mitigation="8"/>
                    <countermeasure ref="D5.31" mitigation="8"/>
                    <countermeasure ref="D5.4" mitigation="9"/>
                    <countermeasure ref="D5.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.12" mitigation="9"/>
                <countermeasure ref="D5.17" mitigation="8"/>
                <countermeasure ref="D5.19" mitigation="8"/>
                <countermeasure ref="D5.21" mitigation="9"/>
                <countermeasure ref="D5.22" mitigation="9"/>
                <countermeasure ref="D5.23" mitigation="8"/>
                <countermeasure ref="D5.24" mitigation="8"/>
                <countermeasure ref="D5.25" mitigation="8"/>
                <countermeasure ref="D5.3" mitigation="8"/>
                <countermeasure ref="D5.31" mitigation="8"/>
                <countermeasure ref="D5.4" mitigation="9"/>
                <countermeasure ref="D5.5" mitigation="8"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122-DOCKER-IMAGES-BUILD-FILES" name="Attackers gain access without the necessary privileged to the docker images and build files" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="D4.1" mitigation="50"/>
                    <countermeasure ref="D4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.1" mitigation="50"/>
                <countermeasure ref="D4.8" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Docker CIS">
          <threats>
            <threat ref="CAPEC-125-CONTAINER-RUNTIME" name="Attackers consume the resources of the Container Runtime by rapidly engaging to do the target inaccessible or to break the target" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An adversary consumes the resources of a target by rapidly engaging in a large number
                                of interactions with the target. This type of attack generally exposes a weakness in
                                rate limiting or flow. When successful this attack prevents legitimate users from
                                accessing the service and can cause the target to crash. This attack differs from
                                resource depletion through leaks or allocations in that the latter attacks do not rely
                                on the volume of requests made to the target but instead focus on manipulation of the
                                target's operations. The key factor in a flooding attack is the number of requests the
                                adversary can make in a given period of time. The greater this number, the more likely
                                an attack is to succeed against a given target.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-400">
                  <countermeasures>
                    <countermeasure ref="D5.10" mitigation="20"/>
                    <countermeasure ref="D5.11" mitigation="20"/>
                    <countermeasure ref="D5.14" mitigation="20"/>
                    <countermeasure ref="D5.18" mitigation="20"/>
                    <countermeasure ref="D5.28" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.10" mitigation="20"/>
                <countermeasure ref="D5.11" mitigation="20"/>
                <countermeasure ref="D5.14" mitigation="20"/>
                <countermeasure ref="D5.18" mitigation="20"/>
                <countermeasure ref="D5.28" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-CONTAINER-RUNTIME" name="Attackers gain access to the docker container by using sensitive data which was found embedded within it" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials which can be used as an intermediate step in a larger
                                attack.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="D5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-IMAGES-BUILD-FILE" name="Attackers gain access to the docker images and build files by using sensitive data which was found embedded within it" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="D4.10" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.10" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A6:2017-DOCKER-CONTAINER-RUNTIME" name="Exploitation of Security Misconfiguration of the Docker container runtime" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="D5.1" mitigation="5"/>
                    <countermeasure ref="D5.10" mitigation="5"/>
                    <countermeasure ref="D5.11" mitigation="5"/>
                    <countermeasure ref="D5.13" mitigation="5"/>
                    <countermeasure ref="D5.14" mitigation="5"/>
                    <countermeasure ref="D5.18" mitigation="5"/>
                    <countermeasure ref="D5.2" mitigation="5"/>
                    <countermeasure ref="D5.26" mitigation="5"/>
                    <countermeasure ref="D5.28" mitigation="5"/>
                    <countermeasure ref="D5.29" mitigation="5"/>
                    <countermeasure ref="D5.6" mitigation="5"/>
                    <countermeasure ref="D5.7" mitigation="5"/>
                    <countermeasure ref="D5.8" mitigation="5"/>
                    <countermeasure ref="D5.9" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-485">
                  <countermeasures>
                    <countermeasure ref="D5.15" mitigation="5"/>
                    <countermeasure ref="D5.16" mitigation="5"/>
                    <countermeasure ref="D5.20" mitigation="5"/>
                    <countermeasure ref="D5.30" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-SERVER">
                  <countermeasures>
                    <countermeasure ref="D5.27" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.1" mitigation="5"/>
                <countermeasure ref="D5.10" mitigation="5"/>
                <countermeasure ref="D5.11" mitigation="5"/>
                <countermeasure ref="D5.13" mitigation="5"/>
                <countermeasure ref="D5.14" mitigation="5"/>
                <countermeasure ref="D5.15" mitigation="5"/>
                <countermeasure ref="D5.16" mitigation="5"/>
                <countermeasure ref="D5.18" mitigation="5"/>
                <countermeasure ref="D5.2" mitigation="5"/>
                <countermeasure ref="D5.20" mitigation="5"/>
                <countermeasure ref="D5.26" mitigation="5"/>
                <countermeasure ref="D5.27" mitigation="10"/>
                <countermeasure ref="D5.28" mitigation="5"/>
                <countermeasure ref="D5.29" mitigation="5"/>
                <countermeasure ref="D5.30" mitigation="5"/>
                <countermeasure ref="D5.6" mitigation="5"/>
                <countermeasure ref="D5.7" mitigation="5"/>
                <countermeasure ref="D5.8" mitigation="5"/>
                <countermeasure ref="D5.9" mitigation="5"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A6:2017-DOCKER-IMAGES-BUILD-FILES" name="Exploitation of Security Misconfiguration of the Docker images and build files security" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="D4.11" mitigation="12"/>
                    <countermeasure ref="D4.3" mitigation="13"/>
                    <countermeasure ref="D4.5" mitigation="13"/>
                    <countermeasure ref="D4.6" mitigation="13"/>
                    <countermeasure ref="D4.7" mitigation="12"/>
                    <countermeasure ref="D4.8" mitigation="13"/>
                    <countermeasure ref="D4.9" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-SERVER">
                  <countermeasures>
                    <countermeasure ref="D4.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.11" mitigation="12"/>
                <countermeasure ref="D4.3" mitigation="13"/>
                <countermeasure ref="D4.4" mitigation="12"/>
                <countermeasure ref="D4.5" mitigation="13"/>
                <countermeasure ref="D4.6" mitigation="13"/>
                <countermeasure ref="D4.7" mitigation="12"/>
                <countermeasure ref="D4.8" mitigation="13"/>
                <countermeasure ref="D4.9" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Docker CIS">
          <threats>
            <threat ref="DOCKER-WIDE-ATTACK-SURFACE-CONTAINER" name="Attackers gain access to the Docker container by exploiting the vulnerabilities of the network" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="D5.13" mitigation="20"/>
                    <countermeasure ref="D5.29" mitigation="20"/>
                    <countermeasure ref="D5.7" mitigation="20"/>
                    <countermeasure ref="D5.8" mitigation="20"/>
                    <countermeasure ref="D5.9" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D5.13" mitigation="20"/>
                <countermeasure ref="D5.29" mitigation="20"/>
                <countermeasure ref="D5.7" mitigation="20"/>
                <countermeasure ref="D5.8" mitigation="20"/>
                <countermeasure ref="D5.9" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-157-IMAGES-BUILD-FILES" name="Attackers get sensitive data from docker images and build files through sniffing the transmisions between components" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>An attacker monitors information transmitted between logical or physical nodes of a
                                network. The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic. The attacker might precipitate or
                                indirectly influence the content of the observed transaction, but the attacker is never
                                the intended recipient of the information. Any transmission medium can theoretically be
                                sniffed if the attacker can listen to the contents between the sender and recipient.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="D4.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-94-IMAGES-BUILD-FILES" name="Attackers steal sensitive data from the docker images and build files by listening the communication between components" state="Expose" source="RULES" edited="false" owner="ddoughty" library="Docker CIS" editable="true">
              <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="D4.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="D4.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="bf2d8c6a-a295-4471-8916-c5b6cd7581aa" diagramComponentId="eff1e57e-6076-4ab7-afe9-5e03edd18ffb" ref="27fd4d7f-07e7-4187-b9c0-dcaa43f3cef0" name="nginx" desc="" library="" parentComponentRef="18504e91-5988-47b1-8f1d-b4259b113242" componentDefinitionRef="nginx">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="configure-file-descriptors-appropriately" name="Configure File Descriptors Appropriately" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="ddoughty" library="" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Each connection from an NGINX worker process to a client or upstream server consumes an FD. When NGINX acts as a web server, it uses one FD for the client connection and one FD per served file, for a minimum of two FDs per client (but most web pages are built from many files). When it acts as a proxy server, NGINX uses one FD each for the connection to the client and upstream server, and potentially a third FD for the file used to store the server’s response temporarily. As a caching server, NGINX behaves like a web server for cached responses and like a proxy server if the cache is empty or expired.&lt;/p&gt; 
&lt;p&gt;NGINX also uses an FD per log file and a couple FDs to communicate with master process, but usually these numbers are small compared to the number of FDs used for connections and files.&lt;/p&gt; 
&lt;p&gt;UNIX offers several ways to set the number of FDs per process:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The&amp;nbsp;&lt;code&gt;ulimit&lt;/code&gt;&amp;nbsp;command if you start NGINX from a shell&lt;/li&gt; 
 &lt;li&gt;The&amp;nbsp;&lt;code&gt;init&lt;/code&gt;&amp;nbsp;script or&amp;nbsp;&lt;code&gt;systemd&lt;/code&gt;&amp;nbsp;service manifest variables if you start NGINX as a service&lt;/li&gt; 
 &lt;li&gt;The&amp;nbsp;&lt;span style="box-sizing: inherit; font-weight: 700; border: 0px; font-family: inherit; font-size: 15px; font-style: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;"&gt;/etc/security/limits.conf&lt;/span&gt;&amp;nbsp;file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;However, the method to use depends on how you start NGINX, whereas&amp;nbsp;&lt;code&gt;worker_rlimit_nofile&lt;/code&gt;&amp;nbsp;works no matter how you start NGINX.&lt;/p&gt; 
&lt;p&gt;There is also a system‑wide limit on the number of FDs, which you can set with the OS’s&amp;nbsp;&lt;span style="box-sizing: inherit; border: 0px; font-family: inherit; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; white-space: nowrap;"&gt;&lt;code&gt;sysctl&lt;/code&gt;&amp;nbsp;&lt;code&gt;fs.file-max&lt;/code&gt;&lt;/span&gt;&amp;nbsp;command. It is usually large enough, but it is worth verifying that the maximum number of file descriptors all NGINX worker processes might use (&lt;span style="box-sizing: inherit; border: 0px; font-family: inherit; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; white-space: nowrap;"&gt;&lt;code&gt;worker_rlimit_nofile&lt;/code&gt;&amp;nbsp;&lt;code&gt;*&lt;/code&gt;&amp;nbsp;&lt;a target="_blank" href="https://nginx.org/en/docs/ngx_core_module.html#worker_processes"&gt;&lt;code&gt;worker_processes&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;) is significantly less than&amp;nbsp;&lt;code&gt;fs.file‑max&lt;/code&gt;. If NGINX somehow uses all available FDs (for example, during a DoS attack), it becomes impossible even to log in to the machine to fix the issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Full Example for Configuring Nginx" url="https://www.nginx.com/resources/wiki/start/topics/examples/full/#"/>
            <reference name="Top 10 Nginx Configuration Mistakes" url="https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:28.853">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="nginx-configuration" name="Top 10 Nginx Configuration Mistakes" desc="" library="">
          <threats>
            <threat ref="not-enough-file-descriptors-per-worker" name="Not Enough File Descriptors per Worker makes the service susceptible to DDoS Attack" state="Expose" source="RULES" edited="false" owner="ddoughty" library="" editable="true">
              <desc>&lt;p&gt;The&amp;nbsp;&lt;a target="_blank" href="https://nginx.org/en/docs/ngx_core_module.html#worker_connections"&gt;&lt;code&gt;worker_connections&lt;/code&gt;&lt;/a&gt;&amp;nbsp;directive sets the maximum number of simultaneous connections that a NGINX worker process can have open (the default is&amp;nbsp;512). All types of connections (for example, connections with proxied servers) count against the maximum, not just client connections. But it’s important to keep in mind that ultimately there is another limit on the number of simultaneous connections per worker: the operating system limit on the maximum number of file descriptors (FDs) allocated to each process. In modern UNIX distributions, the default limit is&amp;nbsp;1024.&lt;/p&gt; 
&lt;p&gt;For all but the smallest NGINX deployments, a limit of&amp;nbsp;512 connections per worker is probably too small. Indeed, the default&amp;nbsp;&lt;span style="box-sizing: inherit; font-weight: 700; border: 0px; font-family: inherit; font-style: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;"&gt;nginx.conf&lt;/span&gt;&amp;nbsp;file we distribute with NGINX Open Source binaries and NGINX&amp;nbsp;Plus increases it to&amp;nbsp;1024.&lt;/p&gt; 
&lt;p&gt;The common configuration mistake is not increasing the limit on FDs to at least twice the value of&amp;nbsp;&lt;code&gt;worker_connections&lt;/code&gt;. The fix is to set that value with the&amp;nbsp;&lt;a target="_blank" href="https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile"&gt;&lt;code&gt;worker_rlimit_nofile&lt;/code&gt;&lt;/a&gt;&amp;nbsp;directive in the main configuration context.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="75" easeOfExploitation="50"/>
              <references>
                <reference name="Top 10 Nginx Configuration Mistakes" url="https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="configure-file-descriptors-appropriately" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="dd0c5f75-85b9-40dd-abc6-866e2d359121" diagramComponentId="94e81a6f-41a0-4910-b64c-a84359128e98" ref="72693117-ef34-427c-b522-e7b69e17bc46" name="Web Application - Server side" desc="" library="CS-Default" parentComponentRef="cecef08a-e03f-4f80-a951-e8c4d8c29944" componentDefinitionRef="web-application-server-side">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.025">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.025">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.371">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.025">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100" issueId="" issueLink="">
          <desc>One or more system settings or configuration elements can be externally controlled by a user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.987">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.025">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100" issueId="" issueLink="">
          <desc>The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.025">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.369">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are at least two subtypes of OS command injection:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The application simply redirects this entire command to the operating system. For example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.988">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.024">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.371">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100" issueId="" issueLink="">
          <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.987">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.371">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.987">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.708">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.024">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.987">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.633">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.507">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and passwords, as well as sensitive information pertaining to the application and system. The source code can also be sent back to a client because of an error condition or an improperly configured handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:27.024">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.507">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.507">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.507">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.370">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Assure that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an eval() statement, which results in code execution.&lt;/p&gt;&lt;p&gt;Note 1: This attack will execute the code with the same permissions, potentially including operation system commands.&lt;/p&gt;&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch procedures that want to invoke a large number of functions, or set a large number of variables.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.611">
              <output/>
            </source>
            <references>
              <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection"/>
              <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method. Many flaws in applications result from unsafe handling of filenames or path data, for example directory traversal and arbitrary file disclosure. Use of filenames or other direct references to objects such as files on the server-side increases the risk of compromise of the system or unauthorized access to other files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do not use obscurity to prevent access; for example do not rely on renaming a file to include a random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct references are used to access files from within the web-root deviating from recommended security practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input validation must be applied.&amp;nbsp; Identify and filter for directory traversal meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example: www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that way and if so, it should not be possible to access locations outside of this domain (i.e. file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;, etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data could have unexpected impact on the behavior of the application, and may facilitate attacks such as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or output timing and detect the usage of automated tools or unusual behavior, such as actions not performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When the usage of automated tools is detected, the application should respond by denying access and notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns in large data sets for the purpose of data or knowledge discovery. Data storage objects include database records and database fields. Sensitive information can be extracted from data mining operations. When information is personally identifiable information, it may lead to unanticipated revelations about individuals and give rise to privacy risks. Prior to performing data mining activities, organizations determine whether such activities are authorized. Organizations may be subject to applicable laws, executive orders, directives, regulations, or policies that address data mining requirements. Organizational personnel consult with the senior agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data mining prevention and detection techniques include limiting the number and frequency of database queries to increase the work factor needed to determine the contents of databases, limiting types of responses provided to database queries, applying differential privacy techniques or homomorphic encryption, and notifying personnel when atypical database queries or accesses occur. Data mining protection focuses on protecting information from data mining while such information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for organizational information that may have been mined or otherwise obtained from data stores and is available as open-source information residing on external sites, such as social networking or social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider threat program for deterring, detecting, and mitigating insider threats, including the safeguarding of sensitive information from exploitation, compromise, or other unauthorized disclosure. Data mining protection requires organizations to identify appropriate techniques to prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-RETENTION" name="Develop a log retention policy" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs from the last 30 days must be collected in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
          </references>
          <standards>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="55" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application may be required to perform server-side file operations based on client-side actions. This can expose the application to attack through remote or local file-inclusion, or remote code execution attacks if unsafe data is used in file inclusion, class loader, or reflection capabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tainted, untrusted, client-side data must not be used directly in server-side file load operations.&lt;/li&gt;&lt;li&gt;Where server-side operations are dependent on client-side input, this should be mapped to pre-defined operations on the server-side rather than using tainted client-side input directly.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sources of data entering the application.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Classify them into trusted and untrusted.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;if they are untrusted, make sure there is a validation and sanitization mechanism before sending this data into another system (Database, Command, etc.).&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-532" name="Do not write secrets to the log files" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.872">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a client to upload new files onto the web server. An attacker may exploit this by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt; This method allows a client to delete a file on the web server. An attacker may exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT: &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE: &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Web server and application server configurations play a key role in the security of a web application. These servers are responsible for serving content and invoking applications that generate content. In addition, many application servers provide a number of services that web applications can use, including data storage, directory services, mail, messaging, and more. Failure to manage the proper configuration of your servers can lead to a wide variety of security problems.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
  Authorized administrators need to ensure the integrity of all security-relevant configurations to detect tampering.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
&lt;/div&gt;
&lt;div&gt;
  4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
&lt;/div&gt;
&lt;div&gt;
  4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
&lt;/div&gt;
&lt;div&gt;
  4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
&lt;/div&gt;
&lt;div&gt;
  4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
&lt;/div&gt;
&lt;div&gt;
  4.3.6 Test HTTP Methods (OTG-CONFIG-006)
&lt;/div&gt;
&lt;div&gt;
  4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
&lt;/div&gt;
&lt;div&gt;
  4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
&lt;/div&gt;
&lt;div&gt;
  4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.611">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://pwning.owasp-juice.shop/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.794">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer header) should be included with requests. This security header was designed to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The Content-Disposition response header tells the browser to download a file rather than displaying it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't use the Origin header for authentication or access control decisions, as the Origin header can easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response header for file downloading in all API responses with the following directives: Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header exists in HTTP responses and has the right directives to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for insecure configurations; for example, when the server returns back the Origin header in the Access-Control-Allow-Origin without any additional checks AND returns Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try Reflected File Download input payloads to launch commands on the client machine. Reflected File Download is an attack combining URL path segments (now deprecated) with pages that reflect user inputs in the response. Generally web services vulnerable to JSONP Injection are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a popular misuse; namely, being used for encoding malicious injection strings in a way that obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input validation filters, or take advantage of particular ways in which browsers render encoded text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify the connection to the DNS was authenticated successfully by username/password or certificate and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.605">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process time that the application requires to function properly while minimizing the resources employed by the attacker by using vulnerabilities or flaws in the application. The main characteristics of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in distinguishing between malicious and legitimate traffic. Many of the most common protection measures or systems focus on the network or transport layer, and as such, they would not be efficient when the target of the attack is the application layer. It is even difficult for the defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As we have indicated, this type of attack is very specific, and generally require fewer resources from the attacker to achieve devastating effects in the systems attacked. However, this type of attack requires more time to analyze the targeted system in order to discover vulnerabilities or bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze weaknesses or bottlenecks in the design, the implementation, or even the functioning of the application to identify "heavy" requests that are resource consuming. For example, if the web application has a search engine, an attack could be to carry out searches that require a high level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement a challenge to the device making the network request in order to test whether or not it is a bot. This is done through a test much like the CAPTCHA test commonly found when creating an account online. By giving a requirement such as a JavaScript computational challenge, many attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and filtering traffic through an IP reputation database, and through on-the-fly network analysis by engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known application attack is Slowloris, which targets web servers. Verify that the implemented Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and transactions, to enforce the correct usage of the application for each user ensuring they cannot bypass important steps in the flow. This business logic limits provide us protection against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All business actions or transactions that exceed the established limits, should be recorded in the logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.&lt;/li&gt;
   &lt;li&gt;Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
  &lt;li&gt;Verify the application monitors for unusual events or activity from a business logic perspective.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good error handling does not give an attacker any information which can be leveraged for attacking the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building an infrastructure for consistent error reporting proves more difficult than error handling. All exceptions should be caught as events with the severity of the error. These events will be logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the corresponding error or system message in a consistent manner, depending on the severity of the error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with little computational effort) force the server to expend relatively large computational work. If a web application is delivered over TLS, an attacker can also choose to attack the TLS negotiation process. TLS is computationally expensive so an attacker can reduce a server's availability by sending unintelligible data. In a variation of this attack, an attacker completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To mitigate consider options like offloading the SSL from the origin infrastructure and inspecting the application traffic for signs of attack traffic or violations of policy at an application delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; and the options you should use will depend greatly on your testing requirements. Below are some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-VAL-LOG" name="Log and reject all data validation failures" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Data validation failures, together with access control violations, are symptomatic of malicious activity where an attacker is attempting to subvert the protections in place. It is therefore likely that unexpected input detected by the application relates to an attack. Rejecting and logging such activity, and ideally terminating the session, increases the likelihood of detecting and inhibiting structured attacks against the application.
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt;
  &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;
  &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;
  &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-4" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If there is no company policy, check that at least the following data is included: timestamp event, status, error codes, service/command/application username or system account associated with an eventDevice used (e.g. source and destination IPs, terminal session ID, web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt; https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be precise enough to know who changed what and when). This includes data access from the application as well as data access from privileged accounts, such as database admins. In practice, this means logging both on application, middleware and operating system (OS) level.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees, administrators and malicious actors.&lt;/li&gt;
                &lt;li&gt;Verify appropriate logging of all the above activities are successful and sufficiently detailed.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs or vulnerabilities in the code or logic. For closed-source projects it is therefore important to control and restrict access to the source. Application services may unexpectedly expose code, for example a service providing files to a user could be manipulated to access source code if implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check configuration files are not downloadable directly from the service, and cannot be read and viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called handlers which manage the source code interpretation before sending it to the client. If those handlers are not properly configured, the plain source code could be sent as a default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.176">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3 infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This is only good enough to protect against PC to PC attacks. If flood is done using multiple sources or using hardware then this configuration may not be enough. The configuration will also cause denial of service to other users when under attack even from single source, as we are limiting based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above example we are limiting outgoing connections to port 80. This is useful when we can't completely block outgoing connections but we do not want it to become channel from where people start browsing net or downloading. The limit module can also be used in rate limiting incoming traffic for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by disabling the ICMP functionality of the targeted router, computer or other device. A network administrator can access the administrative interface of the device and disable its ability to send and receive any requests using the ICMP, effectively eliminating both the processing of the request and the Echo Reply. The consequence of this is that all network activities that involve ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can execute a Smurf attack (denial-of-service attack that floods a target system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without this safeguard in place attackers may be able to bypass or circumvent work-flows and checks allowing them to prematurely enter or skip required sections of the application potentially allowing actions/transactions to be completed without successfully completing the entire business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.684">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-662" name="Use a synchronised time source" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to correlate logs and data from different internal and external systems, and to preserve forensic quality of the logs, it is important a unified and trusted synchronized time source is used throughout the environment.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Servers should synchronize to an internal or external NTP server&lt;/li&gt;&lt;li&gt;The centralized source should in turn use (or be) a trusted central time source.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This control is critical in identifying application events (including attacks) through logging, and in conducting post-event analysis, and in particular to track the entire user (or attacker) journey through the system should it be compromised.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It is good practice to use the concept of Indicators of Compromise (IoC) which should be leveraged to detect possible situations in which the system has been compromised and give an appropriate response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is essential.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-08 Time Stamps" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/177-08_02_AU-08"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA AU-11 Audit Record Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/180-08_02_AU-11"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.795">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="56" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes the site in question completely inaccessible to all traffic, both malicious attack traffic and legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the ISP to protect other customers on its network from the adverse effects of DDoS attacks such as slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack. For Smurf attack a simple solution is to disable IP broadcasting addresses at each network router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0 254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4 address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to 192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route 50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:25.457">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.873">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Errors may occur when converting between differently coded character data.&amp;nbsp; There are two general types of encoding errors. If the byte sequence is not valid for the specified charset then the input is considered malformed. If the byte sequence cannot be mapped to an equivalent character sequence then an unmappable character has been encountered.
&lt;/div&gt;
&lt;div&gt;
  Special care should be taken when decoding untrusted byte data to ensure that malformed input or unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding errors can also occur, for example, encoding a cryptographic key containing malformed input for transmission will result in an error. Encoding and decoding errors typically result in data corruption.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation&lt;/b&gt;
&lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.</desc>
          <implementations/>
          <references>
            <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
          </references>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all application components are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.612">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk, regardless of the source or transport method. HTTP Parameter Pollution attacks result when parameters are added or inserted into requests, and are inappropriately or unsafely handled by the server. For example, injection of parameters into strings or cookies sent to the application can result in the variables being interpreted out of sequence, exploiting flaws in the business logic and flow.
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter, whereas the actual operation used the second occurrence.&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to the application in which those parameters are duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This whitelisting can also be achieved by applying regular expressions. The application should only allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes place. Redirections are usually indicated by the use of the "Location" HTTP header along with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify the input value which will be part of the Location header to redirect to domains which should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-08-03T12:59:26.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service itself.
    &lt;br&gt;
    &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this section are not directly related to source code, we separated it from the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.
&lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  This attack vector utilizes DNS entries pointing to Service Providers where the pointed sub-domain is currently not in use. Depending on the DNS-entry configuration and which Service Provider it points to, some of these services will allow unverified users to claim these sub-domains as their own.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL used inside the Service Provider.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Attack Scenario&lt;/b&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ol&gt;
   &lt;li&gt;Your company starts using a new service, eg an external Support Ticketing-service.&lt;/li&gt;
   &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg support.your-domain.com&lt;/li&gt;
   &lt;li&gt;Your company stops using this service but does not remove the sub-domain redirection pointing to the ticketing system.&lt;/li&gt;
   &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No verification is done by the Service Provider, and the DNS-setup is already correctly setup.&lt;/li&gt;
   &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company.&lt;/li&gt;
  &lt;/ol&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code returned by the service, and this code contains confidential information such as authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration files that can be downloaded from the service could also be leveraged to gain access to sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;If an application enforces an order in workflows, then attackers could attempt to bypass this order so that they can perform operations for which they are not authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-117">
                  <countermeasures>
                    <countermeasure ref="ASVS-8.8" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                    <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                    <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                    <countermeasure ref="CWE-662" mitigation="14"/>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                    <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                    <countermeasure ref="security-logging" mitigation="14"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                <countermeasure ref="CWE-662" mitigation="14"/>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                <countermeasure ref="security-logging" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-532">
                  <countermeasures>
                    <countermeasure ref="CWE-532" mitigation="70"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-779">
                  <countermeasures>
                    <countermeasure ref="LOG-RETENTION" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-532" mitigation="70"/>
                <countermeasure ref="LOG-RETENTION" mitigation="30"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="CS-Default">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                    <countermeasure ref="CWE-601" mitigation="25"/>
                    <countermeasure ref="DATA-VAL" mitigation="25"/>
                    <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                <countermeasure ref="CWE-601" mitigation="25"/>
                <countermeasure ref="DATA-VAL" mitigation="25"/>
                <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.
&lt;br /&gt;The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)
&lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here
&lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.
&lt;br /&gt;The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with the public role the ability to use the administration functionality.
&lt;br /&gt;The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-95">
                  <countermeasures>
                    <countermeasure ref="dyn-exec" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="dyn-exec" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.
&lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-15">
                  <countermeasures>
                    <countermeasure ref="configuration-integrity" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="configuration-integrity" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on the server side by modifying the logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on the code isolation, this event could grant the user access to system resources and data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="80"/>
                    <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="80"/>
                <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to exploit these vulnerabilities.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-116">
                  <countermeasures>
                    <countermeasure ref="same-encoding-parsers" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="same-encoding-parsers" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.
&lt;br&gt;This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
&lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to another specified URL. By modifying this URL value to point towards a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input and submitting it to applications not expecting or effective at validating this encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could potentially set fields on those objects that were not designed to be modified by the user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Expose" source="RULES" edited="false" owner="ddoughty" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
