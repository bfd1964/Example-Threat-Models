<?xml version="1.0" encoding="UTF-8"?>
<project ref="scenario-aws-cloud-application-service" name="Scenario - AWS Cloud Application Service" isSyncing="false" tags="partner, infrastructure, aws, scenario" modelUpdated="2022-05-16 10:55:16" workflowState="create-diagram" locked="true">
  <desc>&lt;p&gt;Acme Inc are a online retailer with a global presence, while they are based in the US; Europe is an important market as well as emerging markets across Africa, Middle East, Far East, South America and Australasia, They operate multiple brands, and websites. They aim to cut the cost of maintained their infrastructure by transitioning to the cloud, eventually operating the business entirely in the cloud.&lt;/p&gt; 
&lt;p&gt;They have chosen amazon web services as their cloud provider of choic&lt;/p&gt; 
&lt;p&gt;Their initial requirement is to threat model the AWS cloud infrastructure to support the deployment of their web application, the majority are 3-tier applications. Consisting of a Java-based server component, a web client (JavaScript on a react framework), and a postgres database. In the future, they plan on deploying mobile support for their application, and have many other applications that they will transition to the cloud, mostly in java. In the future they plan to take advantage of serverless capabilities, but at the moment the priority is to transition each application/web service into the cloud. Each application server includes basic features, user registration, &amp;nbsp;login, profile management, reset forgotten password, etc.&lt;/p&gt; 
&lt;p&gt;Acme wish to ensure that their application is as secure as possible, they were breached earlier in the year and had customer data exposed to 3&lt;sup&gt;rd&lt;/sup&gt; parties. They wish to ensure that both the application and the infrastructure design is secure, they want to promote collaboration between their engineering teams (both cloud and software development), systems architects, and security. Now they use Jira on-premises, although that will transition to Atlassian cloud as part of the transition to the cloud&lt;/p&gt; 
&lt;p&gt;Their reference architecture for the cloud infrastructure is&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span class="loader-wrapper"&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/web-application-hosting-best-practices/an-aws-cloud-architecture-for-web-hosting.html" target="_blank"&gt;&lt;span class="css-1p7ax5 e158gagu2" style="word-break: break-all;"&gt;&lt;span class="css-7h21dr e158gagu6" style="margin-right: 4px; position: relative; display: inline-block;"&gt;&lt;span class="css-klch0j e158gagu7" style="width: 14px; height: 0px; display: inline-block; opacity: 0;"&gt;&lt;/span&gt;&lt;img src="https://docs.aws.amazon.com/assets/images/favicon.ico"&gt;&lt;/span&gt;&lt;span class="smart-link-title-wrapper css-0 e158gagu8"&gt;An AWS Cloud architecture for web hosting - Web Application Hosting in the AWS Cloud&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The objective is to create one or more threat model describing their operational infrastructure, application.&lt;/p&gt;</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
    <trustZone ref="aws-cloud" uuid="a4ada984-0d91-40a2-8ca0-1ea53ea47efc" name="AWS Cloud" desc="Amazon Web Services" trustRating="80"/>
  </trustZones>
  <questions/>
  <assets>
    <asset type="" name="Credit Card Data" desc="Card holder data including the full PAN and CVV number." identifier="">
      <classification name="Cardholder data" desc="Credit card data under the remit of PCI" confidentiality="100" integrity="100" availability="30"/>
    </asset>
    <asset type="" name="Customer Data" desc="Data that uniquely identifies customers." identifier="">
      <classification name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity." confidentiality="80" integrity="80" availability="20"/>
    </asset>
    <asset type="" name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject') an identifiable person is one who can be identified, directly or indirectly, in particular by reference to an identification number or to one or more factors specific to his physical, physiological, mental, economic, cultural or social identity." identifier="">
      <classification name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity." confidentiality="80" integrity="80" availability="20"/>
    </asset>
    <asset type="" name="Protected Health Information" desc="Relates to the past, present, or future physical or mental health or condition of an individual; the provision of health care to an individual; or the past, present, or future payment for the provision of health care to an individual." identifier="">
      <classification name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity." confidentiality="80" integrity="80" availability="20"/>
    </asset>
  </assets>
  <settings>
    <issueTrackers>
      <jira>
        <fields/>
      </jira>
    </issueTrackers>
  </settings>
  <dataflows>
    <dataflow name="WAF -&gt; CF - CloudFront" ref="0116aa59-357b-4e44-a6f3-85d37a66110f" source="2daf4b18-82db-4ba1-ba2a-879b13e8db25" target="c8445554-6c2f-49ea-8929-009f8f97fe08">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="iOS Device Client -&gt; Route 53 - DNS Service" ref="386bf939-1afb-42d0-8e3a-090fc8f49812" source="ffdbe2f8-e69e-485c-9808-384029a1cbf4" target="3746854f-d677-4c95-9f51-6700241589f1">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="RDS - Primary -&gt; RDS - Secondary" ref="4c4e8f66-8940-4e1a-862d-35796179379b" source="ab440a87-f406-4c1e-9bdb-ca88bc2366c8" target="61bbb8a9-8cd7-456b-87c8-b759891c5da3">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="App - ELB -&gt; EC2 - AppServer - Primary" ref="4f9f4656-7b12-4ed2-a76c-c34d46eaacd3" source="5ccee78e-7c03-4846-9a8d-ccbd0ecc19f8" target="66ad869e-218c-42c9-aae9-f082fa1a64c0">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Web Client -&gt; Route 53 - DNS Service" ref="50eceef9-806c-4241-a96e-cad4bdac7bb7" source="58da99ff-97e7-441c-8327-b9b822456bcf" target="3746854f-d677-4c95-9f51-6700241589f1">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Web- ELB -&gt; EC2 - WebServer - Secondary" ref="73225805-f8c4-4059-a23e-c86a7fdb83f9" source="73ed3559-0fbe-45d3-a925-f875c94713a7" target="1b0022d2-f4cf-4563-9df0-f1d0513bc75d">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - WebServer - Primary -&gt; App - ELB" ref="74f597ea-6c85-4965-a51c-781b34ec1005" source="0ecb4ff7-3ff7-4110-9ae0-ac46dd700871" target="5ccee78e-7c03-4846-9a8d-ccbd0ecc19f8">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - AppServer - Primary -&gt; RDS - Primary" ref="80eb40f1-faf0-409d-9e72-91d02238aac6" source="a1c6d270-24d4-4836-97e6-e9b44600a98a" target="ab440a87-f406-4c1e-9bdb-ca88bc2366c8">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - WebServer - Secondary -&gt; App - ELB" ref="8674e71c-1679-4694-9348-49e9b13e4a83" source="1b0022d2-f4cf-4563-9df0-f1d0513bc75d" target="5ccee78e-7c03-4846-9a8d-ccbd0ecc19f8">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="App - ELB -&gt; EC2 - AppServer - Primary" ref="86f42cb4-3327-40c4-911a-de3f58db7ed4" source="5ccee78e-7c03-4846-9a8d-ccbd0ecc19f8" target="a1c6d270-24d4-4836-97e6-e9b44600a98a">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Route 53 - DNS Service -&gt; WAF" ref="8bc262a3-5e29-430c-9e83-85dbdf8b76b7" source="3746854f-d677-4c95-9f51-6700241589f1" target="f6a97412-17e9-40d3-bc1e-42d99be0ebc9">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Web- ELB -&gt; EC2 - WebServer - Primary" ref="99d4b149-5378-4389-9e79-28e53bfa9d40" source="73ed3559-0fbe-45d3-a925-f875c94713a7" target="0ecb4ff7-3ff7-4110-9ae0-ac46dd700871">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="CF - CloudFront -&gt; Web- ELB" ref="a0931fa5-8a73-4d2e-9e8c-5fd0b23701a0" source="c8445554-6c2f-49ea-8929-009f8f97fe08" target="73ed3559-0fbe-45d3-a925-f875c94713a7">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - AppServer - Primary -&gt; ElastiCache" ref="aea052c8-7394-46a3-849d-9088db48e1f0" source="66ad869e-218c-42c9-aae9-f082fa1a64c0" target="a0e687c9-f835-47fd-ac58-c8b7cb491a75">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - AppServer - Primary -&gt; Elastic File System (EFS)" ref="b322a187-b445-42b6-845e-73628aea74a3" source="66ad869e-218c-42c9-aae9-f082fa1a64c0" target="a8cd116e-31d0-43c0-9195-e9a2ba0c975f">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - WebServer - Primary -&gt; S3 - Simple Storage Service" ref="bae08469-58c9-4c6f-bb30-69d225626134" source="0ecb4ff7-3ff7-4110-9ae0-ac46dd700871" target="a2744674-cb96-4e31-a579-6c072c04e184">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Android Device Client -&gt; Route 53 - DNS Service" ref="bb9dfb6d-3658-4381-8b7b-3f1b52364ce9" source="4bdf9659-339e-4366-91f5-ed25d951af47" target="3746854f-d677-4c95-9f51-6700241589f1">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="RDS - Primary -&gt; ElastiCache" ref="c19b8b4f-ef8a-4bcb-aa54-1a81edb4fe9d" source="ab440a87-f406-4c1e-9bdb-ca88bc2366c8" target="a0e687c9-f835-47fd-ac58-c8b7cb491a75">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="WAF -&gt; Web- ELB" ref="e453d85b-7cd8-45ca-a4a7-c03dc8ddffa1" source="f6a97412-17e9-40d3-bc1e-42d99be0ebc9" target="73ed3559-0fbe-45d3-a925-f875c94713a7">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - AppServer - Primary -&gt; RDS - Primary" ref="f5c7821d-86e0-45ba-959c-3247a19cf2cd" source="66ad869e-218c-42c9-aae9-f082fa1a64c0" target="ab440a87-f406-4c1e-9bdb-ca88bc2366c8">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Route 53 - DNS Service -&gt; WAF" ref="f6f76c92-e610-4cc9-8bfa-e24fd97c886d" source="3746854f-d677-4c95-9f51-6700241589f1" target="2daf4b18-82db-4ba1-ba2a-879b13e8db25">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="PCF0001" value=""/>
    <customField ref="PCF0002" value=""/>
    <customField ref="PCF0003" value="bump"/>
    <customField ref="PCF0004" value=""/>
    <customField ref="PCF0005" value=""/>
    <customField ref="PCF0006" value=""/>
    <customField ref="PCF0007" value="Valid Dataflows"/>
    <customField ref="PCF0008" value="Valid Dataflows"/>
  </customFields>
  <components>
    <component uuid="04bad0d9-3a77-4b05-8a12-637ae9c58640" diagramComponentId="c21649b0-b86b-4002-b3f1-63d2fca66335" ref="0ecb4ff7-3ff7-4110-9ae0-ac46dd700871" name="EC2 - WebServer - Primary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="f04101d9-8ec2-48c8-85bd-8fdb78fef6f5" componentDefinitionRef="ec2" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.358">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing.
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;are encrypted.",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Source": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Owner": "AWS",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;},&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Scope": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon Unified CLI:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier.
  &lt;/div&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp;
   &lt;/div&gt;
   &lt;div&gt;
    &lt;br&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;b&gt;Impact&lt;/b&gt;:
&lt;div&gt;
 &lt;br&gt;
 &lt;div&gt;
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization.
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface::
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each NAT gateway is created in a specific Availability Zone and implemented with
  redundancy in that zone.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   and/or
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that
  are engineered to be isolated from failures in other Availability Zones. By launching
  instances in separate Availability Zones, you can protect your applications from the failure
  of a single location. AWS assigns a unique ID to each subnet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC).
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap.
  Some AWS regions have more than 2 availability zones and it is recommended to use more
  than 2 where possible.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The port for these inbound rules would depend on the Database engine used and the
  configured port.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The default values are:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt;
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt;
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt;
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt;
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt;
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When we create a default VPC, AWS does the following to set it up:
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt;
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt;
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt;
 &lt;/ol&gt;
  Label this Default VPC "Do Not Use".
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Impact&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just
  set a label to remind others not to use it.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt;
  &lt;ul&gt;
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;ul&gt;
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt;
 &lt;/ul&gt;
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;b&gt;Default Value&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
   The prescribed value is the default value.
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters
  &lt;/div&gt;
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name,
  &lt;/div&gt;
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                <countermeasure ref="aws-tier-6.9" mitigation="6"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a3cc5a4f-1be9-43d2-bf25-287c0a3ffe05" diagramComponentId="59fe94e8-b569-4a7a-ab96-a670279cc2c5" ref="bb1bce8d-9ea5-45c5-a157-5d128d955439" name="Shield" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="CD-SHIELD" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.115">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-SHIELD1" name="Control access to AWS Shield" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS Shield&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles).&lt;br&gt; Policies that are attached to an IAM identity are known as identity-based policies, and policies that are attached to a resource are known as resource-based policies. AWS Shield supports only identity-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Using identity-based policies (IAM policies) for AWS Shield&lt;/p&gt; 
&lt;p&gt;The following shows an example of a permissions policy:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2016-06-02", "Statement": [ { "Sid": "CreateFunctionPermissions", "Effect": "Allow", "Action": [ "shield:ListProtections", "shield:DescribeProtection", "shield:ListAttacks", "shield:DescribeAttack" ], "Resource": "*" }, { "Sid": "PermissionToPassAnyRole", "Effect": "Allow", "Action": [ "iam:PassRole" ], "Resource": "arn:aws:iam::account-id:role/*" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using identity-based policies (IAM policies) for AWS Shield" url="https://docs.aws.amazon.com/waf/latest/developerguide/shd-access-control-identity-based.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:14.093">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SHIELD1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SHIELD1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ec36a1cf-4fbd-4cb0-8bb1-4b351bc26583" diagramComponentId="01a3e7b5-88c1-4a05-a0d7-036fecff5969" ref="61bbb8a9-8cd7-456b-87c8-b759891c5da3" name="RDS - Secondary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="rds" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="10"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="10"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="10"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>Everyone can access the RDS database and obtain the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.300">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.300">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.300">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
                        attacker gains access to our systems and/or security systems</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.299">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
                        to them and exfiltrate the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.299">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no data backup retention policies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.299">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.299">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.299">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.298">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.198">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
  Customers can deploy RDS databases within a VPC through the configuration of:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt;
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt;
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt;
  &lt;li&gt;Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation: &lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --vpc-security-group-ids &amp;lt;data_tier_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are configured to use the Data Tier
                            Security Group:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.30" name="Do not allow the  RDS database to be publically accessible" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;Customers can deploy RDS databases within a VPC through the configuration of:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt;
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt;
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each publicly accessible DB instance, and make it private:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --no-publicly-accessible
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.30" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are publicly available:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.&lt;/p&gt;
&lt;p&gt;There are 6 database engines available for customers to run their database workloads on:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
 &lt;li&gt;MySQL&lt;/li&gt;
 &lt;li&gt;MariaDB&lt;/li&gt;
 &lt;li&gt;Oracle&lt;/li&gt;
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
 &lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;p&gt;aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --auto-minor-version-upgrade&lt;/p&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have Auto Minor Version Upgrade enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should be enabled.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Perform a snapshot of the DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds create-db-snapshot --db-snapshot-identifier db_snapshot --db-instance-identifier your_db_instance
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Confirm created snapshot is available (once snapshot process has completed):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all KMS Customer Managed Keys:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws kms list-aliases
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
   aws rds copy-db-snapshot --source-db-snapshot-identifier db_snapshot&amp;nbsp; --target-db-snapshot-identifier encrypted_db_snapshot --kms-key-id data_tier_kms_key
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Restore a snapshot to the target DB instance(from previous step) with the same values as original db instance with additional encrypted storage values:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds restore-db-instance-from-db-snapshot --db-instance-identifier your_db_instance --db-snapshot-identifier encrypted_db_snapshot
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: copy db snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
            <reference name="Amazon docs: copy snapshot" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
            <reference name="Amazon docs: create db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
            <reference name="Amazon docs: create db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
            <reference name="Amazon docs: encryption" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.3.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all current RDS instances and review the encryption status of the DB
                            instance:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,
                            EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}'
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
                        for hosting customer created databases which can allow for a reduction in operational burden on
                        customers.&lt;/p&gt;
                        &lt;p&gt;RDS event subscriptions provide notification of selected event changes at a DB security
                        group level.&lt;/p&gt;
                        &lt;p&gt;Event subscriptions are designed to provide incident notification of events which may
                        affect the network availability of the RDS instance.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
                        &lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new event subscription for DB Security Group events:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;aws rds create-event-subscription --subscription-name rds_event_subscription
                        --sns-topic-arn
                        sns_topic_arn
                        --source-type db-security-group --event-categories rds_events
                        --source-ids events_source_ids --enabled&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-security-group&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  RDS event subscriptions provide notification of selected event changes at DataBase engine level such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Deletion&lt;/li&gt;
  &lt;li&gt;Failure&lt;/li&gt;
  &lt;li&gt;Failover&lt;/li&gt;
  &lt;li&gt;Low Storage&lt;/li&gt;
  &lt;li&gt;Maintenance&lt;/li&gt;
 &lt;/ul&gt;
  Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a new event subscription for DB instance level events:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds create-event-subscription --subscription-name &amp;lt;rds_event_subscription&amp;gt; --sns-topic-arn sns_topic_arn --source-type &amp;lt;db-instance&amp;gt; --event-categories &amp;lt;rds_events&amp;gt; --source-ids &amp;lt;events_source_ids&amp;gt; --enabled
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create event subscription" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
            <reference name="Amazon docs: describe event subcriptions" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
            <reference name="Amazon docs: user event messages" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
          </references>
          <standards>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-instance&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each no-multi-az DB instance, and make it Multi-AZ enabled:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --multi-az
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are Multi-AZ enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{MultiAZ:MultiAZ,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.8" name="Set Backup retention policy on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Possible values are from 0 to 35 days.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each DB instance with a Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --backup-retention-period &amp;lt;backup_retention_period&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have a Backup Retention Period set (0 =
                            there is no backup retention in place, 7 = there are 7 daily backups retained):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.199">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in &amp;quot;References&amp;quot; section.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.200">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="database-publically-accesible">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="no-access-control-onrds">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.34" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                <countermeasure ref="aws-tier-6.34" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="no-notification-incident">
                  <countermeasures>
                    <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                    <countermeasure ref="aws-tier-4.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                <countermeasure ref="aws-tier-4.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="NOT_BACKUP_POLICIES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                <countermeasure ref="aws-tier-1.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="c725406b-d751-4fb0-9c3f-4a5b48ef0a0f" diagramComponentId="1a5fa705-9175-4492-84c3-7862e7d4a6fa" ref="ffdbe2f8-e69e-485c-9808-384029a1cbf4" name="iOS Device Client" desc="" library="OWASP-MASVS" parentComponentRef="" componentDefinitionRef="ios-device-client" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="20"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="20"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="20"/>
        <asset name="Credit Card Data" accessType="40"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="MOB-SECRET-STORED" name="API keys or secrets are stored on the device" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys or global secrets stored on the device can be easily extracted by an attacker by
                        analyzing the application (reverse engineering).</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.487">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-388" name="An error condition is not properly handled (Error Handling)" state="0" impact="100" issueId="" issueLink="">
          <desc>Errors and error handling represent a class of API. Errors related to error handling are so
                        common that they deserve a special kingdom of their own. As with "API Abuse", there
                        are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.126">
              <output/>
            </source>
            <references>
              <reference name="CWE-388: An error condition is not properly handled (Error Handling)" url="https://cwe.mitre.org/data/definitions/388.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-120" name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" state="0" impact="100" issueId="" issueLink="">
          <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        &lt;br /&gt;A buffer overflow condition exists when a program attempts to put more data in a
                        buffer than it can hold, or when a program attempts to put data in a memory area outside of the
                        boundaries of a buffer. The simplest type of error, and the most common cause of buffer
                        overflows, is the &amp;quot;classic&amp;quot; case in which the program copies the buffer
                        without restricting how much is copied. Other variants exist, but the existence of a classic
                        overflow strongly suggests that the programmer is not considering even the most basic of
                        security protections.
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.126">
              <output/>
            </source>
            <references>
              <reference name="CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" url="https://cwe.mitre.org/data/definitions/120.html"/>
              <reference name="Smashing The Stack For Fun And Profit" url="https://insecure.org/stf/smashstack.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-937" name="Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" state="0" impact="100" issueId="" issueLink="">
          <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable
                        components or libraries. Unfortunately, vulnerability reports for commercial or open source
                        software do not always specify exactly which versions of a component are vulnerable in a
                        standard, searchable way. Further, not all libraries use an understandable version numbering
                        system. Worst of all, not all vulnerabilities are reported to a central clearing house that is
                        easy to search, although sites like CVE and NVD are becoming easier to search.

                        Determining if you are vulnerable requires searching these databases, as well as keeping abreast
                        of project mailing lists and announcements for anything that might be a vulnerability. If one of
                        your components does have a vulnerability, you should carefully evaluate whether you are
                        actually vulnerable by checking to see if your code uses the part of the component with the
                        vulnerability and whether the flaw could result in an impact you care about.

                        Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial
                        to sophisticated malware designed to target a specific organization. Components almost always
                        run with the full privilege of the application, so flaws in any component can be serious.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-937: Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" url="https://cwe.mitre.org/data/definitions/937.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MOB-DATA" name="Data is stored into unprotected locations" state="0" impact="100" issueId="" issueLink="">
          <desc>When sensitive data is stored in unprotected locations, an attacker with access to the device
                        through physical access or a remote exploit, could gain access to it.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.487">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.126">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software provides an Applications Programming Interface (API) or similar interface for
                        interaction with external actors, but the interface includes a dangerous method or function that
                        is not properly restricted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references>
              <reference name="CWE-749: Exposed Dangerous Method or Function" url="https://cwe.mitre.org/data/definitions/749.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-530" name="Exposure of Backup File to an Unauthorized Control Sphere" state="0" impact="100" issueId="" issueLink="">
          <desc>A backup file is stored in a directory that is accessible to actors outside of the intended
                        control sphere.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-530: Exposure of Backup File to an Unauthorized Control Sphere" url="https://cwe.mitre.org/data/definitions/530.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-83" name="Improper Neutralization of Script in Attributes in a Web Page" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from
                        dangerous attributes within tags, such as onmouseover, onload, onerror, or style.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references>
              <reference name="CWE-83: Improper Neutralization of Script in Attributes in a Web Page" url="https://cwe.mitre.org/data/definitions/83.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-EMULATION-TOOLS" name="Inappropriate use of emulation tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of emulation tools are not detected by the app, and attackers can
                        leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS" name="Inappropriate use of reverse engineering tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of the reverse engineering tools is not detected by the app, and
                        attackers can leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.125">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.124">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-525-MOBILE" name="Information Exposure Through Browser Caching" state="0" impact="100" issueId="" issueLink="">
          <desc>The application should have an appropriate caching policy specifying the extent to which data
                        and form fields should be cached.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-525: Information Exposure Through Browser Caching" url="https://cwe.mitre.org/data/definitions/525.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-524" name="Information Exposure Through Caching" state="0" impact="100" issueId="" issueLink="">
          <desc>The application uses a cache to maintain a pool of objects, threads, connections, pages, or
                        passwords to minimize the time it takes to access them or the resources to which they connect.
                        If implemented improperly, these caches can allow access to unauthorized information or cause a
                        denial of service vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-524: Information Exposure Through Caching" url="https://cwe.mitre.org/data/definitions/524.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-215" name="Information Exposure Through Debug Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The application contains debugging code that can expose sensitive information to untrusted parties.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.124">
              <output/>
            </source>
            <references>
              <reference name="CWE-215: Information Exposure Through Debug Information" url="https://cwe.mitre.org/data/definitions/215.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-613" name="Insufficient Session Expiration" state="0" impact="100" issueId="" issueLink="">
          <desc>Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-613: Insufficient Session Expiration" url="https://cwe.mitre.org/data/definitions/613.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295-AUTH" name="Lack of TLS certificate validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.
                        Many communication channels can be "sniffed" by attackers during data transmission. For example,
                        network traffic can often be sniffed by any attacker who has access to a network interface. This
                        significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.124">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-489" name="Leftover Debug Code" state="0" impact="100" issueId="" issueLink="">
          <desc>The application can be deployed with active debugging code that can create unintended entry
                        points.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.123">
              <output/>
            </source>
            <references>
              <reference name="CWE-489: Leftover Debug Code" url="https://cwe.mitre.org/data/definitions/489.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MEMORY-LEAKAGE" name="Memory Leakage" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.123">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-329" name="Not Using a Random IV with CBC Mode" state="0" impact="100" issueId="" issueLink="">
          <desc>Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes
                        algorithms to be susceptible to dictionary attacks.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-329: Not Using a Random IV with CBC Mode" url="https://cwe.mitre.org/data/definitions/329.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="OUTDATED-LIBRARIES" name="Outdated libraries" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.123">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-656" name="Reliance on Security Through Obscurity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software uses a protection mechanism whose strength depends heavily on its obscurity, such
                        that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.122">
              <output/>
            </source>
            <references>
              <reference name="CWE-656: Reliance on Security Through Obscurity" url="https://cwe.mitre.org/data/definitions/656.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-323" name="Reusing a Nonce, Key Pair in Encryption" state="0" impact="100" issueId="" issueLink="">
          <desc>Nonces should be used for the present occasion and only once.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.926">
              <output/>
            </source>
            <references>
              <reference name="CWE-323: Reusing a Nonce, Key Pair in Encryption" url="https://cwe.mitre.org/data/definitions/323.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.488">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-226" name="Sensitive information is not cleared from memory" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not fully clear previously used information in a data structure, file, or
                        other resource, before making that resource available to a party in another control sphere.

                        This typically results from new data that is not as long as the old data, which leaves portions
                        of the old data still available. Equivalent errors can occur in other situations where the
                        length of data is variable but the associated data structure is not. If memory is not cleared
                        after use, it may allow unintended actors to read the data when the memory is reallocated.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.488">
              <output/>
            </source>
            <references>
              <reference name="CWE-226: Sensitive information is not cleared from memory" url="https://cwe.mitre.org/data/definitions/226.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-921" name="Storage of Sensitive Data in a Mechanism without Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores sensitive information in a file system or device that does not have
                        built-in access control.

                        While many modern file systems or devices utilize some form of access control in order to
                        restrict access to data, not all storage mechanisms have this capability. For example, memory
                        cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the
                        system. This can become a problem when sensitive data is stored in these mechanisms in a
                        multi-user environment, because anybody on the system can read or write this data. On Android
                        devices, external storage is typically globally readable and writable by other applications on
                        the device. External storage may also be easily accessible through the mobile device's USB
                        connection or physically accessible through the device's memory card port.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.488">
              <output/>
            </source>
            <references>
              <reference name="CWE-921: Storage of Sensitive Data in a Mechanism without Access Control" url="https://cwe.mitre.org/data/definitions/921.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100" issueId="" issueLink="">
          <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references>
              <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MOB-INFO-LEAK" name="The application leaks sensitive information" state="0" impact="100" issueId="" issueLink="">
          <desc>Information leakage is an application weakness in which an application reveals sensitive data,
                        such as technical details of the web application, environment, or user-specific data. Sensitive
                        data may be used by an attacker to exploit the target web application, its hosting network, or
                        its users. Therefore, leakage of sensitive data should be limited or prevented whenever
                        possible. Information leakage, in its most common form, is the result of one or more of the
                        following conditions: A failure to scrub out HTML/Script comments containing sensitive
                        information, improper application or server configurations, or differences in page responses for
                        valid versus invalid data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-321" name="Use of Hard-coded Cryptographic Key" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a hard-coded cryptographic key significantly increases the possibility that
                        encrypted data may be recovered.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references>
              <reference name="CWE-321: Use of Hard-coded Cryptographic Key" url="https://cwe.mitre.org/data/definitions/321.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100" issueId="" issueLink="">
          <desc>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-308" name="Use of Single-factor Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of single-factor authentication can lead to unnecessary risk of compromise when
                        compared with the benefits of a dual-factor authentication scheme.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references>
              <reference name="CWE-308: Use of Single-factor Authentication" url="https://cwe.mitre.org/data/definitions/308.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.927">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="MASVS-7.9" name="Activate the Free Security Features" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For Android:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate the Obfuscation of the code and strip unneeded debugging information.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;For iOS:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ARC (Automatic Reference Counting): memory management feature, adds retain and release messages when required.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Stack Canary: helps prevent buffer overflow attacks.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;PIE (Position Independent Executable): enables full ASLR for binary.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.6" name="Allow only the minimum set of protocol handlers required" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Configure the WebViews to allow only the minimum set of protocol handlers required (ideally, only https). Potentially dangerous handlers, such as file, tel and app-id, are disabled.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
            <reference name="OWASP MASVS - iOS - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the set of protocol handlers are deactivated.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.6" name="All random values are generated using a sufficiently secure random number generator" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Mobile SDKs offer standard implementations of RNG algorithms that produce numbers with
                        sufficient artificial randomness. We'll introduce the available APIs in the Android and iOS
                        specific sections.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Random Number Generation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-random-number-generation-mstg-crypto-6"/>
            <reference name="OWASP MASVS - iOS - Testing Random Number Generation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-random-number-generation-mstg-crypto-6"/>
          </references>
          <standards>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if the random keys are generated with a sufficiently secure random number
                            generator.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.757">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6" name="Anonymize all data that is sent to 3rd Party services" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data that is sent to 3rd Party services shall be anonymized, so no PII data is available that would allow the 3rd party to identify the user account. Also all other data, like IDs in an application that can be mapped to a user account or session should not be sent to a third party.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#determining-whether-sensitive-data-is-exposed-via-ipc-mechanisms-mstg-storage-6"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all data that is sent to 3rd Party services is anonymized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.2-4.3" name="API keys, tokens, and secrets should be generated dynamically to prevent disclosure" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Data hard-coded into the application may be exposed before installation. For example, API keys, cryptographic keys, or other secrets shipped in the application may be retrieved by a malicious party through examining the installer or its contents.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent interception or disclosure, API keys, tokens, and other secrets should be generated dynamically. If the secrets have to be agreed before the application is even run, a trusted credential interchange should happen on the first run. After the initial trusted credential interchange on the first run, the secrets should be saved to the OS provided secure stores, for example the iOS Keychain or Android Secure Preferences). 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Session Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#testing-stateful-session-management-mstg-auth-2"/>
          </references>
          <standards>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application source code and configuration files to look for hardcoded
                            secrets, API keys or similar.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Set up a proxy and proxy all application traffic through it.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Inspect the traffic for disclosure of secret keys.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.9" name="Apply 2FA Authentication on remote services" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.13" name="Apply application level payload encryption" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;As a defense in depth, next to having solid hardening of the communicating parties, application level payload encryption can be applied to further impede eavesdropping.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.10" name="Apply a step-up authentication for Transaction Signing with Push Notifications and PKI" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Transaction signing requires authentication of the user's approval of critical transactions. Asymmetric cryptography is the best way to implement transaction signing. The app will generate a public/private key pair when the user signs up, then registers the public key on the back end. The private key is securely stored in the device keystore.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To authorize a transaction, the back end sends the mobile app a push notification containing the transaction data. The user is then asked to confirm or deny the transaction. After confirmation, the user is prompted to unlock the Keychain (by entering the PIN or fingerprint), and the data is signed with user's private key. The signed transaction is then sent to the server, which verifies the signature with the user's public key. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Step-up Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#transaction-signing-with-push-notifications-and-pki"/>
          </references>
          <standards>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that when transaction information is accessed, a second step-up authentication is
                            shown and is used to authenticate for access to the transaction data.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.2" name="Avoid storing sensitive data in shared memory such as the SD card" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Most mobile devices and operating systems offer built in API's to store data in their encrypted stores, such as the Keychain on iOS.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Data stored in shared memory, such as a removable SD card, may be accessed by other applications on the device, or may be removed and accessed in a third party system.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not store sensitive or private data on shared or removable storage, such as SD cards. Where data is stored on shared but non removable storage, there is still a risk an attacker with physical access may be able to access the device storage and therefore the data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS provided secure storage for sensitive or private data.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing For Sensitive Data in Local Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2"/>
            <reference name="OWASP MASVS - iOS - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-local-data-storage-mstg-storage-1-and-mstg-storage-2"/>
          </references>
          <standards>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is processing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that this data is not stored on the SD card. This data should be kept to
                            the minimum possible for the application to run appropriately and should be stored on OS
                            provided secure-means (i.e. iOS keychain).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.11" name="Avoid usage of third-party keyboards when writing sensitive data" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Verify that the app prevents usage of custom third-party keyboards whenever sensitive data is entered.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Platform Interaction Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.808">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.6" name="Catch and handle the possible exceptions" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement a well-designed and unified scheme to handle exceptions. Make sure the application has centralized handlers for exceptions that result in similar behavior. This can be a static class for instance. For specific exceptions given the methods context, specific catch blocks should be provided.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the exceptions are well-designed and are catched and handled well.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.5" name="Check for weaknesses in 3rd party libraries" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#checking-for-weaknesses-in-third-party-libraries-mstg-code-5"/>
            <reference name="OWASP MASVS - iOS - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings"/>
          </references>
          <standards>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;about&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; or &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;EULA&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; section in which the copy-right statements are noted as required by the license of the third party library.&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.15" name="Clean local storage after several failed attempts to authenticate user" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The app's local storage should be wiped after an excessive number of failed authentication attempts.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that local storage is cleaned after failed attempts to authenticate</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4B" name="Clear caches of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the application is closed.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not allow the application to cache sensitive information outside of OS provided secure stores.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS controls to restrict thumbnails of the application where any sensitive information is displayed&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caches.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.10" name="Clear WebView's resources" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;A WebView's cache, storage, and loaded resources (JavaScript, etc.) should be cleared before the WebView is destroyed.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Platform Interaction Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.9" name="Create a mechanism to force updates on application" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanism is based on using the &lt;/span&gt;&lt;span&gt;&lt;code&gt;AppUpdateManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. Before that, other mechanisms were used, such as doing http calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase could be used to check for possible forced updates as well (see this &lt;/span&gt;&lt;/span&gt;&lt;a href="https://medium.com/@sembozdemir/force-your-users-to-update-your-app-with-using-firebase-33f1e0bcec5a" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;). Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;For iOS, enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates. The challenge with iOS however, is that Apple does not provide any APIs yet to automate this process, instead, developers will have to create their own mechanism, such as described at various &lt;/span&gt;&lt;/span&gt;&lt;a href="https://mobikul.com/show-update-application-latest-version-functionality-ios-app-swift-3/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blogs&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; which boil down to looking up properties of the app using &lt;/span&gt;&lt;span&gt;&lt;code&gt;http://itunes.apple.com/lookup\?id\&amp;lt;BundleId&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;span&gt; or third party libraries, such as &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/ArtSabintsev/Siren" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Siren&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.npmjs.com/package/react-native-appstore-version-checker" target="_blank"&gt;&lt;span&gt;&lt;span&gt;react-native-appstore-version-checker&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;. Most of these implementations will require a certain given version offered by an API or just "latest in the appstore", which means users can be frustrated with having to update the app, even though no business/security need for an update is truly there.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
            <reference name="OWASP MASVS - iOS - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span style="white-space: pre;"&gt;In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, see if you can play with the version number of a man-in-the-middled app and see how the backend responds to this (and if it is recorded at all for instance).&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.12" name="Create an authorization model on remote endpoints" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Authorization models should be defined and enforced at the remote endpoint.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.5-4.6" name="Create a strong password policy" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Password strength is a key concern when passwords are used for authentication. The password policy defines requirements to which end users should adhere. A password policy typically specifies password length, password complexity, and password topologies. A "strong" password policy makes manual or automated password cracking difficult or impossible.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;Automated password guessing attacks can be performed using a number of tools. For HTTP(S) services, using an interception proxy is a viable option. For example, you can use &lt;/span&gt; 
&lt;a href="https://portswigger.net/burp/help/intruder_using.html" target="_blank"&gt;&lt;span&gt;Burp Suite Intruder&lt;/span&gt;&lt;/a&gt; 
&lt;span&gt; to perform both wordlist-based and brute-force attacks.&lt;/span&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Execute the following steps for a wordlist based brute force attack with Burp Intruder:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Start Burp Suite Professional.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Create a new project (or open an existing one).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log into the mobile app and intercept the authentication request sent to the backend service.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right-click this request on the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Proxy/HTTP History&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab and select &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Send to Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; in the context menu.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab. For further information on how to use &lt;/span&gt;&lt;/span&gt;&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/using" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Burp Intruder&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; read the official documentation on Portswigger.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Make sure all parameters in the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Positions&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tabs are appropriately set and select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Load or paste the list of passwords you want to try. There are several resources available that offer password lists, like &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/fuzzdb-project/fuzzdb/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;FuzzDB&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;, the built-in lists in Burp Intruder or the files available in &lt;/span&gt;&lt;span&gt;&lt;code&gt;/usr/share/wordlists&lt;/code&gt;&lt;/span&gt;&lt;span&gt; on Kali Linux.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
  &lt;/ul&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Once everything is configured and you have a word-list selected, you're ready to start the attack!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.11" name="Create the functionality to verify the app uses a minimum device-access-security policy" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Different checks on the Android device can be implemented by querying different system preferences from Settings.Secure. The Device Administration API offers different mechanisms to create security aware applications, that are able to enforce password policies or encryption of the device.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-the-device-access-security-policy-mstg-storage-11"/>
            <reference name="OWASP MASVS - iOS - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-local-data-storage-mstg-storage-1-and-mstg-storage-2"/>
          </references>
          <standards>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app verifies the mobile device complies with the minimum
                            device-access-security policy.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.8" name="Create the mechanisms to control the lifecycle of cryptographic keys" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create the mechanisms to control the lifecycle of the cryptographic keys as it's shown in the key management standard as NIST SP 800-57. In this standard the usage period is determined as follows: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Originator Usage Period (OUP)&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Private Signature Key: 1-3 years&lt;/li&gt; 
   &lt;li&gt;Public Signature Key: Several years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authentication Key: &amp;lt;= 2 years&lt;/li&gt; 
   &lt;li&gt;Private Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Data Encryption Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Wrapping Key: &amp;lt;= 2 years&lt;/li&gt; 
   &lt;li&gt;Symmetric RBG keys: Determined by design&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Master Key: About 1 year&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Key Transport Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Key Transport Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Agreement Key 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authorization Key: &amp;lt;= 2 years&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Recipient Usage Period&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Private Signature Key:&amp;nbsp; -&lt;/li&gt; 
   &lt;li&gt;Public Signature Key: Several years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authentication Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Data Encryption Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Wrapping Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric RBG keys: -&lt;/li&gt; 
   &lt;li&gt;Symmetric Master Key: -&lt;/li&gt; 
   &lt;li&gt;Private Key Transport Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Key Transport Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Agreement Key 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authorization Key: &amp;lt;= 2 years&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cryptographic Key Length Recommendation" url="https://www.keylength.com/en/4/"/>
          </references>
          <standards>
            <standard ref="1.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="1.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify if lifecycle of cryptographic key checks are done.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.12" name="Create warnings to educate personnel" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create warning notifications to educate personnel who work with personally identifiable
                        information. These warnings are shown to the users when they use the app for first time.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Verifying User Education Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04i-testing-user-interaction#testing-user-education-mstg-storage-12"/>
          </references>
          <standards>
            <standard ref="2.12" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check when users access sensitive data, the app shows them security notifications with
                            tips on how to protect their personal data.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.7" name="Deny the access by default when an uncaught exception appears" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Deny the access by default to prevent the app crashing because of uncaught exception and to avoid unauthorized access.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the application denies access to the session when the exceptions appear.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.8" name="Disable auto-backup for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The auto backup attribute is enabled by default, this attribute shall be disabled for the following cases: Sensitive information should not be sent in clear text to the cloud. Either, avoid storing the information in the first place, or encrypt the information at rest, before sending it to the cloud. Files can also be excluded from Auto Backup, in case they should not be shared in the Cloud.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data in Backups" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-backups-for-sensitive-data-mstg-storage-8"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in Backups" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-backups-for-sensitive-data-mstg-storage-8"/>
          </references>
          <standards>
            <standard ref="2.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not saved into a backup by the Auto-Backup functionality.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4C" name="Disable autocompletion of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Auto-completion or pre-filling of sensitive details by the mobile device or browser implies that those details are stored in plaintext or a reversible format. This may be in violation of security best-practice, or application security expectations. T 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  he application should attempt to mitigate this risk by requesting the browser does not cache or store sensitive data such as credit card PANs and CV2s, personally identifiable information (PII) or other secret data. All forms handling sensitive data should be protected using the autocomplete=off HTML directive at the form or field level. Issue browser specific directives to request auto-fill or completion is disabled; The AUTOCOMPLETE attribute should be set to "OFF".&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Mobile applications must not store or offer to autocomplete sensitive data such as authentication credentials, credit card numbers, or sensitive personal details. Where data is stored locally, system provided stores should be used; for example, iOS and Android provide password stores and digital wallets. It should be noted that compliance with these requests on the client-side is optional, and many browsers and clients override these directives to use operating system, browser, or third party password managers or key-safes to store secrets. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;The autocomplete attribute is restricted to WebViews being used within the mobile
                            client.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check what WebViews the application uses.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check if the form fields which contain sensitive data and are included in these
                            WebViews have the autocomplete='off' attribute. If this attribute is not set, then this test
                            should be regarded as having failed.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.5" name="Disable JavaScript by default in a WebView if it is not necessary" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>JavaScript is disabled by default in a WebView and if not needed shouldn't be enabled. This reduces the attack surface and potential threats to the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-javascript-execution-in-webviews-mstg-platform-5"/>
            <reference name="OWASP MASVS - iOS - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-ios-webviews-mstg-platform-5"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Search in the code the following instruction:
                            webview.getSettings().setJavaScriptEnabled(true);&lt;/li&gt;
                            &lt;li&gt;Check that this instruction doesn't exist in the code.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For iOS:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the JavaScript is disabled and configured as following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            #import &amp;quot;ViewController.h&amp;quot;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            #import @interface ViewController () @property(strong,nonatomic) WKWebView *webView;
                            &lt;/div&gt;
                            &lt;div&gt;
                            @end @implementation ViewController - (void)viewDidLoad { NSURL *url = [NSURL
                            URLWithString:@&amp;quot;http://www.example.com/&amp;quot;];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            NSURLRequest *request = [NSURLRequest requestWithURL:url];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKPreferences *pref = [[WKPreferences alloc] init]; //Disable javascript execution: [pref
                            setJavaScriptEnabled:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [pref setJavaScriptCanOpenWindowsAutomatically:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [conf setPreferences:pref]; _webView = [[WKWebView
                            alloc]initWithFrame:CGRectMake(self.view.frame.origin.x,85, self.view.frame.size.width,
                            self.view.frame.size.height-85) configuration:conf] ;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [_webView loadRequest:request];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [self.view addSubview:_webView]; }
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.5" name="Disable keyboard cache on sensitive data text inputs" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A general best practice is overwriting different functions in the input field to disable the clipboard specifically for it. Also longclickable should be deactivated for the input field.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the clipboard is disabled when sensitive data is used.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.6-IOS-UIWEBVIEW" name="Disable the UIWebView for iOS platform" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>UIWebView is deprecated and should not be used. Make sure that either WKWebView or SafariViewController are used to embed web content:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;WKWebView is the appropriate choice for extending app functionality, controlling displayed content (i.e., prevent the user from navigating to arbitrary URLs) and customizing. SafariViewController should be used to provide a generalized web viewing experience. Note that SafariViewController shares cookies and other website data with Safari.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;WKWebView comes with several security advantages over UIWebView:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The JavaScriptEnabled property can be used to completely disable JavaScript in the WKWebView. This prevents all script injection flaws.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;The JavaScriptCanOpenWindowsAutomatically can be used to prevent JavaScript from opening new windows, such as pop-ups.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;The hasOnlySecureContent property can be used to verify resources loaded by the WebView are retrieved through encrypted connections.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;WKWebView implements out-of-process rendering, so memory corruption bugs won't affect the main app process.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - iOS - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that UIWebView is not used to embed web content.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.808">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.9" name="Do not allow sensitive data to be written to log files or thumbnail/background images" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used. Sensitive data should not be logged by the application. Where the data is relevant from a support perspective, it should be masked or otherwise obfuscated, in accordance with industry or legislative requirements where appropriate (e.g. PAN masking dictated by the PCI DSS standards). Use OS controls to restrict thumbnails of the application where any sensitive information is displayed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Information in Auto-Generated Screenshots" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Information in Auto-Generated Screenshots" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-auto-generated-screenshots-for-sensitive-information-mstg-storage-9"/>
          </references>
          <standards>
            <standard ref="2.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Browse the application focusing on the sections which handle sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Obtain the log files from the device and check there is no sensitive data on them.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For background images, force the application to go to the background and
                            foreground several times whilst managing sensitive information.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Look for the screenshots within the mobile file system and check if the screenshot
                            contains sensitive information. If so, the test should fail.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.1" name="Do not hard-code encryption keys when using symmetric encryption" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The security of symmetric encryption and keyed hashes (MACs) depends on the secrecy of the key. If the key is disclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted data they helped create. Developers often make the mistake of encrypting locally stored data with a static, hard-coded encryption key and compiling that key into the app. This makes the key accessible to anyone who can use a disassembler. Ensure that no keys or passwords are stored within the source code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note that hard-coded keys are problematic even if the source code is obfuscated since obfuscation is easily bypassed by dynamic instrumentation. If the app is using two-way SSL (both server and client certificates are validated), make sure that:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The password to the client certificate isn't stored locally or is locked in the device Keychain.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The client certificate isn't shared among all installations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If the app relies on additional encrypted containers stored in app data, check how the encryption key is used.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If a key-wrapping scheme is used, ensure that the master secret is initialized for each user or the container is re-encrypted with new key.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If you can use the master secret or previous password to decrypt the container, check how password changes are handled.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-purposes-of-keys-mstg-crypto-5"/>
            <reference name="OWASP MASVS - iOS - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-key-management-mstg-crypto-1-and-mstg-crypto-5"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M5: Insufficient Cryptography" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the symmetric encryption key is not stored locally with a static, hard-coded
                            encryption key and compiling that key into the app.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.5" name="Do not re-use the same cryptographic key for multiple purposes" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Make sure that symmetric keys are not reused for multiple purposes. A new symmetric key should be generated if it's used in a different context.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-purposes-of-keys-mstg-crypto-5"/>
            <reference name="OWASP MASVS - iOS - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-key-management-mstg-crypto-1-and-mstg-crypto-5"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M5: Insufficient Cryptography" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the same cryptographic key is not used for several purposes.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4" name="Do not share sensitive data with third parties unless it is a necessary part of the architecture" issueId="" issueLink="" platform="" cost="1" risk="71" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not share sensitive data with third parties unless it is a necessary part of the architecture, because sensitive data such as credentials or Personal Identifiable Information can be intercepted in transport.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Sent To Third Parties" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4"/>
            <reference name="OWASP MASVS - iOS - Testing Whether Sensitive Data Is Sent To Third Parties" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not shared with third parties when this data is not a part
                            of the architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.10" name="Do not use the SSAID for 'device binding'" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use the SSAID for device binding because the behavior of the SSAID has changed since
                        Android O and the behavior of MAC addresses have changed in Android N.

                        Google has set a new set of recommendations in their SDK documentation regarding identifiers as
                        well. Because of this new behavior, we recommend developers not rely on the SSAID alone, as the
                        identifier has become less stable. For instance: The SSAID might change upon a factory reset or
                        when the app is reinstalled after the upgrade to Android O. Please note that there are a number
                        of devices which have the same ANDROID_ID and/or have an ANDROID_ID that can be overridden.
                        Also, the Build.Serial was often used but now apps targeting Android O will get "UNKNOWN" when
                        they request the Build.Serial.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-device-binding-mstg-resilience-10"/>
            <reference name="OWASP MASVS - iOS - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#device-binding-mstg-resilience-10"/>
          </references>
          <standards>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Dynamic Analysis using an Emulator.&lt;/li&gt;
                            &lt;li&gt;Run the application on an Emulator.&lt;/li&gt;
                            &lt;li&gt;Make sure you can raise the trust in the instance of the application (e.g.
                            authenticate).&lt;/li&gt;
                            &lt;li&gt;Retrieve the data from the Emulator. This has a few steps:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ol&gt;
                            &lt;ol&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the contents of cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;exit the current user&lt;/li&gt;
                            &lt;li&gt;copy the contents of /dat/data//cache &amp;amp; shared-preferences to the sdcard&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;use ADB or the DDMS to pull the contents&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install the application on another Emulator&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&amp;nbsp;Overwrite the data from step 3 in the data folder of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the contents of step 3 to the sdcard of the second emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the folders cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the older contents of the sdcard to /dat/data//cache &amp;amp;
                            shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Can you continue in an authenticated state? If so, then binding might not be
                            working properly.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.3" name="Don't write any sensitive data on logs" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online), and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information, may expose the data to attackers or malicious applications. Log files can be created in several ways.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;The following list includes two classes that are available for Android:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Log Class&lt;/li&gt; 
 &lt;li&gt;Logger Class&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Use a centralized logging class and mechanism and remove logging statements from the production release because other applications may be able to read them.&lt;/p&gt; 
&lt;p&gt;The following list shows the methods available on iOS:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NSLog Method&lt;/li&gt; 
 &lt;li&gt;printf-like function&lt;/li&gt; 
 &lt;li&gt;NSAssert-like function&lt;/li&gt; 
 &lt;li&gt;Macro&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage"/>
            <reference name="OWASP MASVS - iOS - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
 &lt;li&gt;Review app logs in search of sensitive data&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.11" name="Encrypt and pack all executable files and libraries belonging to the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that all executable files and libraries belonging to the app are encrypted on the file level and/or important code and data segments inside the executables are encrypted or packed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all executable files and libraries belonging to the app are encrypted or
                            packed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.14" name="Encrypt sensitive data stored locally" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If sensitive data is still required to be stored locally, it should be encrypted using a key derived from hardware backed storage which requires authentication</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not stored in plain text.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.13" name="Ensure sensitive data is not stored locally on the mobile device" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>No sensitive data should be stored locally on the mobile device. Instead, data should be retrieved from a remote endpoint when needed and only be kept in memory.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if any sensitive data is stored on the device and analyze if it is necessary.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.5" name="Ensure that each critical operation requires at least one additional channel (e.g., SMS, e-mail, or token)" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identify all of the tested application's critical operations (e.g., user enrollment, account
                        recovery, and money transfer) and make sure that critical operations enforce the use of at least
                        one additional channel to confirm user actions. These channels must not be bypassed when
                        executing critical operations. The following are examples of additional verification channels:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Token (e.g., RSA token, yubikey);&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Push notification (e.g., Google Prompt);&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;SMS;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;E-mail;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Data from another website you visited or scanned;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Data from a physical letter or physical entry point (e.g., data you receive only after
                        signing a document at a bank).&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;If you're going to implement an additional factor to verify the user's identity,
                        consider Infobip 2FA library or one-time passcodes (OTP) via Google Authenticator.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying that Critical Operations Use Secure Communication Channels" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication"/>
            <reference name="OWASP MASVS - iOS - Verifying that Critical Operations Use Secure Communication Channels" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication"/>
          </references>
          <standards>
            <standard ref="5.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.7" name="Ensure that the app responds correctly against tampering, debugging and emulation" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the app implements multiple different responses to tampering, debugging and emulation,
                        including stealthy responses that don't simply terminate the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05c-reverse-engineering-and-tampering"/>
            <reference name="OWASP MASVS - iOS - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06c-reverse-engineering-and-tampering"/>
          </references>
          <standards>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app implements multiple different responses to tampering, debugging and
                            emulation, including stealthy responses that don't simply terminate the app.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.6" name="Ensure the app only depends on up-to-date connectivity and security libraries" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Android relies on a security provider to provide SSL/TLS-based connections. The problem with this kind of security provider (one example is OpenSSL), which comes with the device, is that it often has bugs and/or vulnerabilities. To avoid known vulnerabilities, developers need to make sure that the application will install a proper security provider. Since July 11, 2016, Google has been rejecting Play Store application submissions (both new applications and updates) that use vulnerable versions of OpenSSL.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Security Provider" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-the-security-provider-mstg-network-6"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right click the highlighted code and select &lt;/span&gt;&lt;span&gt;&lt;code&gt;Evaluate Expression&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/span&gt;&lt;span&gt; and press enter.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Check the providers and try to find &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which should be the new top-listed provider.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you do not have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Use Xposed to hook into the &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; package, then hook into &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security.Security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; with the method &lt;/span&gt;&lt;span&gt;&lt;code&gt;getProviders&lt;/code&gt;&lt;/span&gt;&lt;span&gt; (with no arguments). The return value will be an array of &lt;/span&gt;&lt;span&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Determine whether the first provider is &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-KEY-LENGTH" name="Ensure the key length fulfills accepted industry standards" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Even the most secure encryption algorithm becomes vulnerable to brute-force attacks when that
                        algorithm uses an insufficient key size. Ensure the key length fulfills accepted industry
                        standards.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the key length is accepted by industry standards.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.4" name="Ensure the logout functionality terminates the session" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The purpose of this test case is verifying logout functionality and determining whether it effectively terminates the session on both client and server and invalidates a stateless token.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid authentication information can continue to use it and hijack a user's account.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Many mobile apps don't automatically log users out. There can be various reasons, such as: because it is inconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still have a logout function, and it should be implemented according to best practices, destroying all locally stored tokens or session identifiers. If session information is stored on the server, it should also be destroyed by sending a logout request to that server. In case of a high-risk application, tokens should be blacklisted. Not removing tokens or session identifiers can result in unauthorized access to the application in case the tokens are leaked. Note that other sensitive types of information should be removed as well, as any information that is not properly cleared may be leaked later, for example during a device backup.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Use an interception proxy for dynamic application analysis and execute the following steps to check whether the logout is implemented properly:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log in to the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Access a resource that requires authentication, typically a request for private information belonging to your account.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log out of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Try to access the data again by resending the request from step 2.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;If the logout is correctly implemented on the server, an error message or redirect to the login page will be sent back to the client. On the other hand, if you receive the same response you got in step 2, the token or session ID is still valid and hasn't been correctly terminated on the server.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.4" name="Frequently review the used cryptographic protocols and controls to ensure they are not deprecated" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the cryptographic protocols or algorithms used are widely considered suitable for
                        security purposes. Frequently review all cryptographic protocols and algorithms to verify they
                        are not deprecated.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the cryptographic protocols or algorithms used are not deprecated for security
                            purposes.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.11" name="Implement a device blocking functionality" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For applications which require L2 protection, the MASVS states that they should inform the user about all login activities within the app with the possibility of blocking certain devices. This can be broken down into various scenarios:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides a push notification the moment their account is used on another device to notify the user of different activities. The user can then block this device after opening the app via the push-notification.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login. If the previous session was with a different configuration (e.g. location, device, app-version) compared to the current configuration, then the user should have the option to report suspicious activities and block devices used in the previous session.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login at all times.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application has a self-service portal in which the user can see an audit-log. This allows the user to manage the different devices that are logged in.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The developer can make use of specific meta-information and associate it to each different activity or event within the application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-information may include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Device: The user can clearly identify all devices where the app is being used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Date and Time: The user can clearly see the latest date and time when the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Location: The user can clearly identify the latest locations where the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application can provide a list of activities history which will be updated after each sensitive activity within the application. The choice of which activities to audit needs to be done for each application based on the data it handles and the level of security risk the team is willing to have. Below is a list of common sensitive activities that are usually audited:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Login attempts&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Password changes&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Personal Identifiable Information changes (name, email address, telephone number, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Sensitive activities (purchase, accessing important resources, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Consent to Terms and Conditions clauses&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Paid content requires special care, and additional meta-information (e.g., operation cost, credit, etc.) might be used to ensure user's knowledge about the whole operation's parameters.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. payed content access, given consent to Terms and Conditions clauses, etc.) in order to prove that a specific transaction was in fact performed (integrity) and by whom (authentication).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In all cases, you should verify whether different devices are detected correctly. Therefore, the binding of the application to the actual device should be tested. In iOS, a developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which is related to the bundle ID: the moment you change a bundle ID, the method will return a different value. When the app is ran for the first time, make sure you store the value returned by&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the KeyChain, so that changes to it can be detected at an early stage.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In Android, the developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;till Android 8.0 (API level 26) to identify an application instance. Note that starting at Android 8.0 (API level 26),&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is no longer a device unique ID. Instead, it becomes scoped by the combination of app signing key, user and device. So validating&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for device blocking could be tricky for these Android versions. Because if an app changes its signing key, the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;will change and it won't be able to recognize old users devices. Therefore, it's better to store the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;encrypted and privately in a private a shared preferences file using a randomly generated key from the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;AndroidKeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and preferably AES_GCM encryption. The moment the app signature changes, the application can check for a delta and register the new&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. The moment this new ID changes without a new application signing key, it should indicate that something else is wrong. Next, the device binding can be extended by signing requests with a key stored in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Keychain&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for iOS and in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Android can reassure strong device binding. You should also test if using different IPs, different locations and/or different time-slots will trigger the right type of information in all scenarios.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Lastly, the blocking of the devices should be tested, by blocking a registered instance of the app and see if it is then no longer allowed to authenticate. Note: in case of an application which requires L2 protection, it can be a good idea to warn a user even before the first authentication on a new device. Instead: warn the user already when a second instance of the app is registered.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.8" name="Implement biometric authentication" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement biometric authentication that is not event-bound (i.e. using an API that simply returns "true" or "false"). Instead, ensure it is based on unlocking the keychain/keystore and does not provide information about the methods and processes of authentication.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Biometric Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05f-testing-local-authentication#testing-biometric-authentication-mstg-auth-8"/>
            <reference name="OWASP MASVS - iOS - Testing Biometric Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06f-testing-local-authentication"/>
          </references>
          <standards>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Test for Android Device:
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use runtime instrumentation to bypass fingerprint authentication on the client.
                            For example, use Frida to call the onAuthenticationSucceeded callback method directly.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the external instrumentation cannot bypass the authentication method.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;Test for iOS Device:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;On a jailbroken device tools like Swizzler2 can be used to bypass
                            LocalAuthentication.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Swizzler uses Frida to instrument the evaluatePolicy function so that it returns
                            True even if authentication was not successfully performed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install Swizzler2 and follow the steps below to activate this feature:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Settings-&amp;gt;Swizzler&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Inject Swizzler into Apps&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Log Everything to Syslog&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Log Everything to File&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enter the submenu &amp;quot;iOS Frameworks&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;LocalAuthentication&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enter the submenu &amp;quot;Select Target Apps&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable the target app&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Close the app and start it again&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;When the TouchID prompt shows click &amp;quot;cancel&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the application flow continues without requiring the touchID then the bypass
                            has worked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Alternatively, you can use objection to bypass TouchID (this also works on a
                            non-jailbroken device), patch the app, or use Cycript or similar tools to instrument the
                            process.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.3-5.4" name="Implement Certificate pinning" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Certificate pinning is the process of associating the backend server with a particular X509 certificate or public key, instead of accepting any certificate signed by a trusted certificate authority. A mobile app that stores ("pins") the server certificate or public key will subsequently only establish connections to the known server. Verify that the server certificate is pinned. Pinning can be implemented in multiple ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Including server's certificate in the application bundle and performing verification on each connection. This requires an update mechanism whenever the certificate on the server is updated Limiting certificate issuer to e.g. one entity and bundling the intermediate CA's public key into the application. In this way we limit the attack surface and have a valid certificate.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Owning and managing your own PKI. The application would contain the intermediate CA's public key. This avoids updating the application every time you change the certificate on the server, due to e.g. expiration.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Note that using your own CA would cause the certificate to be self-singed. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Custom Certificate Stores and SSL Pinning" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4"/>
            <reference name="OWASP MASVS - iOS - Testing Custom Certificate Stores and SSL Pinning" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-3-and-mstg-network-4"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the Certificate pinning is implemented correctly.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.1" name="Implement detection and response functionalities for root detection" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement detection and response functionalities to detect rooted devices and if the device is rooted, the app shall respond in two ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The app notifies the user that their device is rooted and it's not secure to continue with the app.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Terminate the session and the app, because sensitive data is vulnerable.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-root-detection-mstg-resilience-1"/>
            <reference name="OWASP MASVS - iOS - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#jailbreak-detection-mstg-resilience-1"/>
          </references>
          <standards>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that the app has two or more functionalities with independent methods to
                            detect a rooted device.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that if the device is rooted, the user is alerted or the app is terminated.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.3" name="Implement functionality to alert when the app code changes" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to detect, notify and respond when the app is modified by executable files or by anti-debugging tools within its own sandbox. When the injection is detected the app shall alert the user and terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For the application source integrity checks, run the app on the device in an
                            unmodified state and make sure that everything works.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then apply simple patches to the classes.dex and any .so libraries contained in
                            the app package. Re-package and re-sign the app.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app alerts the user and/or terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.619">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.6" name="Implement functionality to detect and respond to, modifications of process memory" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect &amp;quot;hostile&amp;quot; code in its memory and respond
                        accordingly. Controls in this category verify the integrity of the app's own memory space, with
                        the goal of protecting against memory patches applied during runtime. This includes unwanted
                        changes to binary code or bytecode, functions pointer tables, and important data structures, as
                        well as rogue code loaded into process memory.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        Integrity can be verified either by:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Comparing the contents of memory, or a checksum over the contents, with known good
                        values.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Searching memory for signatures of unwanted modifications.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Disable all file-based detection of reverse engineering tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then inject code using Xposed, Frida and Substrate, and attempt to install native
                            hooks and Java method hooks.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the app detects the &amp;quot;hostile&amp;quot; code in its memory and
                            responds accordingly.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.619">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.5" name="Implement functionality to detect if the app is being run inside an emulator" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create and implement functionality to detect when the app is being run inside an emulator. If
                        the app is running inside an emulator, the app shall terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
          </references>
          <standards>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Install and run the app within an emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app detects this and terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.619">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.4" name="Implement functionality to detect the presence of widely used reverse engineering tools" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect the presence of widely used reverse engineering tools, such as
                        code injection tools, hooking frameworks and debugging servers. If any reverse engineering tool
                        is detected, the app shall force termination of the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
            <reference name="OWASP MASVS - iOS - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
          </references>
          <standards>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Launch the app systematically with various apps and frameworks installed, such as the
                            following:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Substrate for Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Xposed&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Frida&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Introspy-Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Drozer&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;RootCloak&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Android SSL Trust Killer&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;The app should alert the user and/or terminate the app.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.619">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.2" name="Implement functionality to notify when debugging mechanisms are presented within the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement anti-debugging mechanisms to prohibit debug mode being activated. Anti-debugging
                        features can be preventive or reactive. As the name implies, preventive anti-debugging
                        techniques prevent the debugger from attaching in the first place, while reactive techniques
                        attempt to detect whether a debugger is present and react to it in some way (e.g. terminating
                        the app, or triggering some kind of hidden behavior).&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The &amp;quot;more-is-better&amp;quot; rule applies: To maximize effectiveness, defenders
                        combine multiple methods of prevention and detection which operate on different API layers and
                        are distributed throughout the app.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
            <reference name="OWASP MASVS - iOS - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
          </references>
          <standards>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check for the presence of anti-debugging mechanisms and verify if with the following
                            criteria the anti-debugging mechanisms are bypassed:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Attaching JDB and ptrace based debuggers either fails or causes the app to
                            terminate or malfunction&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Multiple detection methods are scattered throughout the app (as opposed to putting
                            everything into a single method or function);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The anti-debugging defenses operate on multiple API layers (Java, native library
                            functions, Assembler/system calls);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The mechanisms show some level of originality (vs. copy/paste from StackOverflow
                            or other sources);&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.7" name="Implement functionality to terminate the session at the remote endpoint after a predefined period of inactivity and access tokens expire" issueId="" issueLink="" platform="" cost="1" risk="87" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>In most popular frameworks, you can set the session timeout via configuration options. This parameter should be set according to the best practices specified in the framework documentation. The recommended timeout may be between 10 minutes and two hours, depending on the app's sensitivity.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing the Session Timeout" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#testing-session-timeout-mstg-auth-7"/>
          </references>
          <standards>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that sessions are terminated at the remote endpoint after a predefined period of
                            inactivity.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.4" name="Insert the condition DEVELOPER-MODE to remove the debugging code, log verbose errors or debugging messages in the production version" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Insert the policy in the if statement with DEVELOPER_MODE as condition. The DEVELOPER_MODE has
                        to be disabled for release build in order to disable StrictMode too.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove the debugging code, log verbose errors or debugging messages in the production version.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Debugging Code and Verbose Error Logging" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-code-and-verbose-error-logging-mstg-code-4"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that there is only one method to activate the DEVELOPMENT_MODE.&lt;/li&gt;
                            &lt;li&gt;Check that the debugging code was removed.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.7" name="Mask sensitive data when the data is shown in the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Many apps require users to enter several kinds of data to, for example, register an account or make a payment. Sensitive data may be exposed if the app doesn't properly mask it, when displaying data in clear text. Masking of sensitive data, by showing asterisk or dots instead of clear text should be enforced within an app's activity to prevent disclosure and mitigate risks such as shoulder surfing.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data Disclosure Through the User Interface" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data Disclosure Through the User Interface" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#checking-for-sensitive-data-disclosed-through-the-user-interface-mstg-storage-7"/>
          </references>
          <standards>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that when you introduce sensitive data into the app such as passwords or PIN, this
                            information is masked.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.9-8.12" name="Obfuscate all executable files, libraries, important code and data segments" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Obfuscation is the process of transforming code and data in order to make it more difficult to comprehend. It is an integral part of every software protection scheme. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If the goal of obfuscation is to protect sensitive computations, an obfuscation scheme is used that is both appropriate for the particular task and robust against manual and automated de-obfuscation methods, considering currently published research. The effectiveness of the obfuscation scheme must be verified through manual testing. Note that hardware-based isolation features are preferred over obfuscation whenever possible. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Attempt to decompile the byte-code, disassemble any included library files, and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;meaningful identifiers, such as class names, method names, and variable names, have been discarded,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;string resources and strings in binaries are encrypted,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;code and data related to the protected functionality is encrypted, packed, or otherwise concealed.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.7" name="Only JavaScript provided with the app code is allowed" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If native methods of the app are exposed to a WebView, verify that the WebView only renders JavaScript contained within the app package.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Java Objects Are Exposed Through WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7"/>
          </references>
          <standards>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Produce a JavaScript payload.
                            - Inject it into the file that the app is requesting. The injection could be done either
                            through a MITM attack or by directly modifying the file in case it is stored on external
                            storage. The whole process could be done through Drozer that uses weasel (MWR's advanced
                            exploitation payload) which is able to install a full agent, injecting a limited agent into
                            a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).
                            - Check that only the JavaScript provided with the app is allowed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.10" name="Overwrite data in memory before release" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Memory chunks released by an application are not actively overwritten, they are simply de-referenced with the data left until the memory is reallocated and used by another process. As such, sensitive data that is stored in memory may be exposed to an attacker with the ability to inspect that memory; for example through use of an uninitialized variable or other process.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Overwrite memory with zeros or random data before release.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Pay particular attention to sensitive data, such as passwords or other credentials, or sensitive personal information. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data in Memory" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#checking-memory-for-sensitive-data-mstg-storage-10"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in Memory" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-memory-for-sensitive-data-mstg-storage-10"/>
          </references>
          <standards>
            <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the parts of the code that handles authentication and very sensitive data
                            (i.e. credit card data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that the buffers holding that data are overwritten with zeros and freed as
                            soon as they are not needed anymore.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.1" name="Perform authentication process on remote services" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If the app provides users access to a remote service, some form of authentication, such as username/password authentication, is performed at the remote endpoint. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.3" name="Remove or obfuscate the debugging symbols from native binaries" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>As a general rule of thumb, as little explanative information as possible should be provided
                        along with the compiled code. Some metadata such as debugging information, line numbers and
                        descriptive function or method names make the binary or bytecode easier to understand for the
                        reverse engineer, but isn't actually needed in a release build and can therefore be safely
                        discarded without impacting the functionality of the app.

                        This data shall be removed from the release version or shall be obfuscated in order to be
                        inaccessible to the reverse engineer.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Testing for Debugging Symbols" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-symbols-mstg-code-3"/>
          </references>
          <standards>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Symbols are usually stripped during the build process, so you need the compiled byte-code
                            and libraries to verify whether any unnecessary metadata has been discarded. First find the
                            nm binary in your Android NDK and export it (or create an alias).
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            export $NM =
                            $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            To display debug symbols:
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ $NM -a
                            libfoo.so/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:
                            libfoo.so: no symbols&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;To display dynamic symbols:
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            $ $NM -D libfoo.so&amp;nbsp;
                            &lt;/blockquote&gt;Alternatively, open the file in your favorite disassembler and check the
                            symbol tables manually. Dynamic symbols can be stripped using the visibility compiler flag.
                            Adding this flag causes gcc to discard the function names while still preserving the names
                            of functions declared as JNIEXPORT.&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            Check if the following was added to build.gradle:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            externalNativeBuild { cmake { cppFlags &amp;quot;-fvisibility=hidden&amp;quot; } }&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;For iOS:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ gobjdump --stabs --dwarf TargetApp&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;In archive MyTargetApp:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            - armv5te: file format mach-o-arm - aarch64: file format mach-o-arm64 Gobjdump is part of
                            binutils and can be installed via Homebrew on Mac OS X.
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.1" name="Request only the minimum required permissions from the mobile operating system" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Request only the minimum required permissions from the mobile operating system. For example, if there is no requirement to use the camera then the application should not request this permission. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing App Permissions" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide"/>
            <reference name="OWASP MASVS - iOS - Testing Custom URL Schemes" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-app-permissions-mstg-platform-1"/>
          </references>
          <standards>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android applications:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and review the permissions the application is asking for.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check they are actually needed.&lt;/li&gt;
                            &lt;/ol&gt;For iOS applications:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and use its main functionality, iOS will ask for the
                            permission when it is needed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify those permissions requests are in accordance with the minimum set of
                            permissions needed by the application.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.1-5.2" name="Secure channels with TLS" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  One of the core mobile app functions is sending/receiving data over untrusted networks like the Internet. If the data is not properly protected in transit, an attacker with access to any part of the network infrastructure (e.g., a Wi-Fi access point) may intercept, read, or modify it. This is why plaintext network protocols are rarely advisable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The vast majority of apps rely on HTTP for communication with the backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS originally referred to HTTP over Secure Socket Layer (SSL); SSL is the deprecated predecessor of TLS). TLS allows authentication of the backend service and ensures confidentiality and integrity of the network data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensuring proper TLS configuration on the server side is also important. The SSL protocol is deprecated and should no longer be used. Also TLS v1.0 and TLS v1.1 have known vulnerabilities and their usage is deprecated in all major browsers by 2020. TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data. Starting with Android 10 (API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is that customizing cipher suites is no longer possible and that all of them are enabled when TLS v1.3 is enabled, whereas Zero Round Trip (0-RTT) mode isn't supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When both the client and server are controlled by the same organization and used only for communicating with one another, you can increase security by hardening the configuration. 
&lt;/div&gt; 
&lt;div&gt;
  If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server's configuration. Lack of support in the underlying operating system may force the mobile application to use a weaker configuration. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Verifying Data Encryption on the Network" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04f-testing-network-communication"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Capture all HTTP(S) and Websocket traffic with an interception proxy like OWASP ZAP or Burp Suite and make sure all requests are made via HTTPS instead of HTTP.&lt;/li&gt; 
  &lt;li&gt;Interception proxies like Burp and OWASP ZAP will show HTTP(S) traffic only. You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.8" name="Secure in the unmanaged code, the allocated memory, freed memory and used memory" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Memory corruption bugs are a popular mainstay for hackers. This class of bug results from a programming error that causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This kind of vulnerability occurs in a number of ways: 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;b&gt;Buffer overflows:&lt;/b&gt; This describes a programming error where an app writes beyond an allocated memory range for a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Out-of-bounds-access: &lt;/b&gt;Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the content written to some extent, code execution exploit is likely possible.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Dangling pointers:&lt;/b&gt; These occur when an object with an incoming reference to a memory location is deleted or deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a dangling pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Use-after-free:&lt;/b&gt; This refers to a special case of dangling pointers referencing released (deallocated) memory. After a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager to return the address to a pool of available memory. When this memory location is eventually re-allocated, accessing the original pointer will read or write the data contained in the newly allocated memory. This usually leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations to leverage control of the instruction pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Integer overflows: &lt;/b&gt;When the result of an arithmetic operation exceeds the maximum value for the integer type defined by the programmer, this results in the value "wrapping around" the maximum integer value, inevitably resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how the integer is used - for example, if the integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Format string vulnerabilities: &lt;/b&gt;When unchecked user input is passed to the format string parameter of the printf() family of C functions, attackers may inject format tokens such as '%c' and '%n' to access memory. Format string bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as ASLR.&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   A best practice to fix the Memory Corruption Bugs are the following:&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When using integer variables for array indexing, buffer length calculations, or any other security-critical operation, verify that unsigned integer types are used and perform precondition tests to prevent the possibility of integer wrapping.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Ensure the app does not use unsafe string functions such as strcpy, most other functions beginning with the "str" prefix, sprint, vsprintf, gets, etc.; If the app contains C++ code, ANSI C++ string classes are used; iOS apps written in Objective-C use NSString class. C apps on iOS should use CFString, the Core Foundation representation of a string. No untrusted data is concatenated into format strings.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing for Memory Management Bugs" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04h-testing-code-quality#memory-corruption-bugs-mstg-code-8"/>
          </references>
          <standards>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if some of the different Memory Corruption bugs appear when you try to use them to
                            gain access to the system.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.8" name="Set the detection mechanism to trigger different alarms" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;The detection mechanisms trigger responses of different types, including delayed and stealthy responses.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.1" name="Sign the app and provision with valid certificate with a properly protected key" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Code signing your app assures users that it is from a known source and the app hasn't been modified since it was last signed. This process can prevent an app from being tampered with, or modified to include malicious code.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
            <reference name="OWASP MASVS - iOS - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
          </references>
          <standards>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app is correctly signed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:12.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.1" name="Store sensitive data in a cryptographically secure (system provided) store" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Most mobile devices and operating systems offer built in API's to store data in their encrypted stores, such as the Keychain on iOS. These stores are ultimately encrypted using a key derived from the device passcode and require the user to set a passcode.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However, they do not enforce the quality of the passcode, nor is it possible to determine the quality of the passcode (and therefore, ultimately the key) from within the application.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Data should not be stored locally unless there is an explicit requirement to do so. This includes restricting thumbnails or screenshots of pages in the application that contain private data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Data that must be stored on the client side must be held in a cryptographically secure store.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS provided stores to protect private data on the client side, acknowledging that the residual risk from users with weak passwords may affect that data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not store highly sensitive/financial data on the client-side without implementing a provably strong cryptographic process. For example, it should be encrypted using a key derived from an independent password where the strength of this password can be verified.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is storing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the storage routines and verify they are using OS APIs which are built on
                            top of secure storage components.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MOB-DATA" name="Store sensitive data only in protected locations" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that
                        data. Most mobile devices and operating systems offer built in API's to store data in their
                        encrypted stores, such as the Keychain on iOS. Data stored in shared memory, such as a removable
                        SD card, may be accessed by other applications on the device, or may be removed and accessed in
                        a third party system.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not store sensitive or private data on shared or removable storage, such as SD cards. Where
                        data is stored on shared but non removable storage, there is still a risk an attacker with
                        physical access may be able to access the device storage and therefore the data.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use OS provided secure storage for sensitive or private data.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is processing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check for the sensitiveness of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check if this data is being stored at some point. This data should be kept to the
                            minimum set of data possible for the application to run appropriately and should be stored
                            on OS provided secure-means (i.e. iOS keychain).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:40.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-KEY-AES" name="Use other block modes rather than ECB mode for AES encryption" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in
                        mobile apps. It's an iterative block cipher that is based on a series of linked mathematical
                        operations. AES performs a variable number of rounds on the input, each of which involve
                        substitution and permutation of the bytes in the input block. Each round uses a 128-bit round
                        key which is derived from the original AES key. As of this writing, no efficient cryptanalytic
                        attacks against AES have been discovered. However, implementation details and configurable
                        parameters such as the block cipher mode leave some margin for error.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You shall configure AES encryption with Cipher Block Chaining (CBC) mode instead of ECB mode.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In CBC mode, plaintext blocks are XORed with the previous ciphertext block. This ensures each
                        encrypted block is unique and randomized even if blocks contain the same information. When
                        storing encrypted data, we recommend using a block mode that also protects the integrity of the
                        stored data, such as Galois/Counter Mode (GCM). The latter has the additional benefit that the
                        algorithm is mandatory for each TLSv1.2 implementation, and thus is available on all modern
                        platforms.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>If AES encryption is used, verify it's not configured with ECB mode.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.2" name="Use proven implementations of cryptographic primitives" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>It's recommended to use well-known algorithms that are widely regarded as secure. Mobile
                        operating systems offer standard cryptographic APIs that implement those algorithms.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Carefully inspect all the cryptographic methods used within the source code, especially
                            those that are directly applied to sensitive data. All cryptographic operations should use
                            standard cryptographic APIs for Android and iOS.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-RANDOM-KEY" name="Use Random IV with CBC Mode" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>CBC mode requires the first plaintext block to be combined with an initialization vector (IV).
                        The IV doesn't have to be kept secret, but it shouldn't be predictable. Make sure that IVs are
                        generated using a cryptographically-secure random number generator. For more information on IVs,
                        see Crypto Fail's initialization vectors article.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app is using the Random IV with CBC mode to generate a cryptographically-secure
                            random number.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.3" name="Validate that the certificate presented by the server is signed by a trusted Certificate Authority" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The client should verify that the TLS certificate presented by the server has been signed by a recognized certificate authority and that the information in the certificate is valid.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Endpoint Identify Verification" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-endpoint-identify-verification-mstg-network-3"/>
            <reference name="OWASP MASVS - iOS - Testing Endpoint Identify Verification" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication#app-transport-security-mstg-network-2"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For every starting connection the client does to a TLS enabled end-point the certificate
                            must be verified. This verification includes:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;in first place to check the certificate is valid, it is neither expired nor
                            revoked, the private key used is of a reasonable length, the signature algorithm is of a
                            reasonable strength and the Distinguished Name matches with the one of the server we are
                            connecting to.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verification also includes checking the certificate against the certificate chain.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Also verify that the certificate chain is trusted against a local copy of the
                            Certificate Authority certificate, in which we have set up the trust.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For Android, we shall review the code and search how it has used the methods of
                            TrustManager and HostnameVerifier.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-459" name="An attacker exploits a weakness in order to generate a certificate signing request" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker exploits a weakness in the MD5 hash algorithm (weak collision resistance)
                                to generate a certificate signing request (CSR) that contains collision blocks in the
                                &amp;quot;to be signed&amp;quot; part. The attacker specially crafts two different, but
                                valid X.509 certificates that when hashed with the MD5 algorithm would yield the same
                                value. The attacker then sends the CSR for one of the certificates to the Certification
                                Authority which uses the MD5 hashing algorithm. That request is completely valid and the
                                Certificate Authority issues an X.509 certificate to the attacker which is signed with
                                its private key. An attacker then takes that signed blob and inserts it into another
                                X.509 certificate that the attacker generated.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Due to the MD5 collision, both certificates, though different, hash to the same value
                                and so the signed blob works just as well in the second certificate. The net effect is
                                that the attackers' second X.509 certificate, which the Certification Authority has
                                never seen, is now signed and validated by that Certification Authority. To make the
                                attack more interesting, the second certificate could be not just a regular certificate,
                                but rather itself a signing certificate. Thus the attacker is able to start their own
                                Certification Authority that is anchored in its root of trust in the legitimate
                                Certification Authority that has signed the attackers' first X.509 certificate. If the
                                original Certificate Authority was accepted by default by browsers, so will now the
                                Certificate Authority set up by the attacker and of course any certificates that it
                                signs. So the attacker is now able to generate any SSL certificates to impersonate any
                                web server, and the user's browser will not issue any warning to the victim. This can be
                                used to compromise HTTPS communications and other types of systems where PKI and X.509
                                certificates may be used (e.g., VPN, IPSec) -
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.3-5.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.3-5.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-158-SESSION" name="User data or credentials are compromised through network sniffing or man-in-the-middle attacks" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with access to the network path between the victim and the server could
                                employ a sniffer to observe clear text traffic on the network. If the session ID is
                                transmitted in clear text, then the attacker could compromise it and thereby gain access
                                to the user's session.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-308">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-474" name="An attacker obtains an authoritative or reputable signer's private signature key by theft" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                theft and then uses this key to forge signatures from the original signer to mislead a
                                victim into performing actions that benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-255">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CSD-SESSION-ID" name="Attackers gain access to critical functions by compromising the session ID" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>If a session ID is leaked through a flaw in the application, then attackers could
                                perform sensitive operations or hijack the session of the affected user. This type of
                                attack does not usually result in mass-compromise of ID's.</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-613">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-4.7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-21" name="Attackers manipulate session IDs and resource IDs to take advantage of the fact that some software accepts user input without verifying its authenticity" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes "trust" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlated with access control policy enforcement points.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to enumerate these identifiers.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The net result is that spoofing and impersonation may be possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.10" mitigation="50"/>
                    <countermeasure ref="MASVS-4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-4.10" mitigation="50"/>
                <countermeasure ref="MASVS-4.8" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-133" name="An attacker attempts to invoke all common switches and options to discover weaknesses" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker attempts to invoke all common switches and options in the target
                                application for the purpose of discovering weaknesses in the target. For example, in
                                some applications, adding the --debug switch causes debugging information to be
                                displayed, which can sometimes reveal sensitive processing or configuration information
                                to an attacker.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This attack differs from other forms of API abuse in that the attacker is blindly
                                attempting to invoke options in the hope that one of them will work rather than
                                specifically targeting a known option. Nonetheless, even if the attacker is familiar
                                with the published options of a targeted application this attack method may still be
                                fruitful as it might discover unpublicized functionality.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-215">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.3" mitigation="15"/>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                    <countermeasure ref="MASVS-8.2" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-489">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-656">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.13" mitigation="5"/>
                    <countermeasure ref="MASVS-2.14" mitigation="5"/>
                    <countermeasure ref="MASVS-2.3" mitigation="5"/>
                    <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                    <countermeasure ref="MASVS-7.9" mitigation="5"/>
                    <countermeasure ref="MASVS-8.11" mitigation="5"/>
                    <countermeasure ref="MASVS-8.13" mitigation="5"/>
                    <countermeasure ref="MASVS-8.8" mitigation="5"/>
                    <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MEMORY-LEAKAGE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.15" mitigation="5"/>
                    <countermeasure ref="MASVS-2.5" mitigation="5"/>
                    <countermeasure ref="MASVS-4.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="OUTDATED-LIBRARIES">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.9" mitigation="5"/>
                    <countermeasure ref="MASVS-5.6" mitigation="5"/>
                    <countermeasure ref="MASVS-7.5" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.9" mitigation="5"/>
                <countermeasure ref="MASVS-2.13" mitigation="5"/>
                <countermeasure ref="MASVS-2.14" mitigation="5"/>
                <countermeasure ref="MASVS-2.15" mitigation="5"/>
                <countermeasure ref="MASVS-2.3" mitigation="5"/>
                <countermeasure ref="MASVS-2.5" mitigation="5"/>
                <countermeasure ref="MASVS-4.4" mitigation="5"/>
                <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                <countermeasure ref="MASVS-5.6" mitigation="5"/>
                <countermeasure ref="MASVS-7.3" mitigation="15"/>
                <countermeasure ref="MASVS-7.4" mitigation="5"/>
                <countermeasure ref="MASVS-7.5" mitigation="5"/>
                <countermeasure ref="MASVS-7.9" mitigation="5"/>
                <countermeasure ref="MASVS-8.11" mitigation="5"/>
                <countermeasure ref="MASVS-8.13" mitigation="5"/>
                <countermeasure ref="MASVS-8.2" mitigation="5"/>
                <countermeasure ref="MASVS-8.8" mitigation="5"/>
                <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.12" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.12" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.1" mitigation="34"/>
                    <countermeasure ref="MASVS-8.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.1" mitigation="34"/>
                <countermeasure ref="MASVS-8.3" mitigation="33"/>
                <countermeasure ref="use-analysis-static-code" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-188" name="Attacker gains access to sensitive data by modifying the application's expected behavior" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker discovers the structure, function, and composition of an object, resource,
                                or system by using a variety of analysis techniques to effectively determine how the
                                analyzed entity was constructed or operates. The goal of reverse engineering is often to
                                duplicate the function, or a part of the function, of an object in order to duplicate or
                                &amp;quot;back engineer&amp;quot; some aspect of its functioning.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Reverse engineering techniques can be applied to mechanical objects, electronic devices,
                                or software, although the methodology and techniques involved in each type of analysis
                                differ widely. When adversaries are reverse engineering software, methodologies fall
                                into two broad categories, 'white box' and 'black box.' White box techniques involve
                                methods which can be applied to a piece of software when an executable or some other
                                compiled object can be directly subjected to analysis, revealing at least a portion of
                                its machine instructions that can be observed upon execution.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                'Black Box' methods involve interacting with the software indirectly, in the absence of
                                the ability to measure, instrument, or analyze an executable object directly. Such
                                analysis typically involves interacting with the software at the boundaries of where the
                                software interfaces with a larger execution environment, such as input-output vectors,
                                libraries, or APIs.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="MASVS-EMULATION-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.5" mitigation="20"/>
                    <countermeasure ref="MASVS-8.7" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.10" mitigation="20"/>
                    <countermeasure ref="MASVS-8.4" mitigation="20"/>
                    <countermeasure ref="MASVS-8.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-8.10" mitigation="20"/>
                <countermeasure ref="MASVS-8.4" mitigation="20"/>
                <countermeasure ref="MASVS-8.5" mitigation="20"/>
                <countermeasure ref="MASVS-8.6" mitigation="20"/>
                <countermeasure ref="MASVS-8.7" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-122-MOBILE" name="Users lose trust in the application because it requests unnecessary privileges" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>If the mobile application requests permissions or access to components that are not
                                strictly needed by the application, then users can lose trust in the security of the
                                application with an associated impact on the trust placed in the application provider.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                    <countermeasure ref="MASVS-6.1" mitigation="20"/>
                    <countermeasure ref="MASVS-8.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                <countermeasure ref="MASVS-6.1" mitigation="20"/>
                <countermeasure ref="MASVS-8.1" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-sensitive-data" name="Post sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-37-MOBILE" name="Sensitive data could be compromised through autocompletion" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with permanent or temporary access to the users' mobile device could gain
                                access to sensitive data if the mobile application supports auto-completion of that
                                data.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-525-MOBILE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4C" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.4C" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PROVIDE MOBILE ACCESS TO SERVICES" name="Provide mobile access to services" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.6" mitigation="25"/>
                    <countermeasure ref="MASVS-4.1" mitigation="25"/>
                    <countermeasure ref="MASVS-4.12" mitigation="25"/>
                    <countermeasure ref="MASVS-4.9" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.6" mitigation="25"/>
                <countermeasure ref="MASVS-4.1" mitigation="25"/>
                <countermeasure ref="MASVS-4.12" mitigation="25"/>
                <countermeasure ref="MASVS-4.9" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-WEBVIEW" name="Attackers gain access to the data through the WebView functionality" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker employs forceful browsing to access portions of a website that are
                                otherwise unreachable through direct URL entry.

                                Usually, a front controller or similar design pattern is employed to protect access to
                                portions of a web application.

                                Forceful browsing enables an attacker to access information, perform privileged
                                operations and otherwise reach sections of the web application that have been improperly
                                protected.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-749">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.10" mitigation="25"/>
                    <countermeasure ref="MASVS-6.11" mitigation="20"/>
                    <countermeasure ref="MASVS-6.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-83">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.5" mitigation="25"/>
                    <countermeasure ref="MASVS-6.6-IOS-UIWEBVIEW" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-6.10" mitigation="25"/>
                <countermeasure ref="MASVS-6.11" mitigation="20"/>
                <countermeasure ref="MASVS-6.5" mitigation="25"/>
                <countermeasure ref="MASVS-6.6" mitigation="25"/>
                <countermeasure ref="MASVS-6.6-IOS-UIWEBVIEW" mitigation="20"/>
                <countermeasure ref="MASVS-6.7" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="7k-CWE-ErrorH" name="Attackers gain unauthorised access to the application through an error handling flaw" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Errors and error handling represent a class of API. Errors related to error handling
                                are so common that they deserve a special kingdom of their own. As with API Abuse, there are two ways to introduce an error-related security vulnerability: the most common
                                one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-388">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.6" mitigation="50"/>
                    <countermeasure ref="MASVS-7.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.6" mitigation="50"/>
                <countermeasure ref="MASVS-7.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.</desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-120">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ SENSITIVE DATA" name="Read sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CWE-937" name="Attackers gain unauthorised access to data or services by exploiting weaknesses in third party libraries" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Applications typically make extensive use of 3rd party libraries to provide common
                                functions. Attackers could target vulnerabilities in these libraries in order to gain
                                unauthorized access to data or services.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;div&gt;
                                Since the use of particular libraries and even versions of those libraries can often be
                                determined remotely, attackers can sometimes employ automated scanning tools to identify
                                vulnerable software. This increases the likelihood of attack.
                                &lt;/div&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-937">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-204B" name="Sensitive data is retrieved from the mobile device by an attacker" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with access to the mobile device could inspect the cache to find sensitive
                                data.

                                Many applications that communicate with remote entities or which perform intensive
                                calculations utilize caches to improve efficiency. However, if the application computes
                                or receives sensitive information and the cache is not appropriately protected, an
                                attacker can browse the cache and retrieve this information. This can result in the
                                disclosure of sensitive information.

                                iOS in particular caches the active screen when an app is put into the background. This
                                screenshots is then stored on the file system.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-226">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.10" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-524">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4B" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-DATA">
                  <countermeasures>
                    <countermeasure ref="MOB-DATA" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-INFO-LEAK">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.9" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-SECRET-STORED">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.2-4.3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.10" mitigation="20"/>
                <countermeasure ref="MASVS-2.4B" mitigation="20"/>
                <countermeasure ref="MASVS-2.9" mitigation="20"/>
                <countermeasure ref="MASVS-4.2-4.3" mitigation="20"/>
                <countermeasure ref="MOB-DATA" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE READ OR POST DATA" name="Sensitive Read or Post data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-204" name="An attacker examines a target application's cache for sensitive information in order to get at sensitive data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.
&lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-524">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-INFO-LEAK">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.5" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.5" mitigation="50"/>
                <countermeasure ref="MASVS-2.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-97" name="An attacker leverages Cryptanalysis to gain access to sensitive data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Cryptanalysis is the process of finding weaknesses in cryptographic algorithms and
                                using these weaknesses to decipher the ciphertext without knowing the secret key
                                (instance deduction). Sometimes the weakness is not in the cryptographic algorithm
                                itself, but rather in how it is applied that makes cryptanalysis successful. An attacker
                                may have other goals as well, such as:
                                The goal of the attacker performing cryptanalysis will depend on the specific needs of
                                the attacker in a given attack context. In most cases, if cryptanalysis is successful at
                                all, an attacker will not be able to go past being able to deduce some information about
                                the plaintext (goal 3). However, that may be sufficient for an attacker, depending on
                                the context.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.2" mitigation="34"/>
                    <countermeasure ref="MASVS-3.3-KEY-AES" mitigation="33"/>
                    <countermeasure ref="MASVS-3.4" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.2" mitigation="34"/>
                <countermeasure ref="MASVS-3.3-KEY-AES" mitigation="33"/>
                <countermeasure ref="MASVS-3.4" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-485" name="An attacker obtains an authoritative signer's private signature key by exploiting a cryptographic weaknesses" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                exploiting a cryptographic weakness in the signature algorithm or pseudorandom number
                                generation and then uses this key to forge signatures from the original signer to
                                mislead a victim into performing actions which benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-329">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.3-RANDOM-KEY" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-330">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.3-RANDOM-KEY" mitigation="50"/>
                <countermeasure ref="MASVS-3.6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295-AUTH">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-112" name="Attackers gain unauthorized access through Brute Force attacks" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since eliminating patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.3-KEY-LENGTH" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.3-KEY-LENGTH" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-167" name="Sensitive Data stored on the client could be accessed by an attacker" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;An attacker examines a client application for the presence of sensitive information.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This information may be stored in configuration files, embedded within the application itself, or stored in other ways. Sensitive information may include long-term keys, passwords, credit card or financial information, and other private material that the client uses in its interactions with the server.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While servers are (hopefully) protected by professional security administrators, most users may be less skilled at protecting their data. As a result, the user client may represent a weak link that an attacker could exploit directly. If an attacker can gain access to a client installation, they may be able to detect and lift sensitive information that could be leveraged directly (such as financial information), or allow the attacker to subvert future communication between the client and the server.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;In some cases, it may not even be necessary to gain access to another user's installation - if all instances of the client software are embedded with the same sensitive information (for example, long term keys for communication with the server), then the attacker must simply find a way to gain their own copy of the client in order to perform this attack.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="50" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-321">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.1" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-323">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.5" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-530">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.8" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-921">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.2" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.1" mitigation="20"/>
                <countermeasure ref="MASVS-2.2" mitigation="20"/>
                <countermeasure ref="MASVS-2.8" mitigation="34"/>
                <countermeasure ref="MASVS-3.1" mitigation="33"/>
                <countermeasure ref="MASVS-3.5" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ab1430ec-c9a8-481f-b056-56a21e1deb8f" diagramComponentId="c61277ab-ec70-4cc0-b42b-328c3412890b" ref="f6a97412-17e9-40d3-bc1e-42d99be0ebc9" name="WWW - WAF" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="CD-WAF" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-WAF1" name="Control access to AWS WAF resources" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS WAF resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles). &lt;br&gt; Policies that are attached to an IAM identity are known as identity-based policies, and policies that are attached to a resource are known as resource-based policies. AWS WAF supports only identity-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Using identity-based policies (IAM policies) for AWS WAF&lt;/p&gt; 
&lt;p&gt;The following shows an example of a permissions policy:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2019-07-29", "Statement": [ { "Sid": "CreateFunctionPermissions", "Effect": "Allow", "Action": [ "wafv2:ListWebACLs", "wafv2:GetWebACL", "cloudwatch:ListMetrics", "wafv2:GetSampledRequests" ], "Resource": "*" }, { "Sid": "PermissionToPassAnyRole", "Effect": "Allow", "Action": [ "iam:PassRole" ], "Resource": "arn:aws:iam::account-id:role/*" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of managing access permissions to your AWS WAF resources" url="https://docs.aws.amazon.com/waf/latest/developerguide/access-control-overview.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.688">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.689">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-WAF1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-WAF1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="afb1e0c7-fa93-49c6-b808-de23f3bc9719" diagramComponentId="69a57163-9740-4975-baf1-8c0524223305" ref="5ccee78e-7c03-4846-9a8d-ccbd0ecc19f8" name="App - ELB" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="load-balancer" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.748">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.748">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.748">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.748">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.748">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="unknown-resource-status" name="Unknown resource status" state="0" impact="100" issueId="" issueLink="">
          <desc>We do not have our resources current status and as a result lose control of some resources,
                        for example, we may believe these resources are inactive when in fact the status has changed and we are unaware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-1.12" name="Add SSL/TLS Certificate to App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.
&lt;br&gt;
&lt;br&gt; The SSL\TLS protocol uses an X.509 certificate (SSL\TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.
&lt;br&gt;
&lt;br&gt; You can create a certificate using a Third Party Certificate Authority, AWS Certificate Manager or a self signed certificate like OpenSSL.
&lt;br&gt;
&lt;br&gt; Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;br&gt;
&lt;br&gt; All the application traffic between the Web Tier instances and the App Tier ELB nodes should be encrypted using an SSL\TLS certificate.
&lt;br&gt;
&lt;b&gt;Remediation:&lt;/b&gt;
&lt;br&gt;
&lt;br&gt; Using the Amazon unified command line interface:
&lt;ul&gt;
 &lt;li&gt;Adding a HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): &lt;br&gt;
  &lt;blockquote&gt;
    aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
  &lt;/blockquote&gt; &lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note that if the ListenerDescriptions is empty, the ELB does not have a listener configured with a SSL\TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.9" name="Add SSL/TLS Certificate to Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note that if the ListenerDescriptions element is empty, the ELB does not have a listener configured with a SSL/TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null ||&amp;nbsp; Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.589">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.13" name="Allow connectivity to the VPC Internet Gateway (IGW) and associate the Routing Table with Web tier ELB subnet (by default route (0.0.0.0/0))" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A route table contains a set of rules, called routes, that are used to determine where network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have an IGW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has an IGW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnet-id,Values=&amp;lt;web_tier_elb_subnet1&amp;gt;,&amp;lt;web_tier_elb_subnet2&amp;gt; --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.590">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.15" name="Associate App Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --scheme internal --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;app_tier_subnet1&amp;gt; &amp;lt;app_tier_subnet2&amp;gt; --security-groups &amp;lt;app_tier_elb_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.590">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.1" name="Associate each Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br /&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;elb_name&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;application_subnet&amp;gt; --security-groups &amp;lt;application_security_groups&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;elb_name&amp;gt; --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.590">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.14" name="Associate Web Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;web_tier_elb_subnet1&amp;gt; &amp;lt;web_tier_elb_subnet2&amp;gt; --security-groups &amp;lt;web_tier_elb_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.590">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.10" name="Configure Health Check for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of the instances that are healthy at the time of the health check is InService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of any instances that are unhealthy at the time of the health check is OutOfService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;",
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify App tier ELB to include appropriate health check:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB healthchecks" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-healthchecks.html"/>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify if health check is in place on the App tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.9" name="Configure Health Check for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon ELB will periodically sends pings, attempt connections, or sends requests to test the EC2 instances, these tests are called health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of the instances that are healthy at the time of the health check is InService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of any instances that are unhealthy at the time of the health check is OutOfService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Ensure availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;",
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify Web tier ELB to include appropriate health check:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify if health check is in place on the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.13" name="Configure the latest SSL Security Policies for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
&lt;/div&gt;
&lt;div style=""&gt;
 &lt;ul&gt;
  &lt;li&gt;(Note that you should replace &amp;lt;app\_tier\_elb&amp;gt; with your App-tier ELB name, and &amp;lt;latest\_ssl\_policy&amp;gt; with the proper policy name)&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.10" name="Configure the latest SSL Security Policies for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
   (Note that you should replace &amp;lt;web\_tier\_elb&amp;gt; with your Web-tier ELB name, and _&amp;lt;latest\_ssl\_policy&amp;gt;_ with the proper policy name)
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;div&gt;
  &lt;div style=""&gt;
    aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.5" name="Create subnets for the Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add
                        one or more subnets in each Availability Zone. Each subnet must reside entirely within one
                        Availability Zone and cannot span zones. Availability Zones are distinct locations that are
                        engineered to be isolated from failures in other Availability Zones. By launching instances in
                        separate Availability Zones, you can protect your applications from the failure of a single
                        location. AWS assigns a unique ID to each subnet.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet
                        shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The
                        allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet
                        in a VPC, the CIDR blocks of the subnets must not overlap.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some AWS regions have more than 2 availability zones and it is recommended to use more than 2
                        where possible.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At least 2 subnets in 2 different availability zones (AZ) should be created in order to have
                        fault tolerance and high availability from the perspective of resource deployment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create subnets for Web tier ELB, and note the subnet id:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-subnet --vpc-id application_vpc
                        --cidr-block desired_cidr
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tag the above subnets with the Web tier ELB tags:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-tags --resources web_tier_elb_subnet1
                        web_tier_elb_subnet2 --tags Key=public_tier_tag,Value=public_tier_tag_value
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
  OR
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets created for the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:public_tier_tag,Values=public_tier_tag_value --query &amp;quot;Subnets[*].SubnetId&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.26" name="Create the App tier ELB as Internal" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  When an internal load balancer is created, it receives a public DNS name with the following form:
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   internal-name-123456789.region.elb.amazonaws.com
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new internal ELB for your App tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name app_tier_elb --scheme internal --listeners listener_config --subnets app_tier_subnet1 app_tier_subnet2 --security-groups app_tier_elb_security_group
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Register App tier instances with the new App tier ELB:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb register-instances-with-load-balancer --load-balancer-name app_tier_elb --instances &amp;lt;app_tier_instance1&amp;gt; &amp;lt;app_tier_instance2&amp;gt; &amp;lt;app_tier_instance3&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB internal load balancers" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-internal-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: register instances with load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/register-instances-with-load-balancer.html"/>
          </references>
          <standards>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Scheme of your App tier ELB, and make sure it is &amp;quot;internal&amp;quot;:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, Scheme:Scheme}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.21" name="Create the App tier ELB Security Group to only accept HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The SG associated with the App tier ELB should allow connectivity from the security group
                        associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on
                        the application design.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the security group associated with the App tier
                        ELB:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_elb_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_elb_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;create locally the below json file containing ingress rules for HTTP (TCP 80) and
                        HTTPS (TCP 443) ports only from and name it IpPermissions.json:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; },
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;lt;/span&amp;gt;&amp;gt;&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add to the security group associated with the App tier ELB the above ingress rules:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_elb_security_group&amp;nbsp;
                        --ip-permissions file:///PathTo/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the App tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, AppTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table&amp;nbsp;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the &amp;quot;AppTierELBSecurityGroups&amp;quot; from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from Web tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;app_tier_elb_security_group&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.22" name="Create the App tier Security Group to allow inbound connections from App tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is required for both the configured port and protocol for the listener on the back-end
                        instance and the port and protocol used for the health check.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This protects the App-server tier from unauthorized access, it is recommended to add inbound
                        security group rules that allow traffic for the specific application protocol and ports by
                        referencing as source the security group associated with the App tier ELB.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the App tier security group (use the &amp;quot;AppTierSecurityGroup&amp;quot;
                        element from Audit procedure):&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the
                        App tier ELB security group as the source of the connections:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_security_group
                        --protocol tcp --port specific_port
                        --source-group app_tier_elb_security_group
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List the ingress rules for the above security group, and make sure that allows
                            connections only from App tier ELB security group on specific ports:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws ec2 describe-security-groups --filters Name=tag:app_tier_tag,Values=app_tier_tag_value
                            --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions,
                            AppTierSecurityGroup:GroupId}&amp;quot; --output table
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.19" name="Create the Web tier Security Group to allow inbound connections from Web tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the Web tier security group (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;web_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the Web tier ELB security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;web_tier_elb_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the Web tier security group, and make sure that allows connections only from Web tier ELB security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-9" name="Deploy AWS WAF policies to protect the ALB" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;For additional layers of defense, you can deploy AWS WAF policies to protect the Application Load Balancer. Having edge policies, application policies, and even private or internal policy enforcement layers adds to the visibility of communication requests and provides unified policy enforcement. For more information, see the blog post Deploying defense in depth using AWS Managed Rules for AWS WAF.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="Deploying defense in depth using AWS Managed Rules for AWS WAF" url="https://aws.amazon.com/blogs/security/deploying-defense-in-depth-using-aws-managed-rules-for-aws-waf-part-2/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that AWS WAF is blocking potentially dangerous requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.18" name="Do not use Web tier ELB Security Group in the Auto Scaling launch configuration of any other tier (Web, App)" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The web-tier ELB is the only one that is public facing and should have rules to allow inbound traffic to the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0).
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Associating the web-tier ELB security group to any other instances that shouldn't be publicly accessible exposes them to unauthorized access.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration using the correct security groups for Web and/or App tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling create-launch-configuration --launch-configuration-name &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt;/&amp;lt;app_tier_security_group --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;/&amp;lt;app_tier_instance_profile&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
          </references>
          <standards>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, WebTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the &amp;quot;WebTierELBSecurityGroups&amp;quot; from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security groups associated with all Autoscaling launch configurations and make sure that the above Web tier ELB security group is not present:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --query &amp;quot;LaunchConfigurations[*].{SecurityGroups:SecurityGroups, LaunchConfigurationName:LaunchConfigurationName}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.2" name="Enable the ELB logging" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  AWS Elastic Load Balancers (ELBs) can record all incoming requests sent to the load balancer and store within logs on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;quot;AccessLog&amp;quot;: {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;Enabled&amp;quot;: true,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketName&amp;quot;: &amp;quot;string&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;EmitInterval&amp;quot;: integer,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketPrefix&amp;quot;: &amp;quot;string&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Update the Load Balancer attributes:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb modify-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; --load-balancer-attributes file:///tmp/ElbLogs.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-attributes.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: elb describe tags" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-tags.html"/>
            <reference name="Amazon docs: enable access logs" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html"/>
            <reference name="Amazon docs: modify load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/modify-load-balancer-attributes.html"/>
          </references>
          <standards>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Via Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all ELB's:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Confirm correct ELB is selected by review ELB tags:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-tags --load-balancer-names &amp;lt;elb_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Review selected ELB attributes and ensure Access Log is enabled:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.15" name="Implement mechanism to check that Public Web Tier SSL\TLS certificates are &gt;30 days from expiration" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;Public SSL\TLS certificates that are used for AWS resources such as the ELB or CloudFront should always be renewed prior to expiration both as a security best practice and to ensure the reputation of the web application is not impacted by an expired certificate.
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Request a certificate renewal from your CA, and upload the new certificate in IAM:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws iam upload-server-certificate --server-certificate-name &amp;lt;ssl_certificate_name&amp;gt; --certificate-body file://public_key_cert_file.pem --private-key file://my_private_key.pem --certificate-chain file://my_certificate_chain_file.pem
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For Amazon Certificate Manager users the renewal is managed by ACM service&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe certificate" url="https://docs.aws.amazon.com/cli/latest/reference/acm/describe-certificate.html"/>
            <reference name="Id credentials server certs" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html"/>
            <reference name="Id credentials server certs manage" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html"/>
            <reference name="List certificates" url="https://docs.aws.amazon.com/cli/latest/reference/acm/list-certificates.html"/>
            <reference name="List server certificates" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-server-certificates.html"/>
            <reference name="Upload server certs" url="https://docs.aws.amazon.com/cli/latest/reference/iam/upload-server-certificate.html"/>
          </references>
          <standards>
            <standard ref="1.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all SSL\TLS certificates stored in IAM and check the Expiration field&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws iam list-server-certificates
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
  For Amazon Certificate Manager users:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List ACM certificates and note the CertificateArnvalue of the certificates used by the app:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws acm list-certificates
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Get the details of the desired certificate and check the ExpirationDatevalue (the certificate expiration time as an Epoch timestamp):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws acm describe-certificate --certificate-arn &amp;lt;ssl_certificate_arn&amp;gt; --query "Certificate.{ExpirationDate:NotAfter, Status:Status, SubjectAlternativeNames:SubjectAlternativeNames, DomainName:DomainName}"&amp;nbsp;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-02" name="Select the Server Order Preference option" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
                        establishing a new connection supporting the Server Order Preference option. When this option is
                        selected, the load balancer selects the first cipher in its list that is in the client's list of
                        ciphers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;To enable Server Order Preference:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;For SSL Options, select Server Order Preference.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Click Save. &lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;For SSL Options, check that the option Server Order Preference is selected. &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.13" name="Set a HTTPS connection from all CloudFront Distributions to the Web Tier ELB origin" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Configure the Origin Protocol Policy for the Web tier ELB origin either to require that CloudFront fetches objects from your origin by using HTTPS or to require that CloudFront uses the protocol that the viewer used to request the objects. For example, if you choose Match Viewer for the Origin Protocol Policy and the viewer uses HTTPS to request an object from CloudFront, CloudFront also uses HTTPS to forward the request to your origin.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  In order to use HTTPS, an SSL\TLS certificate must be attached.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To ensure that objects are encrypted from edge locations to the Web-Tier ELB origin according to the data classification policy, use Match Viewer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For configuring "OriginProtocolPolicy"first save locally the current distribution config:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id application_cfn_distribution_id&amp;nbsp; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   Edit and replace "OriginProtocolPolicy"element in /tmp/cf-distribution.json with the below section:
 &lt;/div&gt;
 &lt;div style=""&gt;
   "OriginProtocolPolicy": "https-only",
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Retrieve the current ETag of your CloudFront distribution:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt;&amp;nbsp; --query "ETag"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check the &amp;quot;OriginProtocolPolicy&amp;quot; used by application Cloudfront
                            distributions (it should be set as https-only):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws cloudfront list-distributions --query &amp;quot;DistributionList.Items[*].{Id:Id,
                            OriginProtocolPolicy:Origins.Items[*].CustomOriginConfig.OriginProtocolPolicy}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.17" name="Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;First remove all the ingress rules for the security group associated with the Web tier ELB:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 describe-security-groups --group-id &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=""&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 revoke-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt; --ip-permissions file:///tmp/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: []
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; },
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: []
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     ]
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Add to the security group associated with the Web tier ELB the above ingress rules:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 authorize-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt;&amp;nbsp; --ip-permissions file:///PathTo/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;your_web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, SecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the security group id from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from any source IP (0.0.0.0/0)any source IP (0.0.0.0/0):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.14" name="Use HTTPS listener for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the App Tier ELB is encrypted over the SSL\TLS channel.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if the App Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.11" name="Use HTTPS listener for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the Web Tier ELB is encrypted over the SSL\TLS channel.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;div&gt;
    Using the Amazon unified command line interface:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;ul&gt;
    &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
    &lt;div&gt;
      aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
    &lt;/div&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if the Web Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol = 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-01" name="Use the Perfect Forward Secrecy feature" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
                        Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
                        through the use of a unique random session key, and therefore prevents the decoding of captured
                        data, even if the secret long-term key is compromised.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;To begin using Perfect Forward Secrecy: &lt;br /&gt;&lt;/b&gt;Configure your load
                        balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that your load balancer is configured with the newly added Elliptic Curve
                            Cryptography (ECDHE) cipher suites.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                    <countermeasure ref="aws-tier-3.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                <countermeasure ref="aws-tier-3.13" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.13" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.17" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.19" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.21" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.22" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.1" mitigation="8"/>
                    <countermeasure ref="aws-tier-3.14" mitigation="8"/>
                    <countermeasure ref="aws-tier-3.15" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.18" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.26" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-9" mitigation="4"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-9" mitigation="4"/>
                <countermeasure ref="aws-tier-3.1" mitigation="8"/>
                <countermeasure ref="aws-tier-3.14" mitigation="8"/>
                <countermeasure ref="aws-tier-3.15" mitigation="8"/>
                <countermeasure ref="aws-tier-5.1" mitigation="8"/>
                <countermeasure ref="aws-tier-6.13" mitigation="8"/>
                <countermeasure ref="aws-tier-6.17" mitigation="8"/>
                <countermeasure ref="aws-tier-6.18" mitigation="8"/>
                <countermeasure ref="aws-tier-6.19" mitigation="8"/>
                <countermeasure ref="aws-tier-6.21" mitigation="8"/>
                <countermeasure ref="aws-tier-6.22" mitigation="8"/>
                <countermeasure ref="aws-tier-6.26" mitigation="8"/>
                <countermeasure ref="aws-tier-6.5" mitigation="8"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.2" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="unknown-resource-status">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                    <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                <countermeasure ref="aws-tier-5.2" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="25ede2e7-3f01-48f5-a814-7236c2b0dfa9" diagramComponentId="c01c2d44-676d-4cbc-8d66-0c9bd3799db3" ref="a0e687c9-f835-47fd-ac58-c8b7cb491a75" name="ElastiCache" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="elasticache" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.712">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.443">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.712">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.711">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.711">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.443">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.442">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.711">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.711">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.442">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.442">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE8" name="Apply any updates of type security for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Apply any updates of type security for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You control when to apply an update, regardless of the recommendation. At a minimum, AWS strongly recommends that you apply any updates of type security to ensure that your clusters are always up-to-date with current security patches. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can apply the service updates using one of the following console options. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console for Redis or Memcached 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose this to view Update Status for individual clusters, and then choose Apply, View, or Stop for the service updates. If a service update is available, the console displays a banner at the top of the page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Apply Now, you can choose to apply the service update to all or a subset of the applicable clusters in this workflow. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Dismiss, the console stops displaying the banner for that console session. However, the banner reappears the next time that you refresh your session. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the Apply Updates Now page, you can use these options: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Auto-Update after Due Date: If this attribute is yes, after the Recommended apply by Date has passed, ElastiCache schedules clusters yet to be updated in the appropriate maintenance window. Updates are applied along with other applicable updates. You can continue to apply the updates until the update expiration date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If this attribute is no and you don't apply the self-service update before it expires, ElastiCache doesn't automatically apply the service update for you. If your cluster is part of one or more ElastiCache-supported compliance programs and isn't updated, it remains out of compliance until the next cumulative update becomes available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - The Nodes Updated ratio value for your cluster and the Estimated Update Time value help you plan your maintenance schedule. If service updates exceed the estimated time constraints for your business flows, you can stop updates and reapply them at a later date. For more information, see Stopping the Self-Service Updates. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose to apply the service updates to any or all available clusters, choose Confirm. If you choose this, you then view the Service Updates page, where you can monitor the status of your service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose Cancel, you can explore further options, as explained following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the ElastiCache dashboard, you can check Update Status for each of your Redis clusters, as shown following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update Status displays one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - update available: An update is available to apply to this cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - not-applied: An update is available but not yet applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduling: The update date is being scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduled: The update date has been scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - waiting-to-start: The update process will soon begin. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - in-progress: The update is being applied to this cluster, rendering it unavailable for the duration of the value in Estimated Update Time. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopping: An in-progress update has been interrupted before completion. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopped: The update has been terminated. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you stop an in-progress update on a cluster, some nodes might be updated while others are not. The stopping process doesn't roll back any changes to already updated nodes. You can reapply the update to those nodes that still have an available status at your convenience if the update doesn't have an Expired status. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - complete: The update has been successfully applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - up to date: The cluster doesn't have any outstanding active service updates and your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Service Updates List 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates and their status, along with other information, choose the Service Updates List tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In Service Updates List, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: A unique identifier for the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- cancelled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as your business flow allows (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Release Date: When the update is released and available to apply on your Redis fleet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Recommended Apply By Date: ElastiCache guidance date to apply the updates by. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choosing an individual update provides additional details, including the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Description: Provides details on the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Expiration Date: The date when the service update expires and no longer is available. Any updates that aren't applied before their expiration date are cumulatively rolled into the next update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Important 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you apply updates of type security as soon as you can. Doing this helps ensure that your Redis clusters are always up-to-date with the latest security patches and are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates in relation to the applicable clusters, choose the Service Update Status tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Service Updates Status list, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: Detailed information about the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Name: The list of your Redis clusters that are eligible for the update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Nodes Updated: The ratio of individual nodes within a specific cluster that were updated or remain available for the specific service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as you can (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all Redis clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- canceled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update SLA Met: This reflects whether your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- yes: All available updates have been applied to this cluster and available nodes by the apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  -- no: The service update might have been applied successfully to one or more nodes, but other nodes within the cluster still have an available status. This typically happens when a service update is applied and then stopped. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you stop the progress of a service update on a cluster, any nodes that are already updated have a complete status. Any nodes that have an In Progress or Stopping status revert to a Stopped status, and the Service Update SLA Met status changes to no. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- N/A: The replication group was created after the recommended apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Status Modified Date: The latest date that the cluster was modified with a service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  The Show Previous Updates check box, if selected, displays a list of previous updates that are no longer available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing the Service Updates -  Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/managing-updates.html"/>
            <reference name="Managing the Service Updates - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/managing-updates.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that any updates of type security are applied for AWS ElactiCache.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.376">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE1" name="Control access to AWS ElastiCache using IAM policies" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS ElastiCache using IAM policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can have valid credentials to authenticate your requests, but unless you have permissions you cannot create or access Amazon ElastiCache resources. For example, you must have permissions to create an ElastiCache cache cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  The following shows an example of a permissions policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Statement": [{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowClusterPermissions", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateReplicationGroup", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:DescribeCacheClusters", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:ModifyCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:RebootCacheCluster"], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}, 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowUserToPassRole", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ "iam:PassRole" ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy has two statements: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. The first statement grants permissions for the Amazon ElastiCache actions (elasticache:CreateCacheCluster, elasticache:DescribeCacheClusters, elasticache:ModifyCacheCluster, and elasticache:RebootCacheCluster) on any cache cluster owned by the account. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. The second statement grants permissions for the IAM action (iam:PassRole) on IAM roles. The wildcard character (*) at the end of the Resource value means that the statement allows permission for the iam:PassRole action on any IAM role. To limit this permission to a specific role, replace the wildcard character (*) in the resource ARN with the specific role name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy doesn't specify the Principal element because in an identity-based policy you don't specify the principal who gets the permission. When you attach policy to a user, the user is the implicit principal. When you attach a permissions policy to an IAM role, the principal identified in the role's trust policy gets the permissions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using Identity-Based Policies (IAM Policies) for Amazon ElastiCache" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.IdentityBasedPolicies.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.376">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="33" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE10" name="Enable AWS SNS Notifications for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable AWS SNS Notifications for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When significant events happen for a cluster, ElastiCache sends notification to a specific Amazon SNS topic. Examples include a failure to add a node, success in adding a node, the modification of a security group, and others. By monitoring for key events, you can know the current state of your clusters and, depending upon the event, be able to take corrective action. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Adding an Amazon SNS Topic (Console) 
&lt;/div&gt; 
&lt;div&gt;
  The following procedure shows you how to add an Amazon SNS topic for a cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  This process can also be used to modify the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To add or modify an Amazon SNS topic for a cluster (Console) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In Clusters, choose the cluster for which you want to add or modify an Amazon SNS topic ARN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4 In Modify Cluster under Topic for SNS Notification, choose the SNS topic you want to add, or choose Manual ARN input and type the ARN of the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/ECEvents.SNS.html"/>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.SNS.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.377">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="33" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. &lt;/p&gt; 
&lt;p&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. &lt;/p&gt; 
&lt;p&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS-managed keys (SSE-KMS). This provides several advantages: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across all regions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail log files. You can assign permissions for the key to the users in your organization according to your requirements.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must be granted decrypt permission by the CMK policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue disclosure of information and provide an extra layer of security.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; The following example shows how to upload data using AWS KMS Encryption: &lt;br /&gt; aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key &lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
            <reference name="Storing and Retrieving a Secret (AWS Tutorial)" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.377">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To get started with AWS Secrets Manager: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Identify your secrets and locate where they are used in your applications. 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console. 
&lt;/div&gt; 
&lt;div&gt;
  Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets. 
&lt;/div&gt; 
&lt;div&gt;
  If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation. 
&lt;/div&gt; 
&lt;div&gt;
  If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret. 
&lt;/div&gt; 
&lt;div&gt;
  Update your applications to retrieve secrets from Secrets Manager. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How do I know when AWS Secrets Manager rotates a database credential?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE9" name="Use CloudWatch alarms with AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use CloudWatch alarms with AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  ElastiCache provides metrics that enable you to monitor your clusters. You can access these metrics through CloudWatch. ElastiCache provides both host-level metrics (for example, CPU usage) and metrics that are specific to the cache engine software (for example, cache gets and cache misses). These metrics are measured and published for each Cache node in 60-second intervals. 
&lt;/div&gt; 
&lt;div&gt;
  By setting CloudWatch alarms on certain key metrics, you will be notified if your cache cluster's performance starts to degrade. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Monitoring CloudWatch Cluster and Node Metrics (Console) 
&lt;/div&gt; 
&lt;div&gt;
  To gather CPU utilization statistics for a cache cluster 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console at https://console.aws.amazon.com/elasticache/. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Select the cache nodes you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Selecting more than 20 nodes disables viewing metrics on the console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. On the Cache Clusters page of the AWS Management Console, click the name of one or more cache clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The detail page for the cache cluster appears. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. Click the Nodes tab at the top of the window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. On the Nodes tab of the detail window, select the cache nodes that you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A list of available CloudWatch Metrics appears at the bottom of the console window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. Click on the CPU Utilization metric. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CloudWatch console will open, displaying your selected metrics. You can use the Statistic and Period drop-down list boxes and Time Range tab to change the metrics being displayed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring Use with CloudWatch Metrics - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheMetrics.html"/>
            <reference name="Monitoring Use with CloudWatch Metrics - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.377">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.616">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.377">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                    <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="e1d90ad7-72c4-4d8f-adab-1e25b8ed68d3" diagramComponentId="028a80b4-7605-4a25-b54a-feee0dd4305d" ref="58da99ff-97e7-441c-8327-b9b822456bcf" name="Web Client" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-client" generatedByRules="false" persistent="false">
      <tags/>
      <questions>
        <question ref="encryptedTransport" answer="true" manuallyModified="false"/>
        <question ref="eu_gdpr.UI.yes" answer="true" manuallyModified="false"/>
        <question ref="eu_gdpr.handle.group.yes" answer="true" manuallyModified="false"/>
        <question ref="eu_gdpr.internationalTransfer.yes" answer="true" manuallyModified="false"/>
        <question ref="oauth2.0.usage.yes" answer="true" manuallyModified="false"/>
        <question ref="oauth2.role.client" answer="true" manuallyModified="false"/>
        <question ref="openid.role.relying.party" answer="true" manuallyModified="false"/>
        <question ref="openid.usage.yes" answer="true" manuallyModified="false"/>
        <question ref="pci.processed.cvv2" answer="true" manuallyModified="false"/>
        <question ref="pci.processed.pan" answer="true" manuallyModified="false"/>
        <question ref="secret.management.crypto.yes" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="20"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Customer Data" accessType="20"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="20"/>
        <asset name="Credit Card Data" accessType="40"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="PCI-R6-6.5" name="Applications are vulnerable to known flaws" state="0" impact="100" issueId="" issueLink="">
          <desc>The applications are vulnerable to injection flaws, particularly SQL injections. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.656">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.8" name="CSRF against redirect-uri" state="0" impact="100" issueId="" issueLink="">
          <desc>Cross-site request forgery (CSRF) is a web-based attack whereby HTTP requests are transmitted
                        from a user that the web site trusts or has authenticated (e.g., via HTTP redirects or HTML
                        forms). CSRF attacks on OAuth approvals can allow an attacker to obtain authorization to OAuth
                        protected resources without the consent of the user.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This attack works against the redirect URI used in the authorization "code" flow. An attacker
                        could authorize an authorization "code" to their own protected resources on an authorization
                        server. He then aborts the redirect flow back to the client on his device and tricks the victim
                        into executing the redirect back to the client. The client receives the redirect, fetches the
                        token(s) from the authorization server, and associates the victim's client session with the
                        resources accessible using the token.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: The user accesses resources on behalf of the attacker. The effective impact depends on
                        the type of resource accessed. For example, the user may upload private items to an attacker's
                        resources. Or, when using OAuth in 3rd-party login scenarios, the user may associate his client
                        account with the attacker's identity at the external Identity Provider. In this way, the
                        attacker could easily access the victim's data at the client by logging in from another device
                        with his credentials at the external Identity Provider.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.3.2" name="Client obtains scopes without end-user authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>All interaction with the resource owner is performed by the client.
                        Thus it might, intentionally or unintentionally, happen that the
                        client obtains a token with scope unknown for, or unintended by, the
                        resource owner. For example, the resource owner might think the
                        client needs and acquires read-only access to its media storage only
                        but the client tries to acquire an access token with full access
                        permissions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read
                        the code or reverse engineer it if it is compiled in any form. If the client side code includes
                        secret keys, sensitive business logic (like client authentication) or proprietary information,
                        all of this is directly exposed to the user, allowing them to get the sensitive information or
                        study the business logic with the aim of bypassing it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some examples of this vulnerability are:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a
                        cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt;
                        &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client
                        calls without a proxy.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.217">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.13" name="Code substitution" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker could attempt to log into an application or web site using a victim's identity.
                        Applications relying on identity data provided by an OAuth protected service API to login users
                        are vulnerable to this threat. This pattern can be found in so-called "social login" scenarios.
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        As a prerequisite, a resource server offers an API to obtain personal information about a user
                        that could be interpreted as having obtained a user identity. In this sense, the client is
                        treating the resource server API as an "identity" API. A client utilizes OAuth to obtain an
                        access token for the identity API. It then queries the identity API for an identifier and uses
                        it to look up its internal user account data (login). The client assumes that, because it was
                        able to obtain information about the user, the user has been authenticated.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the client uses the grant type "code", the attacker needs to gather a valid authorization
                        "code" of the respective victim from the same Identity Provider used by the target client
                        application. The attacker tricks the victim into logging into a malicious app (which may appear
                        to be legitimate to the Identity Provider) using the same Identity Provider as the target
                        application. This results in the Identity Provider's authorization server issuing an
                        authorization "code" for the respective identity API. The malicious app then sends this code to
                        the attacker, which in turn triggers a login process within the target application. The attacker
                        now manipulates the authorization response and substitutes their code (bound to their identity)
                        for the victim's code. This code is then exchanged by the client for an access token, which in
                        turn is accepted by the identity API, since the audience, with respect to the resource server,
                        is correct. But since the identifier returned by the identity API is determined by the identity
                        in the access token (issued based on the victim's code), the attacker is logged into the target
                        application under the victim's identity.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: The attacker gains access to an application and user-specific data within the
                        application.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.12" name="DoS using manufactured authorization codes" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker who owns a botnet can locate the redirect URIs of clients that listen on HTTP,
                        access them with random authorization "codes", and cause a large number of HTTPS connections to
                        be concentrated onto the authorization server. This can result in a denial-of-service (DoS)
                        attack on the authorization server.
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This attack can still be effective even when CSRF defense/the "state" parameter (see
                        &lt;a href="https://tools.ietf.org/html/rfc6819#section-4.4.1.8"&gt;Section 4.4.1.8&lt;/a&gt;)
                        is deployed on the client side. With such a defense, the attacker might need to incur an
                        additional HTTP request to obtain a valid CSRF code/"state" parameter. This apparently cuts down
                        the effectiveness of the attack by a factor of 2. However, if the HTTPS/HTTP cost ratio is
                        higher than 2 (the cost factor is estimated to be around 3.5x at [
                        &lt;a href="https://tools.ietf.org/html/rfc6819#ref-SSL-Latency" title="&amp;quot;SSL handshake
                        latency and HTTPS optimizations&amp;quot;"&gt;SSL-Latency&lt;/a&gt;]), the attacker still
                        achieves a magnification of resource utilization at the expense of the authorization server.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: There are a few effects that the attacker can accomplish with this OAuth flow that they
                        cannot easily achieve otherwise.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Connection laundering: With the clients as the relay between the attacker and the
                        authorization server, the authorization server learns little or no information about the
                        identity of the attacker. Defenses such as rate-limiting on the offending attacker machines are
                        less effective because it is difficult to identify the attacking machines. Although an attacker
                        could also launder its connections through an anonymizing system such as Tor, the effectiveness
                        of that approach depends on the capacity of the anonymizing system. On the other hand, a
                        potentially large number of OAuth clients could be utilized for this attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Asymmetric resource utilization: The attacker incurs the cost of an HTTP connection
                        and causes an HTTPS connection to be made on the authorization server; the attacker can
                        coordinate the timing of such HTTPS connections across multiple clients relatively easily.
                        Although the attacker could achieve something similar, say, by including an iFrame pointing to
                        the HTTPS URL of the authorization server in an HTTP web page and luring web users to visit that
                        page, timing attacks using such a scheme may be more difficult, as it seems nontrivial to
                        synchronize a large number of users to simultaneously visit a particular site under the
                        attacker's control.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.727">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is
                        theoretically sound, but is not strong enough for the level of protection required. A weak
                        encryption scheme can be subjected to brute force attacks that have a reasonable chance of
                        succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-INSUFFICIENT-LOGGING" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it. 
          &lt;br /&gt; &lt;br /&gt;
          When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect&amp;nbsp;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-345" name="Insufficient Verification of Data Authenticity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not sufficiently verify the origin or authenticity of data, in a way that
                        causes it to accept invalid data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.373">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-INSUFFICIENT-INPUT-VALIDATION" name="Insufficient input validation" state="0" impact="100" issueId="" issueLink="">
          <desc>No logical checks to see if personal data which is uploaded into the application is correct (e.g. format requirements, input possibility controls, ...)</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the
                        system development life cycle. Such testing/evaluation is necessary because it confirms that the
                        required security controls are implemented correctly, operating as intended, enforcing the
                        desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.023">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-DATA-MAPPING" name="Lack of functionality to view personal data provided" state="0" impact="100" issueId="" issueLink="">
          <desc>No user functionality or information within application which can be used by data subjects to access his personal data or request his personal data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.470">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.6.6" name="Leak of confidential data in HTTP proxies" state="0" impact="100" issueId="" issueLink="">
          <desc>An OAuth HTTP authentication scheme as discussed in [&lt;a
                        href="https://tools.ietf.org/html/rfc6749" title="&amp;quot;The OAuth 2.0 Authorization
                        Framework&amp;quot;"&gt;RFC6749&lt;/a&gt;] is
                        optional. However, [&lt;a href="https://tools.ietf.org/html/rfc2616" title="&amp;quot;Hypertext
                        Transfer Protocol -- HTTP/1.1&amp;quot;"&gt;RFC2616&lt;/a&gt;] relies on the Authorization and
                        WWW-Authenticate headers to distinguish authenticated content so that
                        it can be protected. Proxies and caches, in particular, may fail to
                        adequately protect requests not using these headers. For example,
                        private authenticated content may be stored in (and thus be
                        retrievable from) publicly accessible caches.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.859">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.4" name="Malicious client obtains authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>A malicious client could pretend to be a valid client and obtain an access authorization in
                        this way. The malicious client could even utilize screen-scraping techniques in order to
                        simulate a user's consent in the authorization flow.
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Assumption: It is not the task of the authorization server to protect the end-user's device from
                        malicious software. This is the responsibility of the platform running on the particular device,
                        probably in cooperation with other components of the respective ecosystem (e.g., an application
                        management infrastructure). The sole responsibility of the authorization server is to control
                        access to the end-user's resources maintained in resource servers and to prevent unauthorized
                        access to them via the OAuth protocol. Based on this assumption, the following countermeasures
                        are available to cope with the threat.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.218">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM" name="No consent mechanism (conform GDPR &amp; E-privacy Regulation)" state="0" impact="100" issueId="" issueLink="">
          <desc>No consent mechanisms (or a consent mechanism that does not comply with the GDPR and E-privacy legislation consent requirements) so the organization is unable prove to data protection authorities that the processing is legitimate/legal.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.470">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-DATA-INTEGRITY-CHECKS" name="No data integrity checks" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate integrity protection (e.g. encryption, strong logical access rights, ...) which leaves personal data vulnerable towards man in the middle attacks.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY" name="No export functionality" state="0" impact="100" issueId="" issueLink="">
          <desc>No exportability functionality (for users or admins) which would allow the user to (directly or indirectly via an admin) export his personal data in a clear, readable format and transport it to another data controller.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.470">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-LEGAL-GROUND-INTERNATIONAL-TRANSFER" name="No legal ground used for international data transfer to third countries" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;No binding corporate rules or standard model clauses with a non-EU third party&lt;/li&gt; 
 &lt;li&gt;Inadequate due diligence of third parties&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.507">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-PROCESS" name="No process to edit and update personal data" state="0" impact="100" issueId="" issueLink="">
          <desc>No process through which the data subject can directly modify their personal information which is no longer correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.470">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-PUBLIC-PRIVACY-NOTICE" name="No public privacy notice" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt;
              &lt;li&gt;No or incomplete privacy notice&lt;/li&gt;
              &lt;li&gt;Privacy notice not findable for data subjects within the application&lt;/li&gt;
              &lt;li&gt;Privacy notice not given within 72 hours after data was gathered directly or indirectly from data subject&lt;/li&gt;
              &lt;/ul&gt;Data subject = person of whom personal data is processed</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.469">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-DELETION-FUNCTIONALITY" name="Not data deletion functionality" state="0" impact="100" issueId="" issueLink="">
          <desc>Personal data is not automatically deleted when retention periods have expired, which means data must be manually deleted by an administrator who can easily forget this task.Personal data that was deleted becomes operational again after a restoration because the data was not deleted from the back-ups nor was there a process in place to reidentify and delete personal data that was previously deleted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.1.3" name="Obtaining access tokens" state="0" impact="100" issueId="" issueLink="">
          <desc>Depending on the client type, there are different ways that access tokens may be revealed to
                        an attacker. Access tokens could be stolen from the device if the application stores them in a
                        storage device that is accessible to other applications.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: Where the token is a bearer token and no additional mechanism is used to identify the
                        client, the attacker can access all resources associated with the token and its scope.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.1.1" name="Obtaining client secrets" state="0" impact="100" issueId="" issueLink="">
          <desc>The attacker could try to get access to the secret of a particular client in order to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;replay its refresh tokens and authorization "codes", or&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;obtain tokens on behalf of the attacked client with the privileges of that "client_id"
                        acting as an instance of the client.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;The resulting impact would be the following:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Client authentication of access to the authorization server can be bypassed.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Stolen refresh tokens or authorization "codes" can be replayed.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;Depending on the client category, the following attacks could be utilized to obtain
                        the client secret.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Attack: Obtain Secret From Source Code or Binary:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This applies for all client types. For open source projects, secrets can be extracted directly
                        from source code in their public repositories. Secrets can be extracted from application
                        binaries just as easily when the published source is not available to the attacker. Even if an
                        application takes significant measures to obfuscate secrets in their application distribution,
                        one should consider that the secret can still be reverse-engineered by anyone with access to a
                        complete functioning application bundle or binary.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.1.2" name="Obtaining refresh token" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Depending on the client type, there are different ways that refresh tokens may be revealed to an
                        attacker. The following sub-sections give a more detailed description of the different attacks
                        with respect to different client types and further specialized countermeasures.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        An attacker may obtain the refresh tokens issued to a web application by way of overcoming the
                        web server's security controls.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: Since a web application manages the user accounts of a certain site, such an attack
                        would result in an exposure of all refresh tokens on that site to the attacker.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        On native clients, leakage of a refresh token typically affects a single user only.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Read from local file system: The attacker could try to get file system access on the device and
                        read the refresh tokens. The attacker could utilize a malicious application for that purpose.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The host device (e.g., mobile phone) may be stolen. In that case, the attacker gets access to
                        all applications under the identity of the legitimate user.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        All device data and applications are copied to another device. Applications are used as-is on
                        the target device.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.3.6" name="Online guessing" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker may try to guess valid username/password combinations using the grant type
                        "password".&amp;nbsp;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: Revelation of a single username/password combination.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.1.5" name="Open redirectors on client" state="0" impact="100" issueId="" issueLink="">
          <desc>An open redirector is an endpoint using a parameter to automatically redirect a user agent to
                        the location specified by the parameter value without any validation. If the authorization
                        server allows the client to register only part of the redirect URI, an attacker can use an open
                        redirector operated by the client to construct a redirect URI that will pass the authorization
                        server validation but will send the authorization "code" or access token to an endpoint under
                        the control of the attacker.
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Impact: An attacker could gain access to authorization "codes" or access tokens.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-BAD-ALGORITHMS" name="Profiling algorithms that lead to erroneous profiles" state="0" impact="100" issueId="" issueLink="">
          <desc>Bad algorithms which lead to erroneous profiles.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can
                        be leaked to users with access to the code. This access can be incidentally granted by
                        publishing the source code on a package-form or an online, public repository.

                        The unauthorized access to any of those secrets could lead to a compromise of sensitive data or
                        a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.218">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="PCI-R6-6.3" name="Security is not included in the Software Development Life Cycle" state="0" impact="100" issueId="" issueLink="">
          <desc>Security is missing during the requirement definition, design, analysis, and testing phases of software development.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.655">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the
                        contents of this URL, but it does not sufficiently ensure that the request is being sent to the
                        expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.374">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="PCI-R3-3.3" name="The full Primary Account Number (PAN) is displayed" state="0" impact="75" issueId="" issueLink="">
          <desc>The full Primary Account Number (PAN) is displayed</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.348">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-UNAUTHENTICATED-DATA-ACCESS" name="Unauthenticated data access" state="0" impact="100" issueId="" issueLink="">
          <desc>Authentication can be bypassed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-UNNECESSARY-PRIVILEGES" name="Unnecessary privileges to process the data" state="0" impact="100" issueId="" issueLink="">
          <desc>Authorization can be bypassed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-UNRECOVERED-SENSITIVE-DATA" name="Unrecovered sensitive data" state="0" impact="100" issueId="" issueLink="">
          <desc>The sensitive data cannot be recovered after the data has been accidentally or intentionally deleted due to non-existent data backup.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100" issueId="" issueLink="">
          <desc>The software may use insufficiently random numbers or values in a security context that
                        depends on unpredictable numbers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been
                        actively reviewed or maintained.
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.218">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.218">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="PCI-R6-6.5.6-C" name="Address all &quot;high risk&quot; vulnerabilities detected" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;All vulnerabilities identified by an organization's vulnerability risk-ranking
                        process (defined
                        in Requirement 6.1) as "high risk" that could affect the application should
                        be 
                        addressed during application development.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.6 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that coding techniques address any "high risk"
                            vulnerabilities that
                            could affect the
                            application, as identified in PCI DSS Requirement 6.1.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.583">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.3" name="Always keep the resource owner informed" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Transparency to the resource owner is a key element of the OAuth protocol. The user should
                        always be in control of the authorization processes and get the necessary information to make
                        informed decisions. Moreover, user involvement is a further security countermeasure. The user
                        can probably recognize certain kinds of attacks better than the authorization server.
                        Information can be presented/exchanged during the authorization process, after the authorization
                        process, and every time the user wishes to get informed by using techniques such as:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;User consent forms.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Notification messages (e.g., email, SMS, ...). Note that notifications can be a
                        phishing vector. Messages should be such that look-alike phishing messages cannot be derived
                        from them.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Activity/event logs.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;User self-care applications or portals.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Check that users can be informed about all the authorization processes by using techniques
                            such as:
                            &lt;/div&gt;
                            &lt;div&gt;&lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;User consent forms.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Notification messages (e.g., email, SMS, ...). Note that notifications can be a
                            phishing vector. Messages should be such that look-alike phishing messages cannot be derived
                            from them.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Activity/event logs.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;User self-care applications or portals.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.791">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;div&gt;
                        &lt;div&gt;
                        Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate
                        and authorized users can access the application data. It is important that an application
                        prevent unauthorized users gaining inappropriate access to each other's data. Although user A
                        and user B may both be trusted to access data within the application, they may be only authorized to
                        access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be
                        able to access user B's personal data by manipulating a request (typical examples are the
                        manipulation of an ID value or other object reference sent in the URL or body of an HTTP
                        request).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames.
                        The application must validate each request for protected data against the proven identity of the
                        user. Before providing access to restricted resources the application must:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure the user has undergone appropriate authentication (identification and
                        verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this
                        with a password, token, or other verification. Typically this is done by checking the
                        validity of the session token issued after login.&lt;/li&gt;
                        &lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g.
                        their confirmed identify is checked against a server-side access control matrix to determine
                        whether they may access the requested resource.&lt;/li&gt;
                        &lt;li&gt;Access controls should be granular and make it possible to issue to individual resources 
                        to individual users or roles.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        URL and asset based access control is provided by most web-frameworks, and it is preferable to
                        use an established and proven framework.
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="CM-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;
                            &lt;li&gt;Login as user A in browser A.&lt;/li&gt;
                            &lt;li&gt;Login as user B in browser B.&lt;/li&gt;
                            &lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;
                            &lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;
                            &lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;
                            &lt;li&gt;Perform the operation as user A again, but this time intercept all the requests
                            and replace user A's session ID with that of user B.&lt;/li&gt;
                            &lt;li&gt;Ensure that user A's sensitive data is &lt;b&gt;not &lt;/b&gt;visible.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.027">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.4.2.5" name="Ask user consent approval with non-predictable input values" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The idea is to prevent programs from automatically checking a huge number of passwords, by
                        requiring human interaction.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: This has a negative impact on user experience.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that in some point of the authorization process a form (e.g. a CAPTCHA) needs to be
                            filled in order to continue.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-AUTOMATED-DECISIONS" name="Automated decisions and profiling" issueId="" issueLink="" platform="" cost="0" risk="77" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>You must involve the DPO to make sure that automated decisions are ethical and correct and to make sure that data subjects can object to the profiling activities (foresee a secondary process that can manually bypass the processing).</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.21" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.22" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Verify with the Data Protection Practitioner the reasoning for automatically gathering personal data from users for profiling purposes is compliant and justified with their requirements.&lt;/li&gt;
                &lt;li&gt;Verify user mechanisms are in place to object to these profiling activities.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.1.12-C1" name="Block access after repeated unsuccessful attempts to submit an authorization code" issueId="" issueLink="" platform="" cost="0" risk="74" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If the client authenticates the user, either through a single- sign-on protocol or through
                        local authentication, the client should suspend the access by a user account if the number of
                        invalid authorization "codes" submitted by this user exceeds a certain threshold.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access to a resource is blocked after unsuccessful authorization attempts.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.3.1-C" name="Clean up development and testing data" issueId="" issueLink="" platform="" cost="0" risk="81" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Remove development, test and/or custom application accounts, user IDs, and passwords
                        before
                        applications become active or are released to customers.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt; &lt;/p&gt;
                        &lt;p&gt;Development, test and/or custom application accounts, user IDs, and passwords should be
                        removed
                        from production code before the application becomes active or is released to customers, since
                        these items
                        may give away information about the functioning of the application. Possession of such
                        information could
                        make it easier to compromise the application and related cardholder data.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.3.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.3.1 Examine written software-development procedures and interview responsible
                            personnel to
                            verify that pre-production and/or custom application accounts, user IDs and/or passwords
                            are removed
                            before an application goes into production or is released to customers.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.4.1" name="Configure authorization headers" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization headers are recognized and specially treated by HTTP proxies and servers. Thus,
                        the usage of such headers for sending access tokens to resource servers reduces the likelihood
                        of leakage or unintended storage of authenticated requests in general, and especially
                        Authorization headers.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Check that common Authorization request headers are being used.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Some of them are:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Basic Auth&lt;/li&gt;
                            &lt;li&gt;Bearer Token&lt;/li&gt;
                            &lt;li&gt;API Key&lt;/li&gt;
                            &lt;li&gt;Digest Auth&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.1.13-C1" name="Configure client_id in every request to the authorization server" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All clients must indicate their client ids with every request to exchange an authorization
                        "code" for an access token. The authorization server must validate whether the particular
                        authorization "code" has been issued to the particular client. If possible, the client shall be
                        authenticated beforehand.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that every request to the authorization server has the "client_id" parameter.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.2.4" name="Configure options to revoke refresh tokens" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server may allow clients or end users to explicitly request the invalidation
                        of refresh tokens. A mechanism to revoke tokens is specified in [
                        &lt;a href="https://tools.ietf.org/html/rfc6819#ref-OAuth-REVOCATION" title="&amp;quot;Token
                        Revocation&amp;quot;"&gt;OAuth-REVOCATION&lt;/a&gt;].
                        &lt;div&gt;
                        &lt;br&gt; This is a countermeasure against:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;device theft,&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;impersonation of a resource owner, or&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;suspected compromised client applications. &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the recommendations listed in RFC7009 are followed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references>
              <reference name="RFC7009" url="https://tools.ietf.org/html/rfc7009"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" name="Create a consent mechanism" issueId="" issueLink="" platform="" cost="0" risk="77" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Implement a consent mechanism which allows data subjects (persons of whom personal data is processed) to give their consent for certain processing activities. This is mainly used for cookies and secondary purposes such as direct marketing, newsletters, ...&lt;br/&gt; 
          &lt;br/&gt;The consent mechanism often consists of a check box. These check boxes are required for every single secondary purpose (not allowed to implement one consent box for all purposes). The consent boxes should: &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;be inactive by default (the data subject should active the box)&lt;/li&gt;
              &lt;li&gt;revocable (the data subject must be able to revoke the consent in a way that is as easy as it was to give consent, this can be done by implementing a platform on which the data subject can actively manage his/her consents) &lt;/li&gt;
              &lt;li&gt;Traceable (a consent database is required to track when consent was given and revoked. This must include timestamps) &lt;/li&gt;
              &lt;/ul&gt;
              &lt;br /&gt;You must involve the DPO and/or legal department to decide on the legitimation that can be used.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.6" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.7" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify appropriate user personal data consent mechanisms are in place and are not pre-granted.&lt;/li&gt;
                &lt;li&gt;Verify users can modify their data consent choices in a manner as easy as giving consent.&lt;/li&gt;
                &lt;li&gt;Verify the above above user activities have been appropriately logged.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.4-C" name="Do not transmit data over insecure channels" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Applications that fail to adequately encrypt network traffic using strong
                        cryptography are at
                        increased risk of being compromised and exposing cardholder data. If an attacker is able to
                        exploit weak
                        cryptographic processes, they may be able to gain control of an application or even gain
                        clear-text access
                        to encrypted data.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.4 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that insecure communications are addressed by means of coding techniques that
                            properly
                            authenticate and encrypt all sensitive communications.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.3-C" name="Do not use insecure cryptographic storage" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Applications that do not utilize strong cryptographic functions properly to store
                        data are at
                        increased risk of being compromised and exposing authentication credentials and/or cardholder
                        data. If an
                        attacker is able to exploit weak cryptographic processes, they may be able to gain clear-text
                        access to
                        encrypted data.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.3 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that insecure cryptographic storage is addressed by means of coding techniques
                            that: &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; &lt;p&gt;Prevent cryptographic flaws. &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Use strong cryptographic algorithms and keys.&amp;nbsp;&lt;/p&gt; &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in
                        transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end
                        encryption between the client and server, terminating within a secure environment on the
                        server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of
                        (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively,
                        asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested
                        implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established
                            encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only
                            strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use
                            unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review
                            configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.099">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="STRONG-ALGORITHMS-PROTOCOLS" name="Ensure that only strong algorithms, cyphers and protocols are used" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Ensure that the application is using strong algorithms, cyphers and protocols. The general
                        practice and required minimum key lengths depend on the scenarios listed below.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048 bits&lt;/li&gt;
                        &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                        &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                        &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                        &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                        &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST SP 800-175b" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-175b.pdf"/>
            <reference name="NIST SP 800-57" url="https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-5/final"/>
            <reference name="OSA SC-01 System And Communications Protection Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/61-08_02_SC-01"/>
            <reference name="OSA SC-12 Cryptographic Key Establishment And Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/72-08_02_SC-12"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP cryptographic storage" url="https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet"/>
            <reference name="OWASP key management" url="https://www.owasp.org/index.php/Key_Management_Cheat_Sheet"/>
          </references>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the Cryptographic protocols comply to the best practices listed bellow:
                            &lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048
                            bits&lt;/li&gt;
                            &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                            &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                            &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                            &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                            &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;br /&gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="72" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side
                        technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or
                        client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and
                            Silverlight.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.099">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="crypto-operations" name="Ensure the application is implementing known good cryptographic operations" issueId="" issueLink="" platform="" cost="0" risk="83" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cryptography (or crypto) is one of the more advanced topics of information security,
                        and one whose understanding requires the most schooling and experience. It is difficult to get
                        right because there are many approaches to encryption, each with advantages and disadvantages
                        that need to be thoroughly understood by web solution architects and developers. In addition,
                        serious cryptography research is typically based in advanced mathematics and number theory,
                        providing a serious barrier to entry.&lt;/p&gt;
                        &lt;p&gt;Instead of building cryptographic capability from scratch, it is strongly recommended
                        that peer reviewed and open solutions be used, such as the Google Tink project, Libsodium, and
                        secure storage capability built into many software frameworks and cloud services.&lt;/p&gt;
                        &lt;p&gt;Using crypto in a secure way is more complicated than choosing the right crypto
                        algorithms. It also requires secure deployments, secure APIs, secure key-management, secure
                        randomness generation, and secure protocols.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Random number, encryption or hashing algorithms, key lengths, rounds, ciphers or
                        modes, shall be reconfigured, upgraded, or swapped at any time, to protect against cryptographic
                        breaks.&lt;/li&gt;
                        &lt;li&gt;Nonces, initialization vectors, and other single use numbers must not be used more
                        than once with a given encryption key. The method of generation must be appropriate for the
                        algorithm being used.&lt;/li&gt;
                        &lt;li&gt;Encrypted data shall be authenticated via signatures, authenticated cipher modes, or
                        HMAC to ensure that ciphertext is not altered by an unauthorized party.&lt;/li&gt;
                        &lt;li&gt;Cryptographic operations shall be constant-time, with no 'short-circuit' operations in
                        comparisons, calculations, or returns, to avoid leaking information.&lt;br /&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Cryptographic Storage Cheat_Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html"/>
            <reference name="OWASP Guide to Cryptography" url="https://www.owasp.org/index.php/Guide_to_Cryptography"/>
            <reference name="OWASP Top 10 Proactive Controls C8: Protect Data Everywhere" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html"/>
          </references>
          <standards>
            <standard ref="6.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.2.8" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Review the source code:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Searching for the following keywords to check if any weak encryption algorithm is
                            used: &lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;MD4, MD5, RC4, RC2, DES, Blowfish, SHA-1, ECB&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Searching for &amp;quot;ECB&amp;quot; or &amp;quot;Cipher.getInstance&amp;quot;,
                            the ECB should not be used in symmetric encryption.&lt;/li&gt;
                            &lt;li&gt;Review if different IV (initial Vector) is used.&lt;/li&gt;
                            &lt;li&gt;Use static code analysis tool to do source code review related with insecure
                            crypto modes of operation. &lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;span&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;ul&gt;
                            &lt;/ul&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.578">
              <output/>
            </source>
            <references>
              <reference name="OWASP Codereview practices for Crytography" url="https://www.owasp.org/index.php/Codereview-Cryptography"/>
              <reference name="OWASP Testing for Weak Encryption (OTG-CRYPST-004)" url="https://www.owasp.org/index.php/Testing_for_Weak_Encryption_(OTG-CRYPST-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oidc-best-practices" name="Follow best practices for advanced OpenID Connect clients" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The following recommendations are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use the Hybrid Flow&lt;/li&gt;&lt;li&gt;Be
                        sure you only send the Authorization Code to the correct issuer to prevent a IDP mix-up attack.&lt;/li&gt;&lt;li&gt;Use
                        a distinct redirect_uri for each OpenID Connect Provider&lt;/li&gt;&lt;li&gt;If using a OAuth
                        Public Client implement Proof Key for Code Exchange by OAuth Public Clients and use SHA-2
                        (AppAuth is recommended)&lt;/li&gt;&lt;li&gt;Use TLS 1.2 or later and follow RFC 7525&lt;/li&gt;&lt;li&gt;implement
                        Mutual TLS Profiles for OAuth Clients or Token Binding Protocol&lt;/li&gt;&lt;li&gt;Use
                        acr_values sending in the OpenID Connect Authentication Request&lt;ul&gt;&lt;li&gt;default_acr_values
                        can be registered in the OAuth 2.0 Client Registration&lt;/li&gt;&lt;li&gt;verify id_token for
                        acceptable acr claim.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use FIDO&lt;/li&gt;&lt;li&gt;Cryptography
                        Guidelines&lt;ul&gt;&lt;li&gt;RSA should use minimum 2048 bit keys&lt;/li&gt;&lt;li&gt;Elliptic
                        Curve key should be minimum of 160 bits&lt;/li&gt;&lt;li&gt;client Secret should be minimum of
                        128 bits is using symmetric Key Cryptography&lt;/li&gt;&lt;li&gt;Use PS256 or ES256 Digital
                        Signature algorithms&lt;/li&gt;&lt;li&gt;OpenID Connect Federation provides an out-of-band
                        Key-Exchange for signing keys.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use only the trusted
                        authorization servers and do not allow arbitrary authorization servers.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OpenID Connect Best Practices" url="https://ldapwiki.com/wiki/Best%20Practices%20OpenID%20Connect"/>
            <reference name="OpenID Foundation: OIDC Core 1.0" url="https://openid.net/specs/openid-connect-core-1_0.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.336">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-BACKUP" name="Implement a Backup and Recovery process" issueId="" issueLink="" platform="" cost="0" risk="77" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Ensure backup policy is active and tested.The policy should describe the required recovery time objective (RTO) and recovery point objective (RPO) so that the availability of personal data can be restored in a timely manner (based upon the requirements specified by the DPO/CISO).
          &lt;br /&gt;&lt;br /&gt;
          Ensure an SLA has been defined for data availability. How 'timely manner' will be interpreted depends on your SLA.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="8.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Verify backup policy documentation exists that are up-to-date and in compliance with the requirements of the Data Protection Practitioner.&lt;/li&gt;
                &lt;li&gt;Regularly test data backup procedures and data restoration.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.7-C" name="Implement cross-site scripting (XSS) mechanisms" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;XSS flaws occur whenever an application takes user-supplied data and sends it to a web browser without first validating or encoding that content. XSS allows attackers to execute script in the victim's browser, which can hijack user sessions, deface websites, possibly introduce worms, etc.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.7 Examine software-development policies and procedures and interview responsible personnel to verify that cross-site scripting (XSS) is addressed by means of coding techniques that validate all parameters before inclusion and use context-sensitive escaping, among other things.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-INTEGRITY" name="Implement data sanity and data integrity checks" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Implement data sanity and data integrity checks. Data sanity checks are run on a regular basis to validate the sanity of the data (e.g. through statistical analysis). Data integrity checks are performed when data is entered or changed to ensure the data complies to business validation rules as well as common sense rules (e.g. age should not be over 130 years)</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Test if users are able to submit malformed, invalid, untrusted, unauthorized data leveraging an intercepting proxy. Especially consider the issue of bypassing non-editable controls such as hidden-fields&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-EXPORT-FUNCTIONALITY" name="Implement export functionality" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;All data gathered from a user should be exportable. This does not include derived fields that were created by the organization, such as customer segmentation fields.&amp;nbsp;&lt;br&gt;&lt;br&gt;Provide or develop the means to facilitate data portability requests, such as download tools or Application Programming Interfaces (API).&amp;nbsp;&lt;br&gt;&lt;br&gt;Guarantees should be in place that personal data is transmitted in a structured, commonly used and machine-readable format, and ensure the interoperability of the data format, provided in the exercise of a data portability request.&amp;nbsp;&lt;br&gt;see also - http://ec.europa.eu/newsroom/document.cfm?doc_id=44099 (Guidelines on the right to "data portability" by WP29)"&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.20" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify users have the functionality to request personal data transfer and/or download their own data.&lt;/li&gt;
                &lt;li&gt;Verify data is in a form acceptable to the Data Protection Practitioner.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-IMPLEMENT-FORGET" name="Implement forget user functionality" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Make sure that your deletion functionality also facilitates the manual deletion of one data subject (person whose personal data is processed) at any given point in time. All the data of the data subject should be deleted from the operational databases and back-ups.&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;p&gt;You should develop a script to ensure the re-deletion of data subjects (persons whose personal data is processed) who exercised their right to be forgotten and run it after each database restore. The data subjects should be deleted from the script once the retention period of the data has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.17" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Verify the capability to delete a user's personal data from within operational storage.&lt;/li&gt;
                &lt;li&gt;Verify that this user data will not be reactivated during the restoration of a data backup.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-INPUT-VADILATION" name="Implement input validation controls" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Implement input validation controls to ensure personal data is captured correctly. This may include:
              &lt;ol&gt;
              &lt;li&gt;Input validation based on business logic rules (All data needs to be validated before processing. Ensure the type of data is checked as well its range when applicable (e.g : age between 0 and 150)&lt;/li&gt;
              &lt;li&gt;Restrict input to trusted sources (Eg. E-ID) and formats&lt;/li&gt;
              &lt;li&gt;Let the data subject (=person of whom personal data is processed) manually input his/her data and/or review his data before submitting&lt;/li&gt;
              &lt;li&gt;Review &amp;amp; Resolution of errors (Supplemental Guidance: Resolution of input validation errors includes, for example, correcting systemic causes of errors and resubmitting transactions with corrected input)&lt;/li&gt;
              &lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Verify user personal data is properly formed with strong validation patterns both syntactically (eg dates) and semantically (eg age is within expected range).&lt;/li&gt;
                &lt;li&gt;Test by attempting to submit malformed and logically invalid personal data into the user interface.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.10-C" name="Implement robust authentication and session management" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Secure authentication and session management prevent unauthorized individuals from
                        compromising legitimate account credentials, keys, or session tokens that would otherwise enable
                        an
                        intruder to assume the identity of an authorized user.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.10 Examine software development policies and procedures and interview
                            responsible
                            personnel to verify that broken authentication and session management are addressed via
                            coding techniques
                            that commonly include: &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; &lt;p&gt;Flagging session tokens (for example cookies) as "secure".
                            &lt;/p&gt;
                            &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Not exposing session IDs in the URL. &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Incorporating appropriate time-outs and rotation of session IDs after a
                            successful
                            login.&amp;nbsp;&lt;/p&gt; &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.5-C" name="Implement robust error handling" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Applications can unintentionally leak information about their configuration or
                        internal
                        workings, or expose privileged information through improper error handling methods. Attackers
                        use this
                        weakness to steal sensitive data or compromise the system altogether. If a malicious individual
                        can create
                        errors that the application does not handle properly, they can gain detailed system information,
                        create
                        denial-of-service interruptions, cause security to fail, or crash the server. For example, the
                        message &amp;quot;incorrect
                        password provided&amp;quot; tells an attacker that the user ID provided was accurate and they
                        should focus
                        their efforts only on the password. Use more generic error messages, like &amp;quot;data could
                        not be
                        verified.&amp;quot;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.5 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that improper error handling is addressed by means of coding techniques that do
                            not leak
                            information via error messages (for example, by returning generic error details rather than specific ones).&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.8-C" name="Implement robust server side access control" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Improper access control refers to cases such as insecure direct object references, failure to
                        restrict URL
                        access, directory traversal, and failure to restrict user access to functions.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt; &lt;/p&gt;
                        &lt;p&gt;A direct object reference occurs when a developer exposes a reference to an internal
                        implementation
                        object, such as a file, directory, database record, or key, as a URL or form parameter.
                        Attackers can
                        manipulate those references to access other objects without authorization.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Consistently enforce access control in the presentation layer and business logic for all
                        URLs.
                        Frequently, the only way an application protects a sensitive functionality is by preventing the
                        display of
                        links or URLs to unauthorized users. Attackers can use this weakness to perform
                        unauthorized
                        operations by accessing those URLs directly.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;An attacker may be able to enumerate and navigate the directory structure of a website
                        (directory
                        traversal) thus gaining access to unauthorized information as well as further insight
                        into the
                        workings of the site for later exploitation.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;If user interfaces permit access to unauthorized functions, this access could result in
                        unauthorized individuals gaining access to privileged credentials or cardholder data. Only
                        authorized users
                        should be permitted to access direct object references to sensitive resources. Limiting access
                        to data
                        resources will help prevent cardholder data from being presented to unauthorized resources.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.8 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that improper access control-such as insecure direct object
                            references,
                            failure to
                            restrict URL access, and directory traversal-is addressed by means of a coding technique that
                            includes:
                            &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; &lt;p&gt;Proper authentication of users &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Input sanitization &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Protection against the exposure of internal object references to users &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;User interfaces that do not permit access to unauthorized functions.&amp;nbsp;&lt;/p&gt;
                            &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and
                        subject to manipulation by a malicious actor, regardless of the controls in place (e.g.
                        encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application
                        logic decisions, such as access controls, and data considered sensitive or secret, such as
                        encryption keys. While controls may be duplicated on the client-side to improve the user
                        experience, it is important to have these enforced on the server-side.&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt;
                        &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required
                        should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be
                        considered tainted, and security decisions should not be made solely on this data. For example,
                        an insecure implementation could include a compiled application (e.g. Flash!) performing
                        authentication on the client-side against a stored password. The decompilation of the binary (in
                        this case flv file) or the interception and modification of controls between the client and
                        server could expose the password or allow unauthorized access to the authenticated application
                        content.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly
                            where client-side controls are implemented.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no
                            inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span
                            class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-EDITABLE-PERSONAL-DATA" name="Implement the process to edit personal data" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Individuals are entitled to have personal data rectified if it is inaccurate or incomplete. &lt;br /&gt;Provide a form or API for users to update or correct their data. If the personal data is shared with other systems you should also update the data there. Ensure that all data submitted by the user can be modified. No personal data should be read-only.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.15" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify users have the ability to edit inaccurate personal information either directly or via a form within the application user interface.&lt;/li&gt;
                &lt;li&gt;Ensure these personal data changes are replicated throughout the operational environment.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="follow-jwt-standard-generation-token" name="Implement token generation for stateless server following the recommendation of the JWT standard" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and
                        self-contained way for securely transmitting information between parties as a JSON object. This
                        information can be verified and trusted because it is digitally signed. A JWT token is created
                        during authentication and is verified by the server (or servers) before any processing.&lt;/p&gt;&lt;p&gt;However,
                        JWT's are often not saved by the server after initial creation. JWT's are typically created and
                        then handed to a client without being saved by the server in any way. The integrity of the token
                        is maintained through the use of digital signatures so a server can later verify that the JWT is
                        still valid and not been tampered with since its creation.&lt;/p&gt;&lt;p&gt;This approach is
                        both stateless and portable in the way that client and server technologies can be different yet
                        still interact.&lt;/p&gt;&lt;p&gt;Ensure implementation of the following requirements to protect
                        the stateless token for digital signatures, encryption and other countermeasures following the
                        requirements of JWT standard.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;To
                        create a JWT, the following steps are performed. The order of the steps is not significant in
                        cases where there are no dependencies between the inputs and outputs of the steps.&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create
                        a JWT Claims Set containing the desired claims.&amp;nbsp; Note that whitespace is explicitly
                        allowed in the representation and no canonicalization need be performed before encoding.&lt;/li&gt;&lt;li&gt;Let
                        the Message be the octets of the UTF-8 representation of the JWT Claims Set.&lt;/li&gt;&lt;li&gt;Create
                        a JOSE Header containing the desired set of Header Parameters. The JWT MUST conform to either
                        the [JWS] or [JWE] specifications. Note that whitespace is explicitly allowed in the
                        representation and no canonicalization need be performed before encoding.&lt;/li&gt;&lt;li&gt;Depending
                        upon whether the JWT is a JWS or JWE, there are two cases:&lt;ul&gt;&lt;li&gt;If the JWT is a
                        JWS, create a JWS using the Message as the JWS Payload; all steps specified in [JWS] for
                        creating a JWS MUST be followed.&lt;/li&gt;&lt;li&gt;Else, if the JWT is a JWE, create a JWE
                        using the Message as the plaintext for the JWE; all steps specified in [JWE] for creating a JWE
                        MUST be followed.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If a nested signing or encryption
                        operation will be performed, let the Message be the JWS or JWE, and return to Step 3, using a
                        "cty" (content type) value of "JWT" in the new JOSE Header created in that step.&lt;/li&gt;&lt;li&gt;Otherwise,
                        let the resulting JWT be the JWS or JWE.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC 7519" url="https://tools.ietf.org/html/rfc7519"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the stateless token uses digital signatures, encryption and other
                            countermeasures to protect against tampering, enveloping, relay, null cipher and key
                            substitution attacks.&lt;/p&gt;&lt;p&gt;When validating a JWT, the following steps are
                            performed. The order of the steps is not significant in cases where there are no
                            dependencies between the inputs and outputs of the steps.&amp;nbsp; If any of the listed
                            steps fail, then the JWT MUST be rejected -- that is, treated by the application as an
                            invalid input.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Verify that the JWT contains at least one period
                            ('.') character.&lt;/li&gt;&lt;li&gt;Let the Encoded JOSE Header be the portion of the JWT
                            before the first period ('.') character.&lt;/li&gt;&lt;li&gt;Base64url decode the Encoded
                            JOSE Header following the restriction that no line breaks, whitespace, or other additional
                            characters have been used.&lt;/li&gt;&lt;li&gt;Verify that the resulting octet sequence is a
                            UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159
                            [RFC7159]; let the JOSE Header be this JSON object.&lt;/li&gt;&lt;li&gt;Verify that the
                            resulting JOSE Header includes only parameters and values whose syntax and semantics are
                            both understood and supported or that are specified as being ignored when not understood.&lt;/li&gt;&lt;li&gt;Determine
                            whether the JWT is a JWS or a JWE using any of the methods described in Section 9 of [JWE].&lt;/li&gt;&lt;li&gt;Depending
                            upon whether the JWT is a JWS or JWE, there are two cases:&lt;ul&gt;&lt;li&gt;If the JWT is
                            a JWS, follow the steps specified in [JWS] for validating a JWS.&amp;nbsp; Let the Message
                            be the result of base64url decoding the JWS Payload.&lt;/li&gt;&lt;li&gt;Else, if the JWT is
                            a JWE, follow the steps specified in [JWE] for validating a JWE.&amp;nbsp; Let the Message
                            be the resulting plaintext.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If the JOSE Header
                            contains a "cty" (content type) value of "JWT", then the Message is a JWT that was the
                            subject of nested signing or encryption operations.&amp;nbsp; In this case, return to Step
                            1, using the Message as the JWT.&lt;/li&gt;&lt;li&gt;Otherwise, base64url decode the Message
                            following the restriction that no line breaks, whitespace, or other additional characters
                            have been used.&lt;/li&gt;&lt;li&gt;Verify that the resulting octet sequence is a
                            UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159
                            [RFC7159]; let the JWT Claims Set be this JSON object.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Finally,
                            note that it is an application decision which algorithms may be used in a given context.&amp;nbsp;
                            Even if a JWT can be successfully validated, unless the algorithms used in the JWT are
                            acceptable to the application, it SHOULD reject the JWT.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-PRIVACY-NOTICE" name="Integrate a privacy notice within the application" issueId="" issueLink="" platform="" cost="0" risk="71" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>You must involve the DPO in order to receive a GDPR compliant privacy notice. This notice should at least mention:
          &lt;br /&gt;&lt;br /&gt;(a) the identity and the contact details of the controller and, where applicable, of the controller's representative; 
          &lt;br /&gt;(b) the contact details of the Data Protection Officer, where applicable; 
          &lt;br /&gt;(c) the purposes of the processing for which the personal data are intended as well as the legal basis for the processing; 
          &lt;br /&gt;(d) the categories of personal data concerned;
          &lt;br /&gt;(e) the recipients or categories of recipients of the personal data;
          &lt;br /&gt;(f) where applicable, the fact that the controller intends to transfer personal data to a third country or international organization
          &lt;br /&gt;(g) the period for which the personal data will be stored, or if that is not possible, the criteria used to determine that period; 
          &lt;br /&gt;(h) where the processing is based on the legitimate interests pursued by the controller or by a third party; 
          &lt;br /&gt;(i) the existence of the right to request from the controller access to and rectification or erasure of personal data or restriction of processing concerning the data subject and to object to processing as well as the right to data portability; 
          &lt;br /&gt;(j) the existence of the right to withdraw consent at any time, without affecting the lawfulness of processing based on consent before its withdrawal; 
          &lt;br /&gt;(k) the right to lodge a complaint with a supervisory authority; 
          &lt;br /&gt;(l) from which source the personal data originate, and if applicable, whether it came from publicly accessible sources; 
          &lt;br /&gt;(m) the existence of automated decision-making, including profiling
          &lt;br /&gt;&lt;br /&gt;Integrate privacy notice in application, before data subjects enter or push their personal data.
          &lt;br /&gt;&lt;br /&gt;
          This data should also be provided towards the data subject if the data is not gathered directly from the data subject.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.12" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.13" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.14" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify users have easy access to privacy notices within the application interface.&lt;/li&gt;
                &lt;li&gt;Verify privacy notices are presented to the user before they submit their personal data.&lt;/li&gt;
                &lt;li&gt;Verify privacy notices are in accordance with the requirements of the Data Protection practitioner.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-KEY-MGMT" name="Isolate cryptographic processes - including master secrets - and consider the use of a virtualized or physical hardware key vaults (HSM)" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cryptographic processes require the use of a private key or a secret. If the private
                        key is stored poorly in the same service to be accessed, a compromise of the system could lead
                        to this private key or secret being stolen. This would give the attacker access to all
                        information.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The way to prevent this is
                        to keep cryptographic functionalities on a separate service that performs the
                        encryption/decryption on demand. It is better if this service uses virtualized or physical
                        hardware key vaults like a Hardware Security Module because those devices store the private key
                        and secrets securely.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Key
                        vaults and such implement security measures to prevent this information being extracted from
                        them&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-12 Cryptographic Key Establishment And Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/72-08_02_SC-12"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.6.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.10.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Identify the parts of your component which are using cryptographic
                            functions.&lt;/li&gt;&lt;li&gt;Check these are implemented by an external service which is
                            configured securely.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.3.5" name="Link the state parameter to user agent session" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The "state" parameter is used to link client requests and prevent CSRF attacks, for example,
                        attacks against the redirect URI. An attacker could inject their own authorization "code" or
                        access token, which can result in the client using an access token associated with the
                        attacker's protected resources rather than the victim's (e.g., save the victim's bank account
                        information to a protected resource controlled by the attacker).
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The client should utilize the "state" request parameter to send the authorization server a value
                        that binds the request to the user agent's authenticated state (e.g., a hash of the session
                        cookie used to authenticate the user agent) when making an authorization request. Once
                        authorization has been obtained from the end user, the authorization server redirects the
                        end-user's user agent back to the client with the required binding value contained in the
                        "state" parameter.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The binding value enables the client to verify the validity of the request by matching the
                        binding value to the user agent's authenticated state.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the "state" parameter is being sent to the authorization server with a value
                            that can prevent CSRF.
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            The following test can be used to check this:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;b&gt;Lack of State:&lt;/b&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the RP declines to provide a state variable, which is technically optional as per the
                            spec, they will be placing users at risk of CSRF attacks. Attackers can compose CSRF attacks
                            with modified Redirect URIs and an attacker's Code to authenticate the victim using attacker
                            resources.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the victim does not realize that the authentication code has been swapped, they may place
                            sensitive data inside attacker controlled resources. The reason this attack works is because
                            the state parameter in step 2 is unique to a session. If there is no state provided at step
                            2 of the OAuth flow there is nothing to verify the session token against.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Test Steps:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;On the initial request to the IDP, verify that the state value is passed as a URL
                            parameter.&lt;/li&gt;
                            &lt;li&gt;Continue stepping through the OAuth Flow until the Redirect URI is reached.&lt;/li&gt;
                            &lt;li&gt;Ensure that the Redirect URI has the state as a URL parameter.&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Ensure that if the service has multiple OAuth Endpoints or bounces after the
                            Redirect URI, that the final hop actually passes the state to the backend RP.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;b&gt;Insecure State:&lt;/b&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            The State variable should be treated like a CSRF token. If the value used for State is
                            predictable or otherwise brute forcible, than it's possible that an attacker could make
                            multiple CSRF attacks in an automated fashion and brute force authenticate a user with
                            attacker resources.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Test Steps:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;On the initial request to the IDP, view the State value passed as a URL parameter.&lt;/li&gt;
                            &lt;li&gt;Repeat this process, verifying that the State variable has sufficient entropy and
                            is not otherwise predictable.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;b&gt;Reused State:&lt;/b&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            The State variable is used to ensure that an attacker cannot perform CSRF attacks like those
                            detailed above. If the State variable is reused across multiple requests, there is a larger
                            impact of the state variable being compromised as it may still be valid for future sessions.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If an attacker only has access to a victim's State, they can compose a CSRF attack and use
                            an attacker code in order to authenticate the victim using attacker OAuth resources. This is
                            usually a medium severity issue but use your best judgment as the severity is tightly linked
                            to the ease of leaking a state variable.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Test Steps:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;On the initial request to the IDP, view the State value passed as a URL parameter.&lt;/li&gt;
                            &lt;li&gt;Repeat this process, verifying that the State variable has been changed between
                            requests.&lt;/li&gt;
                            &lt;li&gt;It's important to test this in the case that OAuth succeeds and in the case where
                            OAuth fails, either because the user rejected the scope, or because the Redirect URI didn't
                            go to the expected RP OAuth Endpoint.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;b&gt;Invalid State Validation:&lt;/b&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Sometimes a RP looks like they're doing everything correctly, passing the state with
                            sufficient entropy, keeping it unique per OAuth session, but behind the scenes they just
                            throw away the state token.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Alternatively, sometimes an attacker can omit the state variable and the request is treated
                            as correct. This test is to ensure that all of the state is validated, and there are no
                            bypasses which can be performed by simply ignoring the state.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Test Steps:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;On the initial request to the IDP, modify the State parameter passed as a URL
                            parameter by changing it to an invalid value.&lt;/li&gt;
                            &lt;li&gt;Complete the OAuth Flow, and validate that the returned code and invalid state are
                            rejected by the RP.&lt;/li&gt;
                            &lt;li&gt;Repeat steps 1-3 but omit the state variable altogether. Ensure that the RP
                            rejects the response from the IDP.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references>
              <reference name="Penetration Tester's Guide to Evaluating OAuth 2.0" url="https://maxfieldchen.com/posts/2020-05-17-penetration-testers-guide-oauth-2.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="77" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be precise enough to know who changed what and when). This includes data access from the application as well as data access from privileged accounts, such as database admins. In practice, this means logging both on application, middleware and operating system (OS) level.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees, administrators and malicious actors.&lt;/li&gt;
                &lt;li&gt;Verify appropriate logging of all the above activities are successful and sufficiently detailed.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.028">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-MANAGE-INTERNATIONAL-DATA-TRANSFERS" name="Manage international data transfers" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;You must involve the &lt;span class="caps"&gt;DPO&lt;/span&gt;/Legal in order to ensure that the international transfer of data is legal. The &lt;span class="caps"&gt;DPO&lt;/span&gt; can make use of adequacy decisions, Binding Corporate Rules (&lt;span class="caps"&gt;BCR&lt;/span&gt;s), standard EU model clauses or derivatives (Privacy shield) whenever they apply.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.44" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.45" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.46" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.47" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.48" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.49" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.50" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify that every international transfer of users' personal data to non-EU countries is compliant with the requirements of the Data Protection Officer.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.480">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R3-3.3-C" name="Mask the Primary Account Number to only display the first six and last four digits" issueId="" issueLink="" platform="" cost="0" risk="83" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>When displaying the PAN, unless you absolutely need the full number (and can justify this as a documented business need), it should be masked displaying, at a maximum, the first 6 digits and last 4 digits</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt; &lt;/p&gt;
                            &lt;p&gt;3.3.a Examine written policies and procedures for masking the display of PANs to
                            verify that: &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; &lt;p&gt;A list of roles that need access to displays of more than the first
                            six/last four digits
                            (including the full PAN) is documented, together with a legitimate business need for each role to
                            have such
                            access. &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;The PAN is masked when displayed such that only personnel with a
                            legitimate business
                            need can see more than the first six/last four digits of the PAN. &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;All roles not specifically authorized to see the full PAN only see
                            masked PANs.
                            &lt;/p&gt; &lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;3.3.b Examine system configurations to verify that the full PAN is only displayed for
                            users/roles
                            with a documented business need, and that the PAN is masked for all other requests. &lt;/p&gt;
                            &lt;p&gt;3.3.c Examine displays of PANs (for example, on screen, on paper receipts) to verify
                            that PANs are
                            masked when displaying cardholder data, and that only those with a legitimate business need
                            are able to
                            see more than the first six/last four digits of the PAN.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.312">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.1a-C" name="Perform input validation for all untrusted data" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Injection flaws, particularly SQL injections, are a commonly used method for
                        compromising
                        applications. An injection occurs when user-supplied data is sent to an interpreter as part of a
                        command or
                        query. The attacker's hostile data tricks the interpreter into executing unintended commands or
                        changing
                        data, and allows the attacker to attack components inside the network through the application
                        to initiate
                        attacks such as buffer overflows, or to reveal both confidential information and server
                        application
                        functionalities.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Information should be validated before being sent to the application-for example,
                        by
                        checking for
                        all alpha characters, mixes of alpha and numeric characters, etc.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.1a" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.a Examine software-development policies and procedures to verify that
                            developers have to complete up-to-date
                            training in secure coding techniques at least annually, based on
                            industry best
                            practices and guidance. &lt;/p&gt;
                            &lt;p&gt;6.5.b Examine records of training to verify that software developers receive
                            up-to-date training
                            on secure coding techniques at least annually, including how to avoid common coding
                            vulnerabilities.&lt;/p&gt;
                            &lt;p&gt;6.5.c Verify that processes are in place to protect applications from, at a
                            minimum, the
                            following vulnerabilities:&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-COMMUNICATION-CHANNEL" name="Provide a communication channel for the data subject for privacy questions" issueId="" issueLink="" platform="" cost="0" risk="74" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Provide a communication channel for the data subject for privacy questions (within the application or through other means (example. privacy@organization.com) and make it possible to export data so that you could provide an overview of all data that was delivered/imported by the data subject within the application.
          &lt;br /&gt;
          &lt;br /&gt;(Implementation Tip: Facebook has a functionality which allows users to manually request the right to information. This request automatically generates a downloadable report which includes all information that was gathered from the data subject).</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="Art.12" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.13" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.14" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.30" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Verify users have the functionality available within the application interface for easy contact routes for privacy questions.&lt;/li&gt;
                &lt;li&gt;Verify operational mechanisms are in place to gather all user personal data processed by the application and export that data to the user.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.418">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-2" name="Redirect URIs must be compared using exact string matching" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Considerations to migrate to OAuth2.1:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The complexity of implementing and managing pattern matching correctly obviously causes security
                        issues. This document therefore advises to simplify the required logic and configuration by
                        using exact redirect URI matching only. This means the authorization server MUST compare the two
                        URIs using simple string comparison as defined in [RFC3986], Section 6.2.1.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additional recommendations:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Servers on which callbacks are hosted MUST NOT expose open redirectors (see Section
                        4.9).&lt;/li&gt;
                        &lt;li&gt;Browsers reattach URL fragments to Location redirection URLs only if the URL in the
                        Location header does not already contain a fragment. Therefore, servers MAY prevent browsers
                        from reattaching fragments to redirection URLs by attaching an arbitrary fragment identifier,
                        for example "#_", to URLs in Location headers.&lt;/li&gt;
                        &lt;li&gt;Clients SHOULD use the authorization code response type instead of response types
                        causing access token issuance at the authorization endpoint. This offers countermeasures against
                        reuse of leaked credentials through the exchange process with the authorization server and token
                        replay through sender-constraining of the access tokens.&lt;/li&gt;
                        &lt;/ul&gt;If the origin and integrity of the authorization request containing the redirect URI
                        can be verified, for example when using [ &lt;a
                        href="https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-26" title="&amp;quot;The OAuth 2.0
                        Authorization Framework: JWT Secured Authorization Request (JAR)&amp;quot;"&gt;I-D.ietf-oauth-jwsreq&lt;/a&gt;]
                        or [ &lt;a href="http://www.ietf.org/internet-drafts/draft-ietf-oauth-par-02.txt" title="&amp;quot;OAuth
                        2.0 Pushed Authorization Requests&amp;quot;"&gt;I-D.ietf-oauth-par&lt;/a&gt;] with client
                        authentication, the authorization server MAY trust the redirect URI without further checks.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth 2.0 Pushed Authorization Requests" url="https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-20"/>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
            <reference name="RFC3986" url="https://tools.ietf.org/html/rfc3986"/>
            <reference name="The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)" url="https://tools.ietf.org/html/draft-ietf-oauth-par-01"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the authorization server compares the two URIs using simple string comparison
                            as defined in [RFC3986], Section 6.2.1.
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;Forward until you see a request to the IDP corresponding to Step 2. in the above
                            diagram.&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;It's possible that you won't see a redirect_uri parameter here. If this is the
                            case, it's likely registered to a single URI, but you can add it and try anyways.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Alter the redirect_uri URL parameter and replace it with the top level domain:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;aws.console.amazon.com/myservice -&gt; aws.console.amazon.com&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Continue through the OAuth flow, authenticating and granting access.&lt;/li&gt;
                            &lt;li&gt;If after the OAuth dance, the Browser is redirected to the top level domain, then
                            the site is vulnerable to this attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.337">
              <output/>
            </source>
            <references>
              <reference name="Penetration Tester's Guide to Evaluating OAuth 2.0" url="https://maxfieldchen.com/posts/2020-05-17-penetration-testers-guide-oauth-2.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.2.3" name="Refresh token rotation" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Refresh token rotation is intended to automatically detect and prevent attempts to use the
                        same refresh token in parallel from different apps/devices. This happens if a token gets stolen
                        from the client and is subsequently used by both the attacker and the legitimate client. The
                        basic idea is to change the refresh token value with every refresh request in order to detect
                        attempts to obtain access tokens using old refresh tokens. Since the authorization server cannot
                        determine whether the attacker or the legitimate client is trying to access, in case of such an
                        access attempt the valid refresh token and the access authorization associated with it are both
                        revoked.
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The OAuth specification supports this measure in that the token's response allows the
                        authorization server to return a new refresh token even for requests with grant type
                        "refresh_token".
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: This measure may cause problems in clustered environments, since usage of the currently
                        valid refresh token must be ensured. In such an environment, other measures might be more
                        appropriate.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the refresh token value changes with every refresh request in order to detect
                            attempts to obtain access tokens using old refresh tokens.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.5" name="Register full redirect URI" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>An authorization server should require all clients to register their "redirect_uri", and the
                        "redirect_uri" should be the full URI as defined in [
                        &lt;a href="https://tools.ietf.org/html/rfc6749" title="&amp;quot;The OAuth 2.0 Authorization
                        Framework&amp;quot;"&gt;RFC6749&lt;/a&gt;]. The way that this registration is performed is out
                        of scope of this document. As per the core spec, every actual redirect URI sent with the
                        respective "client_id" to the end-user authorization endpoint must match the registered redirect
                        URI. Where it does not match, the authorization server should assume that the inbound GET
                        request has been sent by an attacker and refuse it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: The authorization server should not redirect the user agent back to the redirect URI of
                        such an authorization request.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Validating the pre-registered "redirect_uri" is a countermeasure against the following threats:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Authorization "code" leakage through counterfeit web site: allows authorization
                        servers to detect attack attempts after the first redirect to an end-user authorization endpoint
                        ( &lt;a href="https://tools.ietf.org/html/rfc6819#section-4.4.1.7"&gt;Section 4.4.1.7&lt;/a&gt;).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Open redirector attack via a client redirection endpoint ( &lt;a
                        href="https://tools.ietf.org/html/rfc6819#section-4.1.5"&gt;Section 4.1.5&lt;/a&gt;).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Open redirector phishing attack via an authorization server redirection endpoint (
                        &lt;a href="https://tools.ietf.org/html/rfc6819#section-4.2.4"&gt;Section 4.2.4&lt;/a&gt;).&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;The underlying assumption of this measure is that an attacker will need to use
                        another redirect URI in order to get access to the authorization "code". Deployments might
                        consider the possibility of an attacker using spoofing attacks to a victim's device to
                        circumvent this security measure.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Pre-registering clients might not scale in some deployments (manual process) or require
                        dynamic client registration (not specified yet). With the lack of dynamic client registration, a
                        pre-registered "redirect_uri" only works for clients bound to certain deployments at
                        development/configuration time. As soon as dynamic resource server discovery is required, the
                        pre-registered "redirect_uri" may no longer be feasible.
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            To check if the URI validation is insufficient or not:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt;
                            &lt;li&gt;Forward until you see a request to the IDP corresponding to Step 2. in the above
                            diagram.&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;It's possible that you won't see a redirect_uri parameter here. If this is the
                            case, it's likely registered to a single URI, but you can add it and try anyways.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Alter the redirect_uri URL parameter and replace it with the top level domain:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;aws.console.amazon.com/myservice -&gt; aws.console.amazon.com&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Continue through the OAuth flow, authenticating and granting access.&lt;/li&gt;
                            &lt;li&gt;If after the OAuth dance, the Browser is redirected to the top level domain, then
                            the site is vulnerable to this attack.&lt;br&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Required" owner="david@doughty.uk.net" library="EU GDPR" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.029">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side
                        software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or
                        sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side
                        must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online
                        repositories, services, and other associated restricted content must have appropriate access
                        controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server
                        side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending
                        on the use case, this encryption may be asymmetric or public key, or symmetric using a shared
                        secret. Note however that reversible encryption on the client-side and in-memory storage are
                        still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular
                            expression patterns within the code, configuration and other files exposed on the client and
                            server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be
                            triggered before the code is published (in particular for public/open source code) as once
                            published it is likely to be archived (and any disclosed secrets would be exposed and/or
                            have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary
                            or persistent storage of sensitive or secret data on the client-side, and the protections in
                            place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.100">
              <output/>
            </source>
            <references>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.3.2-C" name="Review custom code prior to release to production" issueId="" issueLink="" platform="" cost="0" risk="81" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Review custom code prior to releasing it to production or customers in order to identify
                        any
                        potential coding vulnerability (using either manual or automated processes) and ensure at least
                        the
                        following:&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Code changes are reviewed by individuals other than the originating code author, and
                        by
                        individuals knowledgeable about code-review techniques and secure coding practices.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Code reviews ensure code is developed according to secure coding guidelines&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Appropriate corrections are implemented prior to release.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Code-review results are reviewed and approved by management prior to release.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt; &lt;/p&gt;
                        &lt;p&gt;Security vulnerabilities in custom code are commonly exploited by malicious individuals
                        to gain
                        access to a network and compromise cardholder data.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;An individual knowledgeable and experienced in code-review techniques should be
                        involved in the
                        review process. Code reviews should be performed by someone other than the developer of the code
                        to allow
                        for an independent, objective review. Automated tools or processes may also be used in lieu of
                        manual
                        reviews, but keep in mind that it may be difficult or even impossible for an automated tool to
                        identify some
                        coding issues.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Correcting coding errors before the code is deployed into a production environment or
                        released to
                        customers prevents the code exposing the environments to potential exploit. Faulty code is also
                        far more
                        difficult and expensive to address after it has been deployed or released into production
                        environments.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Including a formal review and sign-off by management prior to release helps to ensure
                        that code is
                        approved and has been developed in accordance with policies and procedures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.3.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt; &lt;/p&gt;
                            &lt;p&gt;&lt;b&gt;6.3.2.a &lt;/b&gt;Examine written software-development procedures and
                            interview
                            responsible personnel to verify that all custom application code changes are reviewed
                            (using either
                            manual or automated processes) as follows:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;p&gt;Code changes are reviewed by individuals other than the originating code
                            author, and by
                            individuals who are knowledgeable about code-review techniques and secure coding practices.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;p&gt;Code reviews ensure code is developed according to secure coding
                            guidelines (see PCI
                            DSS Requirement 6.5).&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;p&gt;Appropriate corrections are implemented prior to release.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;p&gt;Code-review results are reviewed and approved by management prior to
                            release.&amp;nbsp;&lt;/p&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;b&gt;6.3.2.b &lt;/b&gt;Select a sample of recent custom application changes and
                            verify that
                            custom application code is reviewed according to 6.3.2.a, above.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="93" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Use periodically a static code analysis tool to analyze the code and detect potentially
                        malicious code, such as time functions, unsafe file operations and networks connections. With
                        the scanning of static code, we ensure the integrity of the application.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Verify that a code analysis tool is in use and it is configured to detect potentially
                            malicious code, such as time functions, unsafe file operations and network connections.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:13.998">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-1" name="Send PKCE challenge with the authorization request" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Considerations to migrate to OAuth2.1:&lt;/p&gt;
                        &lt;p&gt;PKCE requires an additional one-time code to be sent to the OAuth server. This is used
                        to validate the request has not been intercepted or modified.&lt;/p&gt;
                        &lt;p&gt;The OAuth 2.1 draft specification requires that the PKCE challenge must be used with
                        every Authorization Code grant, protecting against the authorization code being hijacked by an
                        attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
            <reference name="Proof Key for Code Exchange by OAuth Public Clients" url="https://tools.ietf.org/html/rfc7636"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that PKCE is being used as indicated in RFC7636.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references>
              <reference name="Proof Key for Code Exchange by OAuth Public Clients" url="https://tools.ietf.org/html/rfc7636"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.2.6" name="Set X-FRAME-OPTIONS header" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For newer browsers, avoidance of iFrames can be enforced on the server side by using the
                        X-FRAME-OPTIONS header (see [
                        &lt;a href="https://tools.ietf.org/html/rfc6819#ref-X-Frame-Options" title="&amp;quot;HTTP
                        Header X-Frame-Options&amp;quot;"&gt;X-Frame-Options&lt;/a&gt;]). This header can have two
                        values, "DENY" and "SAMEORIGIN", which will block any framing or any framing by sites with a
                        different origin, respectively. The value "ALLOW-FROM" specifies a list of trusted origins that
                        iFrames may originate from. This is a countermeasure against the following threat: Clickjacking
                        attacks</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that X-FRAME-OPTIONS header appears in the authorization server responses.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.3.3" name="Store Secrets in Secure Storage" issueId="" issueLink="" platform="" cost="0" risk="87" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>There are different ways to store secrets of all kinds (tokens, client secrets) securely on a
                        device or server.
                        Most multi-user operating systems segregate the personal storage of different system users.
                        Moreover, most modern smartphone operating systems even support the storage of
                        application-specific data in separate areas of file systems and protect the data from access by
                        other applications. Additionally, applications can implement confidential data by using a
                        user-supplied secret, such as a PIN or password.
                        Another option is to swap refresh token storage to a trusted backend server. This option in turn
                        requires a resilient authentication mechanism between the client and backend server. Note:
                        Applications should ensure that confidential data is kept confidential even after reading from
                        secure storage, which typically means keeping this data in the local memory of the application.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use cookies to store access tokens instead of the localStorage. Make sure the cookies
                            have HttpOnly and Secure attributes set. If you MUST keep the access token on the front-end,
                            defend your application from Cross Site Scripting vulnerability using Content Security
                            Policy, HTML sanitizer (e.g. DOMPurity) and HTML encoding.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.793">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5-C" name="Train developers in up-to-date secure coding techniques" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;The application layer is high-risk and may be targeted by both internal and external
                        threats.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Requirements 6.5.1 through 6.5.10 are the minimum controls that should be in place, and
                        organizations should incorporate the relevant secure coding practices as applicable to the
                        particular
                        technology in their environment.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Application developers should be properly trained to identify and resolve issues
                        related to these
                        (and other) common coding vulnerabilities. Having staff knowledgeable about secure coding
                        guidelines should
                        minimize the number of security vulnerabilities introduced through poor coding practices.
                        Training for
                        developers may be provided in-house or through third parties and should be applicable to the technology
                        used.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;As industry-accepted secure coding practices change, organizational coding practices
                        and developer
                        training should also be updated to address new threats-for example, memory scraping
                        attacks.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;The vulnerabilities identified in 6.5.1 through 6.5.10 provide a minimum baseline. It
                        is up to the
                        organization to remain up to date with vulnerability trends and incorporate appropriate measures
                        into their
                        secure coding practices.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="pseudo-random-number-generator" name="Use a cryptographically secure pseudo-random number generator" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use a well-vetted algorithm that is currently considered to be strong and secure by
                        experts in the field and ensure well-tested implementation with adequate length seeds. In
                        general, if a pseudo-random number generator is not advertised as being cryptographically
                        secure, then it is probably a statistical PRNG and should not be used in a security-sensitive
                        context.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Pseudo-random number generators can produce predictable
                        numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting
                        point for producing a "random enough" number.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure
                        that all random numbers, especially those used for cryptographic parameters (keys, IV's, MAC
                        tags), random file names, random GUIDs, and random strings are generated in a cryptographically
                        strong fashion.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Ensure that random algorithms are seeded with
                        sufficient entropy, containing at least 112 bits of entropy (typically a six digit random number
                        is sufficient).&amp;nbsp; If less than 112 bits of entropy, ensure salting with a unique and
                        random 32-bit salt and hashed with an approved one-way hash.&lt;/p&gt;&lt;p&gt;Use a secure
                        pseudo-random number generator ensuring it leverages an appropriate length seed. The
                        recommendation by FIPS 140-2 is 256-bit seed.&lt;/p&gt;&lt;p&gt;Ensure that the challenge nonce
                        was generated with at least 64 bits and it is unique over the lifetime of the cryptographic
                        device.&lt;/p&gt;&lt;p&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test
                        Requirements) can be used to comprehensively assess the quality of a Random Number Generator by
                        reading e.g. 128MB of data from the RNG source and then assessing its randomness properties with
                        the tool.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The following libraries are considered weak random numbers
                        generators and should not be used.&amp;nbsp;&lt;/p&gt;&lt;p&gt;C library: random(), rand()
                        instead use getrandom(2)&amp;nbsp;&lt;/p&gt;&lt;p&gt;Java library: java.util.Random() instead
                        use java.security.SecureRandom&lt;/p&gt;&lt;p&gt;For secure random number generation, refer to
                        NIST SP 800-90A. CTR-DRBG, HASH-DRBG, HMAC-DRBG. Refer to NIST SP800-22 A Statistical Test Suite
                        for Random and Pseudorandom Number Generators for Cryptographic Applications, and the testing
                        toolkit.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
          </references>
          <standards>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric:
                            normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check
                            that an adequately strong algorithm is used to generate random values, and that those random
                            values are of a minimum 256-bit seed.&lt;/span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.578">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.9-C" name="Use anti cross-site request forgery (CSRF) mechanisms" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;A CSRF attack forces a logged-on victim's browser to send a pre-authenticated request
                        to a
                        vulnerable web application, which then enables the attacker to perform any state-changing
                        operations the
                        victim is authorized to perform (such as updating account details, making purchases, or even
                        authenticating
                        to the application).&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.9 Examine software development policies and procedures and interview
                            responsible
                            personnel to verify that cross-site request forgery (CSRF) is addressed by means of coding techniques
                            that ensure
                            applications do not rely on authorization credentials and tokens automatically submitted by
                            browsers.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.3-C" name="Use a secure coding methodology" issueId="" issueLink="" platform="" cost="0" risk="81" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Develop internal and external software applications (including web-based
                        administrative access
                        to applications) securely, as follows:&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- In accordance with the PCI DSS (for example, secure authentication and logging).&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Based on industry standards and/or best practices.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;- Incorporating information security throughout the software-development life cycle.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt; &lt;/p&gt;
                        &lt;p&gt;Without the inclusion of security during the requirement definition, design, analysis,
                        and testing
                        phases of software development, security vulnerabilities can be inadvertently or maliciously
                        introduced into
                        the production environment.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Understanding how sensitive data is handled by the application-including when
                        stored,
                        transmitted,
                        and when in memory-can help identify where data needs to be protected.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.3.a Examine written software-development processes to verify that the
                            processes are based
                            on industry standards and/or best practices. &lt;/p&gt;
                            &lt;p&gt;6.3.b Examine written software-development processes to verify that information
                            security is
                            included throughout the life cycle. &lt;/p&gt;
                            &lt;p&gt;6.3.c Examine written software-development processes to verify that software
                            applications are
                            developed in accordance with the PCI DSS. &lt;/p&gt;
                            &lt;p&gt;6.3.d Interview software developers to verify that written software-development
                            processes are
                            implemented.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.1b-C" name="Use parameterized queries" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>The use of prepared statements with variable binding (aka parameterized queries) is how all
                        developers
                        should first be taught how to write database queries. They are simple to write and easier to
                        understand
                        than dynamic queries. Parameterized queries force the developer to first define all the SQL
                        code, and then
                        pass each parameter to the query later. This coding style allows the database to distinguish
                        between code
                        and data, regardless of what user input is supplied.</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.1b" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;6.5.1 Examine software-development policies and procedures and interview
                            responsible
                            personnel to verify that injection flaws are addressed by means of coding techniques that:
                            &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; &lt;p&gt;Validate input to verify that user data cannot modify the meaning of commands
                            and queries.
                            &lt;/p&gt; &lt;/li&gt;
                            &lt;li&gt; &lt;p&gt;Use parameterized queries.&amp;nbsp;&lt;/p&gt; &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications
                        between RA (Registration Authority) and CSP (Credential Service Provider), should be
                        authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS
                        connection, using approved cryptographic algorithms.&lt;/p&gt;
                        &lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
                        &lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity
                        that issues security tokens or electronic credentials to subscribers. A CSP forms part of an
                        authentication system, most typically identified as a separate entity in a Federated
                        authentication system. A CSP may be an independent third party, or may issue credentials for its
                        own use. Credential Service Provider is typically also the Identity Provider (IDP). An example
                        of a CSP would be an online site whose primary purpose may be, for example, internet banking -
                        but whose users may be subsequently authenticated to other sites, applications or services
                        without further action on their part.&lt;/p&gt;
                        &lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the
                        identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be
                        independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
                        &lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying
                        the claimant's possession and control of one or two authenticators, using an authentication
                        protocol.&lt;/p&gt;
                        &lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's
                        authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically
                        to process a transaction or grant access to information or a system.&lt;/p&gt;
                        &lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and
                        identity proofing.&lt;/p&gt;
                        &lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more
                        authentication protocols.&lt;/p&gt;
                        &lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator
                        from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example
                            with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.7" name="Use strong client authentication" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By using an alternative form of authentication such as client assertion [
                        &lt;a href="https://tools.ietf.org/html/rfc6819#ref-OAuth-ASSERTIONS" title="&amp;quot;Assertion
                        Framework for OAuth 2.0&amp;quot;"&gt;OAuth-ASSERTIONS&lt;/a&gt;], the need to distribute a
                        "client_secret" is eliminated. This may require the use of a secure private key store or other
                        supplemental authentication system as specified by the client assertion issuer in its
                        authentication process.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the client uses the Assertion Framework for OAuth 2.0 Client Authentication
                            and&amp;nbsp;Authorization Grants as defined in RFC7521.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.793">
              <output/>
            </source>
            <references>
              <reference name="RFC7521" url="https://tools.ietf.org/html/rfc7521"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-R6-6.5.2-C" name="Validate buffer boundaries" issueId="" issueLink="" platform="" cost="0" risk="93" state="Required" owner="david@doughty.uk.net" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Buffer overflows occur when an application does not have appropriate bounds checking
                        on its
                        buffer space. This can cause the information in the buffer to be pushed out of the buffer's
                        memory space and
                        into executable memory space. When this occurs, the attacker has the ability to insert malicious
                        code at the
                        end of the buffer and then push that malicious code into executable memory space by overflowing
                        the buffer.
                        The malicious code is then executed and often gives the attacker remote access to the
                        application and/or
                        infected system.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v3.2.1" url="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf"/>
          </references>
          <standards>
            <standard ref="6.5.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:36.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically
                        secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid
                        certificates expose the application and its users to spoofing attacks such as Man In The Middle
                        (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence
                        in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a
                        trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is
                        legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use
                        throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a
                            positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use
                            TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL
                            Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan
                            tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool:
                            https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate
                            all security issues and warnings relating to the server certificate, and those in the trust
                            chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in
                        use, which have undergone extensive review and testing by the developers, as well as
                        third-parties in the development, security, and cryptography space. Typically, these widely used
                        implementations have a lower risk of exploitation compared with privately developed - or less
                        known - implementations (although vulnerabilities such as Heartbleed highlight this is not
                        universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify
                        the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify
                        the veracity of the implementations, and review third party validations together with security
                        advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries
                        are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven
                        implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a
                            publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If
                            not, assurance of the security of the implementation should be sought, or the risk
                            quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the
                            server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm
                            that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use
                            TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL
                            Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan
                            tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool:
                            https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate
                            all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security
                            mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oidc-security-ad-3.2.1" name="Verify authentication request statements" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Sub Claim Spoofing (SCS) is an attack which targets the Authentication Request
                        verification part of an OP. If the subject claim verification by an OP is not handled correctly,
                        an attacker may be able to login as any End-User registered with this OP at a Client of her
                        choice: Within the Authentication Request of OpenID Connect, the Client has the possibility to
                        request individual claims about the End-User either by using the claims parameter or by using an
                        additional JSON Web Token (JWT) containing a whole OpenID Connect request via the request or
                        request_uri parameter.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Attack Defense.&lt;/strong&gt; Statements
                        made within the Authentication Request MUST be considered untrusted and MUST be verified.
                        Unverified statements MUST NOT be included in the ID Token and Access Token issued by the OP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OpenID Connect Security Considerations" url="https://www.nds.ruhr-uni-bochum.de/media/ei/veroeffentlichungen/2017/01/13/OIDCSecurity_1.pdf"/>
            <reference name="OpenID Foundation: OIDC Core 1.0" url="https://openid.net/specs/openid-connect-core-1_0.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;The Authorization Server MUST validate the request received as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The
                            Authorization Server MUST validate all the OAuth 2.0 parameters according to the OAuth 2.0
                            specification.&lt;/li&gt;&lt;li&gt;Verify that a scope parameter is present and contains the
                            openid scope value. (If no openid scope value is present, the request may still be a valid
                            OAuth 2.0 request, but is not an OpenID Connect request.)&lt;/li&gt;&lt;li&gt;The
                            Authorization Server MUST verify that all the REQUIRED parameters are present and their
                            usage conforms to this specification.&lt;/li&gt;&lt;li&gt;If the sub (subject) Claim is
                            requested with a specific value for the ID Token, the Authorization Server MUST only send a
                            positive response if the End-User identified by that sub value has an active session with
                            the Authorization Server or has been Authenticated as a result of the request. The
                            Authorization Server MUST NOT reply with an ID Token or Access Token for a different user,
                            even if they have an active session with the Authorization Server.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.337">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oidc-security-ad-3.2.2" name="Verify redirect URI against pre-registered URIs" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Redirect URI Manipulation (RUM) is an attack which targets the Authentication Request
                        verification part of an OP. If the redirect_uri verification by an OP is not handled correctly,
                        an attacker may be able to login as any End-User registered with this OP at a Client of her
                        choice. RUM is applicable to Authentication using the Authorization Code Flow and Authentication
                        using the Implicit Flow.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Attack Defense.&lt;/strong&gt; It is
                        essential that the OP provides the following verification step: "This URI MUST exactly match one
                        of the Redirection URI values for the Client pre-registered at the OpenID Provider"&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OpenID Connect Security Considerations" url="https://www.nds.ruhr-uni-bochum.de/media/ei/veroeffentlichungen/2017/01/13/OIDCSecurity_1.pdf"/>
            <reference name="OpenID Foundation: OIDC Core 1.0" url="https://openid.net/specs/openid-connect-core-1_0.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the redirect URI received has been registered in the OpenID Provider.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.337">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-7.2" name="Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Encryption should fail closed so that data does not get stored in an unprotected state.
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A padding oracle is a function of an application which decrypts encrypted data provided by the
                        client, e.g. internal session state stored on the client, and leaks the state of the validity of
                        the padding after decryption. The existence of a padding oracle allows an attacker to decrypt
                        encrypted data and encrypt arbitrary data without knowledge of the key used for these
                        cryptographic operations. This can lead to leakage of sensible data or to privilege escalation
                        vulnerabilities, if integrity of the encrypted data is assumed by the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To protect against padding oracles you want to make sure that your application does not return a
                        different error when the padding is wrong. The best way to do this is an Encrypt-then-MAC
                        construction, where a Message Authentication Code (MAC) is applied to the ciphertext. If the MAC
                        fails, you don't even need to look at the padding. If the MAC is correct, it is
                        cryptographically unlikely that the padding has been tampered with.
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note that padding oracle attacks are usually targeting services or protocols which can return a
                        state about the encryption being done correctly or not, so encryption-in-transit architectures
                        must be reviewed in detail to ensure no information about padding errors is exposed.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP WSTG: Testing Weak Cryptography" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography"/>
            <reference name="SEI CERT Oracle Coding Standard for Java. MSC61-J. Do not use insecure or weak cryptographic algorithms" url="https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms"/>
          </references>
          <standards>
            <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;b&gt;Testing for padding oracle vulnerabilities: &lt;/b&gt;
                            &lt;br /&gt;
                            &lt;p&gt; First the possible input points for padding oracles must be identified. Generally
                            the following conditions must be met: &lt;/p&gt;
                            &lt;ol&gt;
                            &lt;li&gt; The data is encrypted. Good candidates are values which appear to be random.&lt;/li&gt;
                            &lt;li&gt; A block cipher is used. The length of the decoded (Base64 is used often) cipher
                            text is a multiple of common cipher block sizes like 8 or 16 bytes. Different cipher texts
                            (e.g. gathered by different sessions or manipulation of session state) share a common
                            divisor in the length.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:37.579">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide. Testing for Padding Oracle (OTG-CRYPST-002)" url="https://www.owasp.org/index.php/Testing_for_Padding_Oracle_(OTG-CRYPST-002)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-151" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Identity Spoofing refers to the action of assuming (i.e., taking on) the
                                identity of some other entity (human or non-human) and then using that identity to
                                accomplish a goal. An adversary may craft messages that appear to come from a different
                                principle or use stolen / spoofed authentication credentials. Alternatively, an attacker
                                may intercept a message from a legitimate sender and attempt to make it look like the
                                message comes from them without changing its content. The latter form of this attack can
                                be used to hijack credentials from legitimate users. Identity Spoofing attacks need not
                                be limited to transmitted messages - any resource that is associated with an identity
                                (for example, a file with a signature) can be the target of an attack where the
                                adversary attempts to change the identity. This attack differs from Content Spoofing
                                attacks where the adversary does not wish to change the identity of the message, but
                                instead wishes to change what the message says. In an Identity Spoofing attack, the
                                adversary is attempting to change the identity of the content.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.4.1.4">
                  <countermeasures>
                    <countermeasure ref="oauth2.1-cons-2" mitigation="50"/>
                    <countermeasure ref="oidc-security-ad-3.2.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="oauth2.1-cons-2" mitigation="50"/>
                <countermeasure ref="oidc-security-ad-3.2.2" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment,
                                allowing developers to monitor their code regularly in order to avoid security
                                vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="authz-bypass" name="Attackers attempt to bypass authorization flow" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An adversary exploits a weakness to bypass authorization system</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.4.1.4">
                  <countermeasures>
                    <countermeasure ref="oauth2.1-cons-1" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.3.2">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.3" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.3" mitigation="50"/>
                <countermeasure ref="oauth2.1-cons-1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="impersonation-attempts" name="Attackers attempt to impersonate a privileged user to access to the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An adversary attempts to impersonate a privileged user to access to the resources</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.1.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.3.3" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.13">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.1.13-C1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-4.4.1.13-C1" mitigation="50"/>
                <countermeasure ref="RFC6819-5.3.3" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal
                                resources. The attacker can supply - or modify - a URL which the code running on the
                                server will read or submit data to, and by carefully selecting the URLs, the attacker
                                may be able to read server configuration details such as AWS metadata, connect to
                                internal services like http enabled databases, or perform post requests towards internal
                                services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="oidc-best-practices" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="oidc-best-practices" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="common-vuln-exploitation" name="Attackers gain access by stealing user information through common vulnerabilities" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An adversary exploits common weaknesses like phishing, spoofing, etc. to escalate
                                privileges</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.1.5">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.3.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.8">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.3.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.3.6">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.4.2.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.6.6">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.4.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.4.2.5" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.3.5" mitigation="25"/>
                <countermeasure ref="RFC6819-5.3.5" mitigation="25"/>
                <countermeasure ref="RFC6819-5.4.1" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="authn-bypass" name="Attackers gain access to user accounts by exploiting flaws in the authentication process" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An adversary exploits a weakness to bypass authentication system</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.1.2">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.2.3" mitigation="25"/>
                    <countermeasure ref="RFC6819-5.2.2.4" mitigation="25"/>
                    <countermeasure ref="RFC6819-5.2.3.7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.1.3">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.2.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.2.2.3" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.2.4" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.2.6" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.3.7" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                As programming languages evolve, functions occasionally become obsolete due to:
                                &lt;/div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Advances in the language.&lt;/li&gt;
                                &lt;li&gt;Improved understanding of how operations should be performed effectively and
                                securely.&lt;/li&gt;
                                &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that
                                perform the same task in some different and hopefully improved way.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing
                                the attackers' request, thereby reducing the resources available for legitimate services
                                and degrading or denying services. Usually, this attack focuses on memory allocation,
                                but any finite resource on the target could be the attacked, including bandwidth,
                                processing cycles, or other resources.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack does not attempt to force this allocation through a large number of
                                requests (that would be Resource Depletion through Flooding) but instead uses one or a
                                small number of requests that are carefully formatted to force the target to allocate
                                excessive resources to service this request(s). Often this attack takes advantage of a
                                bug in the target to cause the target to allocate resources vastly beyond what would be
                                needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.4.1.12">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.1.12-C1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-4.4.1.12-C1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-475" name="Signature Spoofing by Improper Validation" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An attacker exploits a cryptographic weakness in the signature verification algorithm
                                implementation to generate a valid signature without knowing the key.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-345">
                  <countermeasures>
                    <countermeasure ref="oidc-security-ad-3.2.1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="oidc-security-ad-3.2.1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="pci-dss-dev" name="PCI-DSS Development" desc="" library="PCI-DSS">
          <threats>
            <threat ref="pci-dss-vuln-prevention" name="An attacker gains access to cardholder data through a vulnerable system" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="PCI-DSS" editable="true">
              <desc>Unscrupulous individuals use security vulnerabilities to gain privileged access to systems. Many of these vulnerabilities are fixed by vendor-provided security patches, which must be installed by the entities that manage the systems. All systems must have all appropriate software patches to protect against the exploitation and compromise of cardholder data by malicious individuals and malicious software.</desc>
              <riskRating confidentiality="75" integrity="100" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="PCI-R6-6.3">
                  <countermeasures>
                    <countermeasure ref="PCI-R6-6.3-C" mitigation="34"/>
                    <countermeasure ref="PCI-R6-6.3.1-C" mitigation="33"/>
                    <countermeasure ref="PCI-R6-6.3.2-C" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PCI-R6-6.3-C" mitigation="34"/>
                <countermeasure ref="PCI-R6-6.3.1-C" mitigation="33"/>
                <countermeasure ref="PCI-R6-6.3.2-C" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="pci-dss-vuln-detection" name="An attacker gains access to cardholder data through security flaws in the application" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="PCI-DSS" editable="true">
              <desc>Unscrupulous individuals use security vulnerabilities to gain privileged access to systems. Many of these vulnerabilities are fixed by vendor-provided security patches, which must be installed by the entities that manage the systems. All systems must have all appropriate software patches to protect against the exploitation and compromise of cardholder data by malicious individuals and malicious software.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="PCI-R6-6.5">
                  <countermeasures>
                    <countermeasure ref="PCI-R6-6.5-C" mitigation="9"/>
                    <countermeasure ref="PCI-R6-6.5.10-C" mitigation="9"/>
                    <countermeasure ref="PCI-R6-6.5.1a-C" mitigation="9"/>
                    <countermeasure ref="PCI-R6-6.5.1b-C" mitigation="9"/>
                    <countermeasure ref="PCI-R6-6.5.2-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.3-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.4-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.5-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.6-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.7-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.8-C" mitigation="8"/>
                    <countermeasure ref="PCI-R6-6.5.9-C" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PCI-R6-6.5-C" mitigation="9"/>
                <countermeasure ref="PCI-R6-6.5.10-C" mitigation="9"/>
                <countermeasure ref="PCI-R6-6.5.1a-C" mitigation="9"/>
                <countermeasure ref="PCI-R6-6.5.1b-C" mitigation="9"/>
                <countermeasure ref="PCI-R6-6.5.2-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.3-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.4-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.5-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.6-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.7-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.8-C" mitigation="8"/>
                <countermeasure ref="PCI-R6-6.5.9-C" mitigation="8"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="unauthorized-pan-access" name="Unauthorized access to the PAN can be used to perform fraudulent operations" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="PCI-DSS" editable="true">
              <desc>PANs stored in primary storage (databases, or flat files such as text files and spreadsheets) as well as non-primary storage (backup, audit logs, exception or troubleshooting logs) must all be protected.</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="PCI-R3-3.3">
                  <countermeasures>
                    <countermeasure ref="PCI-R3-3.3-C" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PCI-R3-3.3-C" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PERSONAL-DATA" name="Personal Data" desc="" library="EU GDPR">
          <threats>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-UNAUTHENTICATED-DATA-ACCESS">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="EU-GDPR-UNNECESSARY-PRIVILEGES">
                  <countermeasures>
                    <countermeasure ref="CWE-285" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-285" mitigation="50"/>
                <countermeasure ref="CWE-306-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-ILLEGAL-PROCESSING-PERSONAL-DATA-PROFILING" name="Illegal processing of personal data being object to profiling activities" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-BAD-ALGORITHMS">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-AUTOMATED-DECISIONS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-AUTOMATED-DECISIONS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-ILLEGAL-PROCESSING-PERSONAL-DATA-CONSENT" name="Illegal processing of personal data without the user consent" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-ILLEGAL-PROCESSING-TRANSFERRED-PERSONAL-DATA" name="Illegal processing of transferred personal data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-LEGAL-GROUND-INTERNATIONAL-TRANSFER">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-MANAGE-INTERNATIONAL-DATA-TRANSFERS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-MANAGE-INTERNATIONAL-DATA-TRANSFERS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-INCORRECT-PROCESING-DATA" name="Incorrect or corrupt data which is used for processing" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Incorrect personal data is processed which imposes negative consequences for the data subject.</desc>
              <riskRating confidentiality="75" integrity="100" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-INSUFFICIENT-INPUT-VALIDATION">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-INPUT-VADILATION" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="EU-GDPR-NO-DATA-INTEGRITY-CHECKS">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-INTEGRITY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-INPUT-VADILATION" mitigation="50"/>
                <countermeasure ref="EU-GDPR-INTEGRITY" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU_GDPR-LACK_DATA_SUBJECT-CONTROL" name="Lack of Data Subject Control" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Processing personal data can only happen if the data subject has been properly informed. Processing personal data without proper notice makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-PUBLIC-PRIVACY-NOTICE">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-PRIVACY-NOTICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-PRIVACY-NOTICE" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-REPUDATION" name="Lack of detectability and evidence" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Attackers can gain undetected access to sensitive data and they are not monitored.</desc>
              <riskRating confidentiality="25" integrity="75" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-INSUFFICIENT-LOGGING">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-LOSS-PERSONAL-DATA" name="Loss of personal data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Personal data can be lost by (accidental or malicious) deletion and system failures.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-UNRECOVERED-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-BACKUP" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-BACKUP" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-SUBJECT-RIGTHS" name="Subjects cannot exercise their rights over their personal data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>&lt;p&gt;Data subject cannot exercise their rights which makes it possible for them to file a complaint at the local Data Protection Authority which might lead to administrative fines.&amp;nbsp;&lt;br&gt;&lt;br&gt;Data subject = person of whom personal data is processed&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-DELETION-FUNCTIONALITY">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-IMPLEMENT-FORGET" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-IMPLEMENT-FORGET" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="EU-GDPR-SUBJECT-RIGTHS-UI" name="Subjects cannot exercise their rights over their personal data using the User Interface" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="EU GDPR" editable="true">
              <desc>Data subject cannot exercise their rights which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines. 
&lt;br /&gt;
&lt;br /&gt;Data subject = person of whom personal data is processed</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-DATA-MAPPING">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-COMMUNICATION-CHANNEL" mitigation="30"/>
                  </countermeasures>
                </weakness>
                <weakness ref="EU-GDPR-NO-PROCESS">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-EDITABLE-PERSONAL-DATA" mitigation="40"/>
                  </countermeasures>
                </weakness>
                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-COMMUNICATION-CHANNEL" mitigation="30"/>
                <countermeasure ref="EU-GDPR-EDITABLE-PERSONAL-DATA" mitigation="40"/>
                <countermeasure ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="30"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components
                                (typically client and server). The attacker places himself in the communication channel
                                between the two components. Whenever one component attempts to communicate with the
                                other (data flow, authentication challenges, etc.), the data first goes to the attacker,
                                who has the opportunity to observe or alter it, and it is then passed to the other
                                component as if it were never intercepted. This interposition is transparent leaving the
                                two compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="STORE-SENSITIVE-DATA" name="Store sensitive data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-151" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Identity Spoofing refers to the action of assuming (i.e., taking on) the
                                identity of some other entity (human or non-human) and then using that identity to
                                accomplish a goal. An adversary may craft messages that appear to come from a different
                                principle or use stolen / spoofed authentication credentials. Alternatively, an attacker
                                may intercept a message from a legitimate sender and attempt to make it look like the
                                message comes from them without changing its content. The latter form of this attack can
                                be used to hijack credentials from legitimate users. Identity Spoofing attacks need not
                                be limited to transmitted messages - any resource that is associated with an identity
                                (for example, a file with a signature) can be the target of an attack where the
                                adversary attempts to change the identity. This attack differs from Content Spoofing
                                attacks where the adversary does not wish to change the identity of the message, but
                                instead wishes to change what the message says. In an Identity Spoofing attack, the
                                adversary is attempting to change the identity of the content.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="CSD-KEY-MGMT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-KEY-MGMT" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-474" name="An attacker obtains an authoritative or reputable signer's private signature key by theft" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                theft and then uses this key to forge signatures from the original signer to mislead a
                                victim into performing actions that benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="CSD-KEY-MGMT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-KEY-MGMT" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-485" name="An attacker obtains an authoritative signer's private signature key by exploiting a cryptographic weaknesses" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                exploiting a cryptographic weakness in the signature algorithm or pseudorandom number
                                generation and then uses this key to forge signatures from the original signer to
                                mislead a victim into performing actions which benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-330">
                  <countermeasures>
                    <countermeasure ref="pseudo-random-number-generator" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-345">
                  <countermeasures>
                    <countermeasure ref="follow-jwt-standard-generation-token" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="ASVS-7.2" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-7.2" mitigation="25"/>
                <countermeasure ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="25"/>
                <countermeasure ref="follow-jwt-standard-generation-token" mitigation="25"/>
                <countermeasure ref="pseudo-random-number-generator" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-20" name="Attackers perform an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="CS-Default" editable="true">
              <desc>An attacker, armed with the cipher text and the encryption algorithm used, performs an
                                exhaustive (brute force) search on the key space to determine the key that decrypts the
                                cipher text to obtain the plaintext.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="crypto-operations" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="crypto-operations" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="cf0d1c21-1e47-44dc-928a-0e928ef7c628" diagramComponentId="e06a6d32-4e36-4efe-956f-672f9e96faf4" ref="f04101d9-8ec2-48c8-85bd-8fdb78fef6f5" name="Auto Scaling Group Web Tier" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="CD-EC2-AUTO-SCALING" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.774">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" name="Connect to AWS EC2 Auto Scaling using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to AWS EC2 Auto Scaling using an Interface VPC Endpoint&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; You can improve the security posture of your VPC by configuring Amazon EC2 Auto Scaling to use an interface VPC endpoint. Interface endpoints are powered by AWS PrivateLink, a technology that enables you to privately access Amazon EC2 Auto Scaling APIs by restricting all network traffic between your VPC and Amazon EC2 Auto Scaling to the Amazon network. With interface endpoints, you also don't need an internet gateway, a NAT device, or a virtual private gateway.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Create an interface VPC endpoint&lt;/p&gt;
&lt;p&gt;You can create a VPC endpoint for the Amazon EC2 Auto Scaling service using either the Amazon VPC console or the AWS Command Line Interface (AWS CLI).&lt;/p&gt;
&lt;p&gt;Create an endpoint for Amazon EC2 Auto Scaling using the following service name:&lt;/p&gt;
&lt;p&gt;com.amazonaws.region.autoscaling - Creates an endpoint for the Amazon EC2 Auto Scaling API operations.&lt;/p&gt;
&lt;p&gt;cn.com.amazonaws.region.autoscaling - Creates an endpoint for the Amazon EC2 Auto Scaling API operations in the AWS China (Beijing) Region and AWS China (Ningxia) Region.&lt;/p&gt;
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt;
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt;
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify.&lt;/p&gt;
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt;
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC.&lt;/p&gt;
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname.&lt;/p&gt;
&lt;p&gt;Important&lt;br&gt; Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt;
&lt;p&gt;Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt;
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt;
&lt;p&gt;6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon EC2 Auto Scaling and interface VPC endpoints" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-vpc-endpoints.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" name="Control access to AWS EC2 Auto Scaling" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS EC2 Auto Scaling&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; By default, IAM users and roles don't have permission to create or modify Amazon EC2 Auto Scaling resources. They also can't perform tasks using the AWS Management Console, AWS CLI, or AWS API. An IAM administrator must create IAM policies that give users and roles permission to perform specific API operations on the specified resources they need. The administrator must then attach those policies to the IAM users or groups that require those permissions.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Example - Control access to creating and managing Auto Scaling groups and scaling policies&lt;/p&gt;
&lt;p&gt;The following policy gives users permissions to use all Amazon EC2 Auto Scaling actions that include the string Scaling in their names, as long as the Auto Scaling group has the tag purpose=webserver. Because the Describe actions do not support resource-level permissions, you must specify them in a separate statement without conditions.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": ["autoscaling:&lt;strong&gt;Scaling&lt;/strong&gt;"], "Resource": "*", "Condition": { "StringEquals": { "autoscaling:ResourceTag/purpose": "webserver" } } }, { "Effect": "Allow", "Action": "autoscaling:Describe*Scaling*", "Resource": "*" }]&lt;br&gt; }&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon EC2 Auto Scaling identity-based policy examples" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/security_iam_id-based-policy-examples.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" name="Create a CloudWatch alarms for AWS EC2 Auto Scaling group" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a CloudWatch alarms for AWS EC2 Auto Scaling group&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; One purpose for monitoring metrics is to verify that your application is performing as expected. In Amazon CloudWatch, you can create an alarm that sends a notification when the value of a certain metric is beyond what you consider an acceptable threshold. The metrics are available at one-minute granularity at no additional charge, but you must enable them. &lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Start by identifying the metric to monitor. For example, you can configure an alarm to watch over the average CPU utilization of the EC2 instances in your Auto Scaling group. The action can be a notification that is sent to you when the average CPU utilization of the group's instances breaches the threshold that you specified for the consecutive periods you specified. For example, if the metric stays at or above 70 percent for 4 consecutive periods of 1 minute each.&lt;/p&gt;
&lt;p&gt;To create a CloudWatch alarm for your Auto Scaling group&lt;/p&gt;
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt;
&lt;p&gt;2. If necessary, change the region. From the navigation bar, select the region where your Auto Scaling group resides.&lt;/p&gt;
&lt;p&gt;3. On the navigation pane, choose Alarms and then choose Create alarm.&lt;/p&gt;
&lt;p&gt;4. Choose Select metric.&lt;/p&gt;
&lt;p&gt;5. On the All metrics tab, select a metric as follows:&lt;/p&gt;
&lt;p&gt;- To display only the metrics reported for your Auto Scaling groups, choose EC2, and then choose By Auto Scaling Group. To view the metrics for a single Auto Scaling group, type its name in the search field.&lt;/p&gt;
&lt;p&gt;- Select the row that contains the metric for the Auto Scaling group that you want to create an alarm on.&lt;/p&gt;
&lt;p&gt;- Choose Select metric. The Specify metric and conditions page appears, showing a graph and other information about the metric.&lt;/p&gt;
&lt;p&gt;6. For Period, choose the evaluation period for the alarm, for example, 1 minute. When evaluating the alarm, each period is aggregated into one data point.&lt;/p&gt;
&lt;p&gt;Note&lt;br&gt; A shorter period creates a more sensitive alarm.&lt;/p&gt;
&lt;p&gt;7. Under Conditions, do the following:&lt;/p&gt;
&lt;p&gt;- For Threshold type, choose Static.&lt;/p&gt;
&lt;p&gt;- For Whenever metric is, specify whether you want the value of the metric to be greater than, greater than or equal to, less than, or less than or equal to the threshold to trigger the alarm. Then, under than, enter the threshold value that you want to trigger the alarm.&lt;/p&gt;
&lt;p&gt;8. Under Additional configuration, do the following:&lt;/p&gt;
&lt;p&gt;- For Datapoints to alarm, enter the number of data points (evaluation periods) during which the metric value must meet the threshold conditions to trigger the alarm. For example, two consecutive periods of 5 minutes would take 10 minutes to trigger the alarm.&lt;/p&gt;
&lt;p&gt;- For Missing data treatment, choose what you want the alarm to do if some data is missing. For more information, see Configuring how CloudWatch alarms treat missing data in the Amazon CloudWatch User Guide.&lt;/p&gt;
&lt;p&gt;9. Choose Next.&lt;/p&gt;
&lt;p&gt;10. Under Notification, you can choose or create the Amazon SNS topic you want to use to receive notifications. Otherwise, you can remove the notification now and add one later when you are ready.&lt;/p&gt;
&lt;p&gt;11. Choose Next.&lt;/p&gt;
&lt;p&gt;12. Enter a name and, optionally, a description for the alarm, and then choose Next.&lt;/p&gt;
&lt;p&gt;13. Choose Create Alarm.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring CloudWatch metrics for your Auto Scaling groups and instances" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the CloudWatch console.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" name="Enable Auto Scaling group metrics" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable AWS EC2 Auto Scaling group metrics&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; Metrics are the fundamental concept in CloudWatch. A metric represents a time-ordered set of data points that are published to CloudWatch. Think of a metric as a variable to monitor, and the data points as representing the values of that variable over time. You can use these metrics to verify that your system is performing as expected.&lt;br&gt; Amazon EC2 Auto Scaling publishes data points to CloudWatch about your Auto Scaling groups. The metrics are available at one-minute granularity at no additional charge, but you must enable them. By doing this, you get continuous visibility into the operations of your Auto Scaling groups so that you can quickly respond to changes in your workloads.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Enable Auto Scaling group metrics (console)&lt;/p&gt;
&lt;p&gt;When you enable Auto Scaling group metrics, your Auto Scaling group sends sampled data to CloudWatch every minute. There is no charge for enabling these metrics.&lt;/p&gt;
&lt;p&gt;To enable group metrics&lt;/p&gt;
&lt;p&gt;1. Open the Amazon EC2 Auto Scaling console.&lt;/p&gt;
&lt;p&gt;2. Select the check box next to your Auto Scaling group. A split pane opens up in the bottom part of the page, showing information about the group that's selected.&lt;/p&gt;
&lt;p&gt;3. On the Monitoring tab, select the Auto Scaling group metrics collection, Enable check box located at the top of the page under Auto Scaling.&lt;/p&gt;
&lt;p&gt;Enable Auto Scaling group metrics (AWS CLI)&lt;/p&gt;
&lt;p&gt;To enable group metrics&lt;/p&gt;
&lt;p&gt;Enable one or more group metrics using the enable-metrics-collection command. For example, the following command enables the GroupDesiredCapacity metric.&lt;/p&gt;
&lt;p&gt;aws autoscaling enable-metrics-collection -auto-scaling-group-name my-asg \&lt;br&gt; -metrics GroupDesiredCapacity -granularity "1Minute"&lt;/p&gt;
&lt;p&gt;If you omit the -metrics option, all metrics are enabled.&lt;/p&gt;
&lt;p&gt;aws autoscaling enable-metrics-collection -auto-scaling-group-name my-asg \&lt;br&gt; -granularity "1Minute"&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring CloudWatch metrics for your Auto Scaling groups and instances" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To view CloudWatch metrics (AWS CLI)&lt;/p&gt;

	&lt;p&gt;To view all metrics for all your Auto Scaling groups, use the following list-metrics command.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling"&lt;/p&gt;

	&lt;p&gt;To view the metrics for a single Auto Scaling group, specify the AutoScalingGroupName dimension as follows.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling" -dimensions Name=AutoScalingGroupName,Value=my-asg&lt;/p&gt;

	&lt;p&gt;To view a single metric for all your Auto Scaling groups, specify the name of the metric as follows.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling" -metric-name GroupDesiredCapacity&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP-A10-2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident. Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" mitigation="50"/>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" mitigation="50"/>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" mitigation="50"/>
                <countermeasure ref="aws-tier-5.1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ba12f86d-f23d-4011-92d1-e79e927aa847" diagramComponentId="d9ec3a27-fb58-4e51-8c29-c31671553dad" ref="a1c6d270-24d4-4836-97e6-e9b44600a98a" name="EC2 - AppServer - Primary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="dcb9d892-d80c-4b35-b9f9-97533b25951d" componentDefinitionRef="ec2" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.136">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.136">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.136">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.136">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing.
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.973">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;are encrypted.",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Source": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Owner": "AWS",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;},&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Scope": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon Unified CLI:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier.
  &lt;/div&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp;
   &lt;/div&gt;
   &lt;div&gt;
    &lt;br&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;b&gt;Impact&lt;/b&gt;:
&lt;div&gt;
 &lt;br&gt;
 &lt;div&gt;
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization.
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface::
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each NAT gateway is created in a specific Availability Zone and implemented with
  redundancy in that zone.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   and/or
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that
  are engineered to be isolated from failures in other Availability Zones. By launching
  instances in separate Availability Zones, you can protect your applications from the failure
  of a single location. AWS assigns a unique ID to each subnet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC).
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap.
  Some AWS regions have more than 2 availability zones and it is recommended to use more
  than 2 where possible.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The port for these inbound rules would depend on the Database engine used and the
  configured port.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The default values are:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt;
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt;
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt;
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt;
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt;
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When we create a default VPC, AWS does the following to set it up:
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt;
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt;
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt;
 &lt;/ol&gt;
  Label this Default VPC "Do Not Use".
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Impact&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just
  set a label to remind others not to use it.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt;
  &lt;ul&gt;
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;ul&gt;
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt;
 &lt;/ul&gt;
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;b&gt;Default Value&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
   The prescribed value is the default value.
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters
  &lt;/div&gt;
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name,
  &lt;/div&gt;
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.976">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.977">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                <countermeasure ref="aws-tier-6.9" mitigation="6"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="db35c472-075d-4b25-a9e8-9573c82d13dd" diagramComponentId="82325e5d-4f65-4251-8378-7e174e157372" ref="3746854f-d677-4c95-9f51-6700241589f1" name="Route 53 - DNS Service" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="route-53" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.463">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.463">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.2" name="Create a DNS alias record for the root domain" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  While ordinary Amazon Route 53 resource record sets are standard DNS resource record 
  sets, alias resource record sets provide an Amazon Route 53-specific extension to DNS 
  functionality. Instead of an IP address or a domain name, an alias resource record set 
  contains a pointer to a CloudFront distribution or an ELB load balancer. 
  Alias resource record sets can save you time because Amazon Route 53 automatically 
  recognizes changes in the resource record sets that the alias resource record set refers to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  First create a json file that represents the alias record that you want to add, and save it 
  locally as "alias.json". Below you can find a simple alias record representation: 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   { 
 &lt;/div&gt; 
 &lt;div&gt;
   "Changes": [ 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     "Action": "CREATE", 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     "ResourceRecordSet": { 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      "Name": "&amp;lt;your_root_domain&amp;gt;", 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      "Type": "A", 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      "AliasTarget": { 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt;
       "HostedZoneId": "hosted zone ID for your CloudFront distribution, Amazon S3 bucket, Elastic Load Balancing load balancer, or Amazon Route 53 hosted zone", 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt;
       "DNSName": "DNS domain name for your CloudFront distribution, Amazon S3 bucket, Elastic Load Balancing load balancer, or another resource record set in this hosted zone", 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt;
       "EvaluateTargetHealth": false 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      } 
    &lt;/div&gt; 
   &lt;/blockquote&gt;} 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   ] 
 &lt;/div&gt; 
 &lt;div&gt;
   } 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an Alias records in your hosted zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws route53 change-resource-record-sets --hosted-zone-id &amp;lt;your_hosted_zone_id&amp;gt; -- change-batch file:///PathTo/alias.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Change resource record sets" url="https://docs.aws.amazon.com/cli/latest/reference/route53/change-resource-record-sets.html"/>
            <reference name="List resource record sets" url="https://docs.aws.amazon.com/cli/latest/reference/route53/list-resource-record-sets.html"/>
            <reference name="Resource record sets: choosing alias/non alias" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html"/>
          </references>
          <standards>
            <standard ref="6.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List only the Alias records of the hosted zone used by the application. Use the hosted zone id from the previous recommendation. Check if an Alias record is created for the root domain:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws route53 list-resource-record-sets --hosted-zone-id &amp;lt;your_hosted_zone_id&amp;gt; --query 'ResourceRecordSets[?AliasTarget != null]' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.422">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.423">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.1" name="Set Root Domain Alias Record to ELB" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Route 53 translates friendly domains names like www.example.com into IP addresses like 192.0.2.1. Amazon Route 53 responds to DNS queries using a global network of authoritative DNS servers, which reduces latency. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  When someone enters your domain name in a browser, a DNS request is forwarded to the nearest Amazon Route 53 DNS server in a global network of authoritative DNS servers. Amazon Route 53 responds with the IP address that you specified. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Each domain has an associated hosted zone which contains the resource records pointing to each layer of the application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  A private hosted zone is a container that holds information about how you want to route traffic for a domain and its subdomains within the Amazon Virtual Private Cloud (Amazon VPC). To begin, you create a private hosted zone and specify the Amazon VPCs that you want to associate with the hosted zone. You then create resource record sets that determine how Amazon Route 53 responds to queries for your domain and subdomains within and among your Amazon VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Route53 provides special record type called Alias that allows creation of an A record for the root domain and points it to the fully qualified domain of the Elastic Load Balancer (ELB) associated with the web-server layer or Amazon CloudFront. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  In the same way records for all other layers should be created in order to allow flexibility in the application design and not hard-code the FQDN of a resource. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a hosted zone for YourDomain.com:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws route53 create-hosted-zone --name &amp;lt;your_domain.com&amp;gt; --caller-reference &amp;lt;any_string&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: about hosted zones" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/AboutHostedZones.html"/>
            <reference name="Amazon docs: create hosted zones" url="https://docs.aws.amazon.com/cli/latest/reference/route53/create-hosted-zone.html"/>
            <reference name="Amazon docs: list hosted zones" url="https://docs.aws.amazon.com/cli/latest/reference/route53/list-hosted-zones.html"/>
          </references>
          <standards>
            <standard ref="6.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the hosted zones and check if the domain name used by the application is
                            present among them:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws route53 list-hosted-zones --query 'HostedZones[*].{Name:Name, Id:Id}' --output table
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.423">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.1" mitigation="50"/>
                    <countermeasure ref="aws-tier-6.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.1" mitigation="50"/>
                <countermeasure ref="aws-tier-6.2" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="8f910564-a5b9-4140-8494-5ab78eabd959" diagramComponentId="03511cf6-d771-4742-ae58-fcce8322dcab" ref="2daf4b18-82db-4ba1-ba2a-879b13e8db25" name="Media - WAF" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="CD-WAF" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.528">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-WAF1" name="Control access to AWS WAF resources" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS WAF resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles). &lt;br&gt; Policies that are attached to an IAM identity are known as identity-based policies, and policies that are attached to a resource are known as resource-based policies. AWS WAF supports only identity-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Using identity-based policies (IAM policies) for AWS WAF&lt;/p&gt; 
&lt;p&gt;The following shows an example of a permissions policy:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2019-07-29", "Statement": [ { "Sid": "CreateFunctionPermissions", "Effect": "Allow", "Action": [ "wafv2:ListWebACLs", "wafv2:GetWebACL", "cloudwatch:ListMetrics", "wafv2:GetSampledRequests" ], "Resource": "*" }, { "Sid": "PermissionToPassAnyRole", "Effect": "Allow", "Action": [ "iam:PassRole" ], "Resource": "arn:aws:iam::account-id:role/*" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of managing access permissions to your AWS WAF resources" url="https://docs.aws.amazon.com/waf/latest/developerguide/access-control-overview.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.496">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.496">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-WAF1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-WAF1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="5055acf1-09a2-4b63-b389-eaf15ef658ad" diagramComponentId="09239d48-0eda-4eb3-ba26-02f1edeeb7c1" ref="c8445554-6c2f-49ea-8929-009f8f97fe08" name="CF - CloudFront" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="cf-cloudfront" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Protected Health Information" accessType="40"/>
        <asset name="Protected Health Information" accessType="50"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.082">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.082">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="PROOF-DOS" name="There are no proofs of a DoS" state="0" impact="100" issueId="" issueLink="">
          <desc>System is not configured to alert system administrators that a denial of service attack is happening or happened.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:08.081">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-3.12" name="Configure HTTP to HTTPS Redirects with a CloudFront Viewer Protocol Policy" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Configure the Viewer Protocol Policy for your CloudFront cache to redirect HTTP requests to HTTPS requests or to require that viewers use only the HTTPS protocol to access your objects in the CloudFront cache. You should also configure one or more cache behaviors in the same distribution to allow both HTTP and HTTPS, so you can require HTTPS for some objects but not for others.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  In order to use HTTPS, a SSL\TLS certificate must be attached. This depends on your data classification policy and needs to be configured according to your encryption policy.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For configuring "ViewerProtocolPolicy" first save locally the current distribution config:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Edit and replace "ViewerProtocolPolicy" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "ViewerProtocolPolicy": "redirect-to-https",
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the "ViewerProtocolPolicy" used by application Cloudfront distributions (it should be set as redirect-to-https):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, ViewerProtocolPolicy:DefaultCacheBehavior.ViewerProtocolPolicy}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:07.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.17" name="Configure TLS1.1+ for CloudFront to Origin connection" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  CloudFront can connect to your origin using only HTTP, only HTTPS, or to connect by matching the protocol used by the viewer. Our recommendation is to use HTTPS only. In
  this case you can choose which SSL\TLS protocols CloudFront is allowed to use when
  establishing an HTTPS connection to your origin. Ensure that you are using only TLS1.1+ as
  the SSL\TLS protocol.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For configuring Origin SSL protocols first save locally the current distribution config:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Edit and replace "OriginSslProtocols" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "OriginSslProtocols": {
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    &amp;nbsp;"Items": [
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "TLSv1.1",
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "TLSv1.2"
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    ],
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "Quantity": 2
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    },
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon Cloudfront New Origin Security Features" url="https://aws.amazon.com/about-aws/whats-new/2016/01/amazon-cloudfront-adds-new-origin-security-features/"/>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the "OriginSslProtocols" used by application Cloudfront distributions (only TLSv1.1 and TLSv1.2 should be present):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, OriginSslProtocols:Origins.Items[*].CustomOriginConfig.OriginSslProtocols.Items[*]}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:07.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.3" name="Enable AWS Cloudfront logging" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront delivers your content through a worldwide network of edge locations. When an end user requests content that you're serving with CloudFront, the user is routed to the edge location that provides the lowest latency, so content is delivered with the best possible performance. If the content is already in that edge location, CloudFront delivers it immediately. If the content is not currently in that edge location, CloudFront retrieves it from a customer defined Origin, such as AWS S3, AWS ELB or EC2.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For enabling logging first save locally the current distribution config:&lt;/li&gt;
 &lt;/ul&gt;
  aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Edit and replace "Logging" element in /tmp/cf-distribution.json with the below section: "Logging": { "Bucket": "&amp;lt;s3_bucket_name&amp;gt;", "Prefix": "cloudfrontlogs", "Enabled": true, "IncludeCookies": false },&lt;/li&gt;
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"&lt;/li&gt;
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all Cloudfront distributions and identify your application Distribution and Origin IDs. Note the "Id:" element:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront list-distributions
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Using the distribution Id from the previous step display the distribution settings, and check if the "Enabled" element is True or False:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig.Logging"
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:07.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.4" name="Enable Geo-Restriction within Cloudfront Distribution" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic
  web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront
  delivers your content through a worldwide network of edge locations. When an end user
  requests content that you're serving with CloudFront, the user is routed to the edge
  location that provides the lowest latency, so content is delivered with the best possible
  performance. If the content is already in that edge location, CloudFront delivers it
  immediately. If the content is not currently in that edge location, CloudFront retrieves it
  from a customer defined Origin, such as AWS S3, AWS ELB or EC2.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For enabling GeoRestrictions first save locally the current distribution config: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Edit the GeoRestrictions section in /tmp/cf-distribution.json with the desired configuration (similar to the below sample):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    "Restrictions": {
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     "GeoRestriction": {
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;blockquote&gt;
    &lt;div&gt;
      "RestrictionType": "&amp;lt;blacklist|whitelist&amp;gt;",
    &lt;/div&gt;
   &lt;/blockquote&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;blockquote&gt;
    &lt;div&gt;
      &amp;nbsp;"Quantity": 3,
    &lt;/div&gt;
   &lt;/blockquote&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;blockquote&gt;
    &lt;div&gt;
      &amp;nbsp;"Items": ["&amp;lt;country_code_1&amp;gt;", "&amp;lt;country_code_2&amp;gt;"]
    &lt;/div&gt;
   &lt;/blockquote&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     }
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    },
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&amp;nbsp;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="6.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Check if geo restrictions are enabled on your application CloudFront distribution:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws cloudfront get-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "Distribution.DistributionConfig.Restrictions.GeoRestriction"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:07.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-7" name="Prevent viewer requests from bypassing the CDN and accessing the origin content directly" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When you deliver web content through a CDN such as CloudFront, a best practice is to prevent viewer requests from bypassing the CDN and accessing your origin content directly. For more information, see the blog post How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager" url="https://aws.amazon.com/blogs/security/how-to-enhance-amazon-cloudfront-origin-security-with-aws-waf-and-aws-secrets-manager/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the CDN is not bypassed by auditing the logs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:07.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="PROOF-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                    <countermeasure ref="aws-tier-6.4" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                <countermeasure ref="aws-tier-6.4" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="383725bd-4ca0-424d-8097-aaf915d86752" diagramComponentId="cd6c9865-6d1e-458f-85b2-e36791b21521" ref="4bdf9659-339e-4366-91f5-ed25d951af47" name="Android Device Client" desc="" library="OWASP-MASVS" parentComponentRef="" componentDefinitionRef="android-device-client" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="20"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="20"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="20"/>
        <asset name="Credit Card Data" accessType="40"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="MOB-SECRET-STORED" name="API keys or secrets are stored on the device" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys or global secrets stored on the device can be easily extracted by an attacker by
                        analyzing the application (reverse engineering).</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.139">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-388" name="An error condition is not properly handled (Error Handling)" state="0" impact="100" issueId="" issueLink="">
          <desc>Errors and error handling represent a class of API. Errors related to error handling are so
                        common that they deserve a special kingdom of their own. As with "API Abuse", there
                        are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.754">
              <output/>
            </source>
            <references>
              <reference name="CWE-388: An error condition is not properly handled (Error Handling)" url="https://cwe.mitre.org/data/definitions/388.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-120" name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" state="0" impact="100" issueId="" issueLink="">
          <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        &lt;br /&gt;A buffer overflow condition exists when a program attempts to put more data in a
                        buffer than it can hold, or when a program attempts to put data in a memory area outside of the
                        boundaries of a buffer. The simplest type of error, and the most common cause of buffer
                        overflows, is the &amp;quot;classic&amp;quot; case in which the program copies the buffer
                        without restricting how much is copied. Other variants exist, but the existence of a classic
                        overflow strongly suggests that the programmer is not considering even the most basic of
                        security protections.
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.754">
              <output/>
            </source>
            <references>
              <reference name="CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" url="https://cwe.mitre.org/data/definitions/120.html"/>
              <reference name="Smashing The Stack For Fun And Profit" url="https://insecure.org/stf/smashstack.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.435">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-937" name="Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" state="0" impact="100" issueId="" issueLink="">
          <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable
                        components or libraries. Unfortunately, vulnerability reports for commercial or open source
                        software do not always specify exactly which versions of a component are vulnerable in a
                        standard, searchable way. Further, not all libraries use an understandable version numbering
                        system. Worst of all, not all vulnerabilities are reported to a central clearing house that is
                        easy to search, although sites like CVE and NVD are becoming easier to search.

                        Determining if you are vulnerable requires searching these databases, as well as keeping abreast
                        of project mailing lists and announcements for anything that might be a vulnerability. If one of
                        your components does have a vulnerability, you should carefully evaluate whether you are
                        actually vulnerable by checking to see if your code uses the part of the component with the
                        vulnerability and whether the flaw could result in an impact you care about.

                        Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial
                        to sophisticated malware designed to target a specific organization. Components almost always
                        run with the full privilege of the application, so flaws in any component can be serious.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-937: Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" url="https://cwe.mitre.org/data/definitions/937.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MOB-DATA" name="Data is stored into unprotected locations" state="0" impact="100" issueId="" issueLink="">
          <desc>When sensitive data is stored in unprotected locations, an attacker with access to the device
                        through physical access or a remote exploit, could gain access to it.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.328">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.754">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.754">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software provides an Applications Programming Interface (API) or similar interface for
                        interaction with external actors, but the interface includes a dangerous method or function that
                        is not properly restricted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.754">
              <output/>
            </source>
            <references>
              <reference name="CWE-749: Exposed Dangerous Method or Function" url="https://cwe.mitre.org/data/definitions/749.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-530" name="Exposure of Backup File to an Unauthorized Control Sphere" state="0" impact="100" issueId="" issueLink="">
          <desc>A backup file is stored in a directory that is accessible to actors outside of the intended
                        control sphere.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-530: Exposure of Backup File to an Unauthorized Control Sphere" url="https://cwe.mitre.org/data/definitions/530.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-83" name="Improper Neutralization of Script in Attributes in a Web Page" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from
                        dangerous attributes within tags, such as onmouseover, onload, onerror, or style.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="CWE-83: Improper Neutralization of Script in Attributes in a Web Page" url="https://cwe.mitre.org/data/definitions/83.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-EMULATION-TOOLS" name="Inappropriate use of emulation tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of emulation tools are not detected by the app, and attackers can
                        leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS" name="Inappropriate use of reverse engineering tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of the reverse engineering tools is not detected by the app, and
                        attackers can leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-525-MOBILE" name="Information Exposure Through Browser Caching" state="0" impact="100" issueId="" issueLink="">
          <desc>The application should have an appropriate caching policy specifying the extent to which data
                        and form fields should be cached.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-525: Information Exposure Through Browser Caching" url="https://cwe.mitre.org/data/definitions/525.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-524" name="Information Exposure Through Caching" state="0" impact="100" issueId="" issueLink="">
          <desc>The application uses a cache to maintain a pool of objects, threads, connections, pages, or
                        passwords to minimize the time it takes to access them or the resources to which they connect.
                        If implemented improperly, these caches can allow access to unauthorized information or cause a
                        denial of service vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-524: Information Exposure Through Caching" url="https://cwe.mitre.org/data/definitions/524.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-215" name="Information Exposure Through Debug Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The application contains debugging code that can expose sensitive information to untrusted parties.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="CWE-215: Information Exposure Through Debug Information" url="https://cwe.mitre.org/data/definitions/215.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.340">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-613" name="Insufficient Session Expiration" state="0" impact="100" issueId="" issueLink="">
          <desc>Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-613: Insufficient Session Expiration" url="https://cwe.mitre.org/data/definitions/613.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295-AUTH" name="Lack of TLS certificate validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.
                        Many communication channels can be "sniffed" by attackers during data transmission. For example,
                        network traffic can often be sniffed by any attacker who has access to a network interface. This
                        significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-489" name="Leftover Debug Code" state="0" impact="100" issueId="" issueLink="">
          <desc>The application can be deployed with active debugging code that can create unintended entry
                        points.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references>
              <reference name="CWE-489: Leftover Debug Code" url="https://cwe.mitre.org/data/definitions/489.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MEMORY-LEAKAGE" name="Memory Leakage" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-329" name="Not Using a Random IV with CBC Mode" state="0" impact="100" issueId="" issueLink="">
          <desc>Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes
                        algorithms to be susceptible to dictionary attacks.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-329: Not Using a Random IV with CBC Mode" url="https://cwe.mitre.org/data/definitions/329.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="OUTDATED-LIBRARIES" name="Outdated libraries" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.753">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-656" name="Reliance on Security Through Obscurity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software uses a protection mechanism whose strength depends heavily on its obscurity, such
                        that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.752">
              <output/>
            </source>
            <references>
              <reference name="CWE-656: Reliance on Security Through Obscurity" url="https://cwe.mitre.org/data/definitions/656.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-323" name="Reusing a Nonce, Key Pair in Encryption" state="0" impact="100" issueId="" issueLink="">
          <desc>Nonces should be used for the present occasion and only once.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-323: Reusing a Nonce, Key Pair in Encryption" url="https://cwe.mitre.org/data/definitions/323.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-226" name="Sensitive information is not cleared from memory" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not fully clear previously used information in a data structure, file, or
                        other resource, before making that resource available to a party in another control sphere.

                        This typically results from new data that is not as long as the old data, which leaves portions
                        of the old data still available. Equivalent errors can occur in other situations where the
                        length of data is variable but the associated data structure is not. If memory is not cleared
                        after use, it may allow unintended actors to read the data when the memory is reallocated.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.140">
              <output/>
            </source>
            <references>
              <reference name="CWE-226: Sensitive information is not cleared from memory" url="https://cwe.mitre.org/data/definitions/226.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-921" name="Storage of Sensitive Data in a Mechanism without Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores sensitive information in a file system or device that does not have
                        built-in access control.

                        While many modern file systems or devices utilize some form of access control in order to
                        restrict access to data, not all storage mechanisms have this capability. For example, memory
                        cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the
                        system. This can become a problem when sensitive data is stored in these mechanisms in a
                        multi-user environment, because anybody on the system can read or write this data. On Android
                        devices, external storage is typically globally readable and writable by other applications on
                        the device. External storage may also be easily accessible through the mobile device's USB
                        connection or physically accessible through the device's memory card port.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.437">
              <output/>
            </source>
            <references>
              <reference name="CWE-921: Storage of Sensitive Data in a Mechanism without Access Control" url="https://cwe.mitre.org/data/definitions/921.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100" issueId="" issueLink="">
          <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references>
              <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MOB-INFO-LEAK" name="The application leaks sensitive information" state="0" impact="100" issueId="" issueLink="">
          <desc>Information leakage is an application weakness in which an application reveals sensitive data,
                        such as technical details of the web application, environment, or user-specific data. Sensitive
                        data may be used by an attacker to exploit the target web application, its hosting network, or
                        its users. Therefore, leakage of sensitive data should be limited or prevented whenever
                        possible. Information leakage, in its most common form, is the result of one or more of the
                        following conditions: A failure to scrub out HTML/Script comments containing sensitive
                        information, improper application or server configurations, or differences in page responses for
                        valid versus invalid data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-321" name="Use of Hard-coded Cryptographic Key" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a hard-coded cryptographic key significantly increases the possibility that
                        encrypted data may be recovered.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references>
              <reference name="CWE-321: Use of Hard-coded Cryptographic Key" url="https://cwe.mitre.org/data/definitions/321.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100" issueId="" issueLink="">
          <desc>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-308" name="Use of Single-factor Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of single-factor authentication can lead to unnecessary risk of compromise when
                        compared with the benefits of a dual-factor authentication scheme.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references>
              <reference name="CWE-308: Use of Single-factor Authentication" url="https://cwe.mitre.org/data/definitions/308.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.438">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="MASVS-2.6-6.4B" name="Access to a Content Provider should be restricted" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Malicious applications on the mobile device may be able to access a Content Provider, and sensitive data it has access to, if it is not properly restricted to only the expected applications. Explicitly restrict access to Content Providers to expected applications. Note that prior to Android 4.2, the Content Provider was automatically exported unless explicitly declared as NOT exported.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - Testing For Sensitive Functionality Exposure Through IPC" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check AndrodManifest.xml for Content Providers:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Every &lt;i&gt;provider&lt;/i&gt; tag exposed in the file should have the following minimum set of permissions to work with the attributes:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://developer.android.com/guide/topics/manifest/provider-element.html#gprmsn"&gt;android:grantUriPermssions&lt;/a&gt;: Temporary permission flag.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://developer.android.com/guide/topics/manifest/provider-element.html#prmsn"&gt;android:permission&lt;/a&gt;: Single provider-wide read/write permission.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://developer.android.com/guide/topics/manifest/provider-element.html#rprmsn"&gt;android:readPermission&lt;/a&gt;: Provider-wide read permission.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://developer.android.com/guide/topics/manifest/provider-element.html#wprmsn"&gt;android:writePermission&lt;/a&gt;: Provider-wide write permission.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6-6.4" name="Access to an exported Activity should be restricted" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Any application on the mobile device will be able to launch an exported Activity if it is not explicitly restricted. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application whilst they are still interacting with the malicious application (comparable to framing or clickjacking attacks). Access to an exported Activity must be restricted.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - Testing For Sensitive Functionality Exposure Through IPC" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check AndrodManifest.xml for exported activities. - Exported activities will NOT have the
                            attribute &lt;i&gt;android:exported = "false".&lt;/i&gt;
                            - If there is no justification for an Activity to be exported, add the&lt;i&gt;android:exported
                            = "false"&lt;/i&gt;attribute.
                            - If the export is needed, then code can access control within the Activity, (see control's
                            code samples).
                            Note that any Android developer can arbitrarily choose a package name, and masquerade as
                            that package. However, only one application with each package name can exist on Google Play,
                            and two applications cannot coexist with the same package name on a device, partly
                            mitigating the threat.

                            Optionally, check the developer's signature for the package.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6-6.4C" name="Access to an exported Service should be restricted" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Malicious applications on the mobile device may be able to start and bind to an exported Service if access is not properly restricted. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application. Restrict access to start and bind to an exported Service to authorized applications only</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - Testing For Sensitive Functionality Exposure Through IPC" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-for-sensitive-functionality-exposure-through-ipc-mstg-platform-4"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check AndrodManifest.xml for exported services:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check all the existing server tags.&lt;/li&gt; 
  &lt;li&gt;Look for the attribute &lt;i&gt;android:permission=&amp;quot;&amp;quot;&lt;/i&gt; and check it has the appropriate permissions&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Those permissions should be as restrictive as possible. - e.g. Single provider-wide read/write permission.&lt;/li&gt; 
  &lt;li&gt;If this attribute is not present for the server tag, inspect the &lt;i&gt;application&lt;/i&gt; element's permission attribute that will be applied to the service.&lt;/li&gt; 
  &lt;li&gt;If neither attribute is set, the service is not protected by a permission.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.9" name="Activate the Free Security Features" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For Android:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate the Obfuscation of the code and strip unneeded debugging information.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;For iOS:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ARC (Automatic Reference Counting): memory management feature, adds retain and release messages when required.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Stack Canary: helps prevent buffer overflow attacks.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;PIE (Position Independent Executable): enables full ASLR for binary.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.512">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.6" name="Allow only the minimum set of protocol handlers required" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Configure the WebViews to allow only the minimum set of protocol handlers required (ideally, only https). Potentially dangerous handlers, such as file, tel and app-id, are disabled.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
            <reference name="OWASP MASVS - iOS - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the set of protocol handlers are deactivated.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.6" name="All random values are generated using a sufficiently secure random number generator" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Mobile SDKs offer standard implementations of RNG algorithms that produce numbers with
                        sufficient artificial randomness. We'll introduce the available APIs in the Android and iOS
                        specific sections.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Random Number Generation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-random-number-generation-mstg-crypto-6"/>
            <reference name="OWASP MASVS - iOS - Testing Random Number Generation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-random-number-generation-mstg-crypto-6"/>
          </references>
          <standards>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if the random keys are generated with a sufficiently secure random number
                            generator.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.150">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6" name="Anonymize all data that is sent to 3rd Party services" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data that is sent to 3rd Party services shall be anonymized, so no PII data is available that would allow the 3rd party to identify the user account. Also all other data, like IDs in an application that can be mapped to a user account or session should not be sent to a third party.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#determining-whether-sensitive-data-is-exposed-via-ipc-mechanisms-mstg-storage-6"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all data that is sent to 3rd Party services is anonymized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.2-4.3" name="API keys, tokens, and secrets should be generated dynamically to prevent disclosure" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Data hard-coded into the application may be exposed before installation. For example, API keys, cryptographic keys, or other secrets shipped in the application may be retrieved by a malicious party through examining the installer or its contents.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent interception or disclosure, API keys, tokens, and other secrets should be generated dynamically. If the secrets have to be agreed before the application is even run, a trusted credential interchange should happen on the first run. After the initial trusted credential interchange on the first run, the secrets should be saved to the OS provided secure stores, for example the iOS Keychain or Android Secure Preferences). 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Session Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#testing-stateful-session-management-mstg-auth-2"/>
          </references>
          <standards>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application source code and configuration files to look for hardcoded
                            secrets, API keys or similar.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Set up a proxy and proxy all application traffic through it.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Inspect the traffic for disclosure of secret keys.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.078">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.9" name="Apply 2FA Authentication on remote services" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.13" name="Apply application level payload encryption" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;As a defense in depth, next to having solid hardening of the communicating parties, application level payload encryption can be applied to further impede eavesdropping.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.10" name="Apply a step-up authentication for Transaction Signing with Push Notifications and PKI" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Transaction signing requires authentication of the user's approval of critical transactions. Asymmetric cryptography is the best way to implement transaction signing. The app will generate a public/private key pair when the user signs up, then registers the public key on the back end. The private key is securely stored in the device keystore.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To authorize a transaction, the back end sends the mobile app a push notification containing the transaction data. The user is then asked to confirm or deny the transaction. After confirmation, the user is prompted to unlock the Keychain (by entering the PIN or fingerprint), and the data is signed with user's private key. The signed transaction is then sent to the server, which verifies the signature with the user's public key. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Step-up Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#transaction-signing-with-push-notifications-and-pki"/>
          </references>
          <standards>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that when transaction information is accessed, a second step-up authentication is
                            shown and is used to authenticate for access to the transaction data.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.2" name="Avoid storing sensitive data in shared memory such as the SD card" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Most mobile devices and operating systems offer built in API's to store data in their encrypted stores, such as the Keychain on iOS.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Data stored in shared memory, such as a removable SD card, may be accessed by other applications on the device, or may be removed and accessed in a third party system.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not store sensitive or private data on shared or removable storage, such as SD cards. Where data is stored on shared but non removable storage, there is still a risk an attacker with physical access may be able to access the device storage and therefore the data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS provided secure storage for sensitive or private data.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing For Sensitive Data in Local Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2"/>
            <reference name="OWASP MASVS - iOS - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-local-data-storage-mstg-storage-1-and-mstg-storage-2"/>
          </references>
          <standards>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is processing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that this data is not stored on the SD card. This data should be kept to
                            the minimum possible for the application to run appropriately and should be stored on OS
                            provided secure-means (i.e. iOS keychain).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.398">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.6" name="Catch and handle the possible exceptions" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement a well-designed and unified scheme to handle exceptions. Make sure the application has centralized handlers for exceptions that result in similar behavior. This can be a static class for instance. For specific exceptions given the methods context, specific catch blocks should be provided.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the exceptions are well-designed and are catched and handled well.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.5" name="Check for weaknesses in 3rd party libraries" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#checking-for-weaknesses-in-third-party-libraries-mstg-code-5"/>
            <reference name="OWASP MASVS - iOS - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings"/>
          </references>
          <standards>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;about&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; or &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;EULA&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; section in which the copy-right statements are noted as required by the license of the third party library.&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.15" name="Clean local storage after several failed attempts to authenticate user" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The app's local storage should be wiped after an excessive number of failed authentication attempts.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that local storage is cleaned after failed attempts to authenticate</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4B" name="Clear caches of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the application is closed.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not allow the application to cache sensitive information outside of OS provided secure stores.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS controls to restrict thumbnails of the application where any sensitive information is displayed&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caches.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.078">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.10" name="Clear WebView's resources" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;A WebView's cache, storage, and loaded resources (JavaScript, etc.) should be cleared before the WebView is destroyed.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Platform Interaction Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.9" name="Create a mechanism to force updates on application" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanism is based on using the &lt;/span&gt;&lt;span&gt;&lt;code&gt;AppUpdateManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. Before that, other mechanisms were used, such as doing http calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase could be used to check for possible forced updates as well (see this &lt;/span&gt;&lt;/span&gt;&lt;a href="https://medium.com/@sembozdemir/force-your-users-to-update-your-app-with-using-firebase-33f1e0bcec5a" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;). Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;For iOS, enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates. The challenge with iOS however, is that Apple does not provide any APIs yet to automate this process, instead, developers will have to create their own mechanism, such as described at various &lt;/span&gt;&lt;/span&gt;&lt;a href="https://mobikul.com/show-update-application-latest-version-functionality-ios-app-swift-3/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blogs&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; which boil down to looking up properties of the app using &lt;/span&gt;&lt;span&gt;&lt;code&gt;http://itunes.apple.com/lookup\?id\&amp;lt;BundleId&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;span&gt; or third party libraries, such as &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/ArtSabintsev/Siren" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Siren&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.npmjs.com/package/react-native-appstore-version-checker" target="_blank"&gt;&lt;span&gt;&lt;span&gt;react-native-appstore-version-checker&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;. Most of these implementations will require a certain given version offered by an API or just "latest in the appstore", which means users can be frustrated with having to update the app, even though no business/security need for an update is truly there.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
            <reference name="OWASP MASVS - iOS - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span style="white-space: pre;"&gt;In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, see if you can play with the version number of a man-in-the-middled app and see how the backend responds to this (and if it is recorded at all for instance).&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.12" name="Create an authorization model on remote endpoints" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Authorization models should be defined and enforced at the remote endpoint.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.5-4.6" name="Create a strong password policy" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Password strength is a key concern when passwords are used for authentication. The password policy defines requirements to which end users should adhere. A password policy typically specifies password length, password complexity, and password topologies. A "strong" password policy makes manual or automated password cracking difficult or impossible.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;Automated password guessing attacks can be performed using a number of tools. For HTTP(S) services, using an interception proxy is a viable option. For example, you can use &lt;/span&gt; 
&lt;a href="https://portswigger.net/burp/help/intruder_using.html" target="_blank"&gt;&lt;span&gt;Burp Suite Intruder&lt;/span&gt;&lt;/a&gt; 
&lt;span&gt; to perform both wordlist-based and brute-force attacks.&lt;/span&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Execute the following steps for a wordlist based brute force attack with Burp Intruder:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Start Burp Suite Professional.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Create a new project (or open an existing one).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log into the mobile app and intercept the authentication request sent to the backend service.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right-click this request on the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Proxy/HTTP History&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab and select &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Send to Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; in the context menu.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab. For further information on how to use &lt;/span&gt;&lt;/span&gt;&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/using" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Burp Intruder&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; read the official documentation on Portswigger.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Make sure all parameters in the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Positions&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tabs are appropriately set and select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Load or paste the list of passwords you want to try. There are several resources available that offer password lists, like &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/fuzzdb-project/fuzzdb/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;FuzzDB&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;, the built-in lists in Burp Intruder or the files available in &lt;/span&gt;&lt;span&gt;&lt;code&gt;/usr/share/wordlists&lt;/code&gt;&lt;/span&gt;&lt;span&gt; on Kali Linux.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
  &lt;/ul&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Once everything is configured and you have a word-list selected, you're ready to start the attack!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.11" name="Create the functionality to verify the app uses a minimum device-access-security policy" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Different checks on the Android device can be implemented by querying different system preferences from Settings.Secure. The Device Administration API offers different mechanisms to create security aware applications, that are able to enforce password policies or encryption of the device.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-the-device-access-security-policy-mstg-storage-11"/>
            <reference name="OWASP MASVS - iOS - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-local-data-storage-mstg-storage-1-and-mstg-storage-2"/>
          </references>
          <standards>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app verifies the mobile device complies with the minimum
                            device-access-security policy.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.8" name="Create the mechanisms to control the lifecycle of cryptographic keys" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create the mechanisms to control the lifecycle of the cryptographic keys as it's shown in the key management standard as NIST SP 800-57. In this standard the usage period is determined as follows: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Originator Usage Period (OUP)&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Private Signature Key: 1-3 years&lt;/li&gt; 
   &lt;li&gt;Public Signature Key: Several years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authentication Key: &amp;lt;= 2 years&lt;/li&gt; 
   &lt;li&gt;Private Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Data Encryption Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Wrapping Key: &amp;lt;= 2 years&lt;/li&gt; 
   &lt;li&gt;Symmetric RBG keys: Determined by design&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Master Key: About 1 year&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Key Transport Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Key Transport Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Agreement Key 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authorization Key: &amp;lt;= 2 years&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Recipient Usage Period&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Private Signature Key:&amp;nbsp; -&lt;/li&gt; 
   &lt;li&gt;Public Signature Key: Several years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authentication Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authentication Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Data Encryption Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Wrapping Key: &amp;lt;= OUP + 3 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric RBG keys: -&lt;/li&gt; 
   &lt;li&gt;Symmetric Master Key: -&lt;/li&gt; 
   &lt;li&gt;Private Key Transport Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Key Transport Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Key Agreement Key 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Static Key Agreement Key: 1-2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Ephemeral Key Agreement Key: One key agreement transaction&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Symmetric Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Private Authorization Key: &amp;lt;= 2 years&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Public Authorization Key: &amp;lt;= 2 years&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cryptographic Key Length Recommendation" url="https://www.keylength.com/en/4/"/>
          </references>
          <standards>
            <standard ref="1.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="1.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify if lifecycle of cryptographic key checks are done.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.12" name="Create warnings to educate personnel" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create warning notifications to educate personnel who work with personally identifiable
                        information. These warnings are shown to the users when they use the app for first time.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Verifying User Education Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04i-testing-user-interaction#testing-user-education-mstg-storage-12"/>
          </references>
          <standards>
            <standard ref="2.12" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check when users access sensitive data, the app shows them security notifications with
                            tips on how to protect their personal data.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.7" name="Deny the access by default when an uncaught exception appears" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Deny the access by default to prevent the app crashing because of uncaught exception and to avoid unauthorized access.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the application denies access to the session when the exceptions appear.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.8" name="Disable auto-backup for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The auto backup attribute is enabled by default, this attribute shall be disabled for the following cases: Sensitive information should not be sent in clear text to the cloud. Either, avoid storing the information in the first place, or encrypt the information at rest, before sending it to the cloud. Files can also be excluded from Auto Backup, in case they should not be shared in the Cloud.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data in Backups" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-backups-for-sensitive-data-mstg-storage-8"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in Backups" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-backups-for-sensitive-data-mstg-storage-8"/>
          </references>
          <standards>
            <standard ref="2.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not saved into a backup by the Auto-Backup functionality.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4C" name="Disable autocompletion of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Auto-completion or pre-filling of sensitive details by the mobile device or browser implies that those details are stored in plaintext or a reversible format. This may be in violation of security best-practice, or application security expectations. T 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  he application should attempt to mitigate this risk by requesting the browser does not cache or store sensitive data such as credit card PANs and CV2s, personally identifiable information (PII) or other secret data. All forms handling sensitive data should be protected using the autocomplete=off HTML directive at the form or field level. Issue browser specific directives to request auto-fill or completion is disabled; The AUTOCOMPLETE attribute should be set to "OFF".&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Mobile applications must not store or offer to autocomplete sensitive data such as authentication credentials, credit card numbers, or sensitive personal details. Where data is stored locally, system provided stores should be used; for example, iOS and Android provide password stores and digital wallets. It should be noted that compliance with these requests on the client-side is optional, and many browsers and clients override these directives to use operating system, browser, or third party password managers or key-safes to store secrets. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;The autocomplete attribute is restricted to WebViews being used within the mobile
                            client.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check what WebViews the application uses.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check if the form fields which contain sensitive data and are included in these
                            WebViews have the autocomplete='off' attribute. If this attribute is not set, then this test
                            should be regarded as having failed.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.5" name="Disable JavaScript by default in a WebView if it is not necessary" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>JavaScript is disabled by default in a WebView and if not needed shouldn't be enabled. This reduces the attack surface and potential threats to the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-javascript-execution-in-webviews-mstg-platform-5"/>
            <reference name="OWASP MASVS - iOS - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-ios-webviews-mstg-platform-5"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Search in the code the following instruction:
                            webview.getSettings().setJavaScriptEnabled(true);&lt;/li&gt;
                            &lt;li&gt;Check that this instruction doesn't exist in the code.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For iOS:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the JavaScript is disabled and configured as following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            #import &amp;quot;ViewController.h&amp;quot;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            #import @interface ViewController () @property(strong,nonatomic) WKWebView *webView;
                            &lt;/div&gt;
                            &lt;div&gt;
                            @end @implementation ViewController - (void)viewDidLoad { NSURL *url = [NSURL
                            URLWithString:@&amp;quot;http://www.example.com/&amp;quot;];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            NSURLRequest *request = [NSURLRequest requestWithURL:url];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKPreferences *pref = [[WKPreferences alloc] init]; //Disable javascript execution: [pref
                            setJavaScriptEnabled:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [pref setJavaScriptCanOpenWindowsAutomatically:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [conf setPreferences:pref]; _webView = [[WKWebView
                            alloc]initWithFrame:CGRectMake(self.view.frame.origin.x,85, self.view.frame.size.width,
                            self.view.frame.size.height-85) configuration:conf] ;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [_webView loadRequest:request];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [self.view addSubview:_webView]; }
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.5" name="Disable keyboard cache on sensitive data text inputs" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A general best practice is overwriting different functions in the input field to disable the clipboard specifically for it. Also longclickable should be deactivated for the input field.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the clipboard is disabled when sensitive data is used.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.2" name="Disable the debug flags in the release mode" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The android:debuggable attribute in the Application element in the manifest determines whether or not the app can be debugged when running on a user mode build of Android. This attribute shall be set to false to disable the debug mode.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing If the App is Debuggable" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-whether-the-app-is-debuggable-mstg-code-2"/>
          </references>
          <standards>
            <standard ref="7.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check in AndroidManifest.xml whether the android:debuggable attribute is set to false. Example: &lt;application android:allowBackup="true" android:debuggable="true" android:icon="@drawable/ic_launcher"... 
&lt;div&gt;
  In a release build, this attribute should always be set to &amp;quot;false&amp;quot; (the default value). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.9" name="Do not allow sensitive data to be written to log files or thumbnail/background images" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used. Sensitive data should not be logged by the application. Where the data is relevant from a support perspective, it should be masked or otherwise obfuscated, in accordance with industry or legislative requirements where appropriate (e.g. PAN masking dictated by the PCI DSS standards). Use OS controls to restrict thumbnails of the application where any sensitive information is displayed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Information in Auto-Generated Screenshots" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Information in Auto-Generated Screenshots" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-auto-generated-screenshots-for-sensitive-information-mstg-storage-9"/>
          </references>
          <standards>
            <standard ref="2.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Browse the application focusing on the sections which handle sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Obtain the log files from the device and check there is no sensitive data on them.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For background images, force the application to go to the background and
                            foreground several times whilst managing sensitive information.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Look for the screenshots within the mobile file system and check if the screenshot
                            contains sensitive information. If so, the test should fail.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.078">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.1" name="Do not hard-code encryption keys when using symmetric encryption" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The security of symmetric encryption and keyed hashes (MACs) depends on the secrecy of the key. If the key is disclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted data they helped create. Developers often make the mistake of encrypting locally stored data with a static, hard-coded encryption key and compiling that key into the app. This makes the key accessible to anyone who can use a disassembler. Ensure that no keys or passwords are stored within the source code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note that hard-coded keys are problematic even if the source code is obfuscated since obfuscation is easily bypassed by dynamic instrumentation. If the app is using two-way SSL (both server and client certificates are validated), make sure that:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The password to the client certificate isn't stored locally or is locked in the device Keychain.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The client certificate isn't shared among all installations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If the app relies on additional encrypted containers stored in app data, check how the encryption key is used.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If a key-wrapping scheme is used, ensure that the master secret is initialized for each user or the container is re-encrypted with new key.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If you can use the master secret or previous password to decrypt the container, check how password changes are handled.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-purposes-of-keys-mstg-crypto-5"/>
            <reference name="OWASP MASVS - iOS - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-key-management-mstg-crypto-1-and-mstg-crypto-5"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M5: Insufficient Cryptography" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the symmetric encryption key is not stored locally with a static, hard-coded
                            encryption key and compiling that key into the app.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.5" name="Do not re-use the same cryptographic key for multiple purposes" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Make sure that symmetric keys are not reused for multiple purposes. A new symmetric key should be generated if it's used in a different context.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-purposes-of-keys-mstg-crypto-5"/>
            <reference name="OWASP MASVS - iOS - Verifying Key Management" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#testing-key-management-mstg-crypto-1-and-mstg-crypto-5"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M5: Insufficient Cryptography" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the same cryptographic key is not used for several purposes.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.4" name="Do not share sensitive data with third parties unless it is a necessary part of the architecture" issueId="" issueLink="" platform="" cost="1" risk="71" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not share sensitive data with third parties unless it is a necessary part of the architecture, because sensitive data such as credentials or Personal Identifiable Information can be intercepted in transport.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Sent To Third Parties" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4"/>
            <reference name="OWASP MASVS - iOS - Testing Whether Sensitive Data Is Sent To Third Parties" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#determining-whether-sensitive-data-is-sent-to-third-parties-mstg-storage-4"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not shared with third parties when this data is not a part
                            of the architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.10" name="Do not use the SSAID for 'device binding'" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use the SSAID for device binding because the behavior of the SSAID has changed since
                        Android O and the behavior of MAC addresses have changed in Android N.

                        Google has set a new set of recommendations in their SDK documentation regarding identifiers as
                        well. Because of this new behavior, we recommend developers not rely on the SSAID alone, as the
                        identifier has become less stable. For instance: The SSAID might change upon a factory reset or
                        when the app is reinstalled after the upgrade to Android O. Please note that there are a number
                        of devices which have the same ANDROID_ID and/or have an ANDROID_ID that can be overridden.
                        Also, the Build.Serial was often used but now apps targeting Android O will get "UNKNOWN" when
                        they request the Build.Serial.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-device-binding-mstg-resilience-10"/>
            <reference name="OWASP MASVS - iOS - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#device-binding-mstg-resilience-10"/>
          </references>
          <standards>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Dynamic Analysis using an Emulator.&lt;/li&gt;
                            &lt;li&gt;Run the application on an Emulator.&lt;/li&gt;
                            &lt;li&gt;Make sure you can raise the trust in the instance of the application (e.g.
                            authenticate).&lt;/li&gt;
                            &lt;li&gt;Retrieve the data from the Emulator. This has a few steps:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ol&gt;
                            &lt;ol&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the contents of cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;exit the current user&lt;/li&gt;
                            &lt;li&gt;copy the contents of /dat/data//cache &amp;amp; shared-preferences to the sdcard&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;use ADB or the DDMS to pull the contents&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install the application on another Emulator&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&amp;nbsp;Overwrite the data from step 3 in the data folder of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the contents of step 3 to the sdcard of the second emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the folders cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the older contents of the sdcard to /dat/data//cache &amp;amp;
                            shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Can you continue in an authenticated state? If so, then binding might not be
                            working properly.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.3" name="Don't write any sensitive data on logs" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online), and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information, may expose the data to attackers or malicious applications. Log files can be created in several ways.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;The following list includes two classes that are available for Android:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Log Class&lt;/li&gt; 
 &lt;li&gt;Logger Class&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Use a centralized logging class and mechanism and remove logging statements from the production release because other applications may be able to read them.&lt;/p&gt; 
&lt;p&gt;The following list shows the methods available on iOS:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NSLog Method&lt;/li&gt; 
 &lt;li&gt;printf-like function&lt;/li&gt; 
 &lt;li&gt;NSAssert-like function&lt;/li&gt; 
 &lt;li&gt;Macro&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage"/>
            <reference name="OWASP MASVS - iOS - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
 &lt;li&gt;Review app logs in search of sensitive data&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.11" name="Encrypt and pack all executable files and libraries belonging to the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that all executable files and libraries belonging to the app are encrypted on the file level and/or important code and data segments inside the executables are encrypted or packed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all executable files and libraries belonging to the app are encrypted or
                            packed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.14" name="Encrypt sensitive data stored locally" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If sensitive data is still required to be stored locally, it should be encrypted using a key derived from hardware backed storage which requires authentication</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not stored in plain text.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.13" name="Ensure sensitive data is not stored locally on the mobile device" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>No sensitive data should be stored locally on the mobile device. Instead, data should be retrieved from a remote endpoint when needed and only be kept in memory.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if any sensitive data is stored on the device and analyze if it is necessary.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.5" name="Ensure that each critical operation requires at least one additional channel (e.g., SMS, e-mail, or token)" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identify all of the tested application's critical operations (e.g., user enrollment, account
                        recovery, and money transfer) and make sure that critical operations enforce the use of at least
                        one additional channel to confirm user actions. These channels must not be bypassed when
                        executing critical operations. The following are examples of additional verification channels:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Token (e.g., RSA token, yubikey);&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Push notification (e.g., Google Prompt);&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;SMS;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;E-mail;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Data from another website you visited or scanned;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Data from a physical letter or physical entry point (e.g., data you receive only after
                        signing a document at a bank).&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;If you're going to implement an additional factor to verify the user's identity,
                        consider Infobip 2FA library or one-time passcodes (OTP) via Google Authenticator.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying that Critical Operations Use Secure Communication Channels" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication"/>
            <reference name="OWASP MASVS - iOS - Verifying that Critical Operations Use Secure Communication Channels" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication"/>
          </references>
          <standards>
            <standard ref="5.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.7" name="Ensure that the app responds correctly against tampering, debugging and emulation" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the app implements multiple different responses to tampering, debugging and emulation,
                        including stealthy responses that don't simply terminate the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05c-reverse-engineering-and-tampering"/>
            <reference name="OWASP MASVS - iOS - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06c-reverse-engineering-and-tampering"/>
          </references>
          <standards>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app implements multiple different responses to tampering, debugging and
                            emulation, including stealthy responses that don't simply terminate the app.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.6" name="Ensure the app only depends on up-to-date connectivity and security libraries" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Android relies on a security provider to provide SSL/TLS-based connections. The problem with this kind of security provider (one example is OpenSSL), which comes with the device, is that it often has bugs and/or vulnerabilities. To avoid known vulnerabilities, developers need to make sure that the application will install a proper security provider. Since July 11, 2016, Google has been rejecting Play Store application submissions (both new applications and updates) that use vulnerable versions of OpenSSL.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Security Provider" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-the-security-provider-mstg-network-6"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right click the highlighted code and select &lt;/span&gt;&lt;span&gt;&lt;code&gt;Evaluate Expression&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/span&gt;&lt;span&gt; and press enter.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Check the providers and try to find &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which should be the new top-listed provider.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you do not have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Use Xposed to hook into the &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; package, then hook into &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security.Security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; with the method &lt;/span&gt;&lt;span&gt;&lt;code&gt;getProviders&lt;/code&gt;&lt;/span&gt;&lt;span&gt; (with no arguments). The return value will be an array of &lt;/span&gt;&lt;span&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Determine whether the first provider is &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-KEY-LENGTH" name="Ensure the key length fulfills accepted industry standards" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Even the most secure encryption algorithm becomes vulnerable to brute-force attacks when that
                        algorithm uses an insufficient key size. Ensure the key length fulfills accepted industry
                        standards.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the key length is accepted by industry standards.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.4" name="Ensure the logout functionality terminates the session" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The purpose of this test case is verifying logout functionality and determining whether it effectively terminates the session on both client and server and invalidates a stateless token.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid authentication information can continue to use it and hijack a user's account.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Many mobile apps don't automatically log users out. There can be various reasons, such as: because it is inconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still have a logout function, and it should be implemented according to best practices, destroying all locally stored tokens or session identifiers. If session information is stored on the server, it should also be destroyed by sending a logout request to that server. In case of a high-risk application, tokens should be blacklisted. Not removing tokens or session identifiers can result in unauthorized access to the application in case the tokens are leaked. Note that other sensitive types of information should be removed as well, as any information that is not properly cleared may be leaked later, for example during a device backup.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Use an interception proxy for dynamic application analysis and execute the following steps to check whether the logout is implemented properly:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log in to the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Access a resource that requires authentication, typically a request for private information belonging to your account.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log out of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Try to access the data again by resending the request from step 2.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;If the logout is correctly implemented on the server, an error message or redirect to the login page will be sent back to the client. On the other hand, if you receive the same response you got in step 2, the token or session ID is still valid and hasn't been correctly terminated on the server.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.4" name="Frequently review the used cryptographic protocols and controls to ensure they are not deprecated" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the cryptographic protocols or algorithms used are widely considered suitable for
                        security purposes. Frequently review all cryptographic protocols and algorithms to verify they
                        are not deprecated.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the cryptographic protocols or algorithms used are not deprecated for security
                            purposes.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.11" name="Implement a device blocking functionality" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For applications which require L2 protection, the MASVS states that they should inform the user about all login activities within the app with the possibility of blocking certain devices. This can be broken down into various scenarios:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides a push notification the moment their account is used on another device to notify the user of different activities. The user can then block this device after opening the app via the push-notification.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login. If the previous session was with a different configuration (e.g. location, device, app-version) compared to the current configuration, then the user should have the option to report suspicious activities and block devices used in the previous session.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login at all times.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application has a self-service portal in which the user can see an audit-log. This allows the user to manage the different devices that are logged in.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The developer can make use of specific meta-information and associate it to each different activity or event within the application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-information may include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Device: The user can clearly identify all devices where the app is being used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Date and Time: The user can clearly see the latest date and time when the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Location: The user can clearly identify the latest locations where the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application can provide a list of activities history which will be updated after each sensitive activity within the application. The choice of which activities to audit needs to be done for each application based on the data it handles and the level of security risk the team is willing to have. Below is a list of common sensitive activities that are usually audited:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Login attempts&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Password changes&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Personal Identifiable Information changes (name, email address, telephone number, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Sensitive activities (purchase, accessing important resources, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Consent to Terms and Conditions clauses&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Paid content requires special care, and additional meta-information (e.g., operation cost, credit, etc.) might be used to ensure user's knowledge about the whole operation's parameters.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. payed content access, given consent to Terms and Conditions clauses, etc.) in order to prove that a specific transaction was in fact performed (integrity) and by whom (authentication).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In all cases, you should verify whether different devices are detected correctly. Therefore, the binding of the application to the actual device should be tested. In iOS, a developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which is related to the bundle ID: the moment you change a bundle ID, the method will return a different value. When the app is ran for the first time, make sure you store the value returned by&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the KeyChain, so that changes to it can be detected at an early stage.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In Android, the developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;till Android 8.0 (API level 26) to identify an application instance. Note that starting at Android 8.0 (API level 26),&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is no longer a device unique ID. Instead, it becomes scoped by the combination of app signing key, user and device. So validating&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for device blocking could be tricky for these Android versions. Because if an app changes its signing key, the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;will change and it won't be able to recognize old users devices. Therefore, it's better to store the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;encrypted and privately in a private a shared preferences file using a randomly generated key from the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;AndroidKeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and preferably AES_GCM encryption. The moment the app signature changes, the application can check for a delta and register the new&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. The moment this new ID changes without a new application signing key, it should indicate that something else is wrong. Next, the device binding can be extended by signing requests with a key stored in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Keychain&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for iOS and in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Android can reassure strong device binding. You should also test if using different IPs, different locations and/or different time-slots will trigger the right type of information in all scenarios.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Lastly, the blocking of the devices should be tested, by blocking a registered instance of the app and see if it is then no longer allowed to authenticate. Note: in case of an application which requires L2 protection, it can be a good idea to warn a user even before the first authentication on a new device. Instead: warn the user already when a second instance of the app is registered.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.8" name="Implement biometric authentication" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement biometric authentication that is not event-bound (i.e. using an API that simply returns "true" or "false"). Instead, ensure it is based on unlocking the keychain/keystore and does not provide information about the methods and processes of authentication.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Biometric Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05f-testing-local-authentication#testing-biometric-authentication-mstg-auth-8"/>
            <reference name="OWASP MASVS - iOS - Testing Biometric Authentication" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06f-testing-local-authentication"/>
          </references>
          <standards>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Test for Android Device:
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use runtime instrumentation to bypass fingerprint authentication on the client.
                            For example, use Frida to call the onAuthenticationSucceeded callback method directly.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the external instrumentation cannot bypass the authentication method.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;Test for iOS Device:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;On a jailbroken device tools like Swizzler2 can be used to bypass
                            LocalAuthentication.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Swizzler uses Frida to instrument the evaluatePolicy function so that it returns
                            True even if authentication was not successfully performed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install Swizzler2 and follow the steps below to activate this feature:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Settings-&amp;gt;Swizzler&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Inject Swizzler into Apps&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Log Everything to Syslog&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;Log Everything to File&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enter the submenu &amp;quot;iOS Frameworks&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable &amp;quot;LocalAuthentication&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enter the submenu &amp;quot;Select Target Apps&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Enable the target app&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Close the app and start it again&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;When the TouchID prompt shows click &amp;quot;cancel&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the application flow continues without requiring the touchID then the bypass
                            has worked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Alternatively, you can use objection to bypass TouchID (this also works on a
                            non-jailbroken device), patch the app, or use Cycript or similar tools to instrument the
                            process.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.3-5.4" name="Implement Certificate pinning" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Certificate pinning is the process of associating the backend server with a particular X509 certificate or public key, instead of accepting any certificate signed by a trusted certificate authority. A mobile app that stores ("pins") the server certificate or public key will subsequently only establish connections to the known server. Verify that the server certificate is pinned. Pinning can be implemented in multiple ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Including server's certificate in the application bundle and performing verification on each connection. This requires an update mechanism whenever the certificate on the server is updated Limiting certificate issuer to e.g. one entity and bundling the intermediate CA's public key into the application. In this way we limit the attack surface and have a valid certificate.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Owning and managing your own PKI. The application would contain the intermediate CA's public key. This avoids updating the application every time you change the certificate on the server, due to e.g. expiration.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Note that using your own CA would cause the certificate to be self-singed. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Custom Certificate Stores and SSL Pinning" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4"/>
            <reference name="OWASP MASVS - iOS - Testing Custom Certificate Stores and SSL Pinning" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-3-and-mstg-network-4"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the Certificate pinning is implemented correctly.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.1" name="Implement detection and response functionalities for root detection" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement detection and response functionalities to detect rooted devices and if the device is rooted, the app shall respond in two ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The app notifies the user that their device is rooted and it's not secure to continue with the app.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Terminate the session and the app, because sensitive data is vulnerable.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-root-detection-mstg-resilience-1"/>
            <reference name="OWASP MASVS - iOS - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#jailbreak-detection-mstg-resilience-1"/>
          </references>
          <standards>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that the app has two or more functionalities with independent methods to
                            detect a rooted device.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that if the device is rooted, the user is alerted or the app is terminated.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.3" name="Implement functionality to alert when the app code changes" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to detect, notify and respond when the app is modified by executable files or by anti-debugging tools within its own sandbox. When the injection is detected the app shall alert the user and terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For the application source integrity checks, run the app on the device in an
                            unmodified state and make sure that everything works.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then apply simple patches to the classes.dex and any .so libraries contained in
                            the app package. Re-package and re-sign the app.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app alerts the user and/or terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.6" name="Implement functionality to detect and respond to, modifications of process memory" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect &amp;quot;hostile&amp;quot; code in its memory and respond
                        accordingly. Controls in this category verify the integrity of the app's own memory space, with
                        the goal of protecting against memory patches applied during runtime. This includes unwanted
                        changes to binary code or bytecode, functions pointer tables, and important data structures, as
                        well as rogue code loaded into process memory.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        Integrity can be verified either by:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Comparing the contents of memory, or a checksum over the contents, with known good
                        values.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Searching memory for signatures of unwanted modifications.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Disable all file-based detection of reverse engineering tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then inject code using Xposed, Frida and Substrate, and attempt to install native
                            hooks and Java method hooks.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the app detects the &amp;quot;hostile&amp;quot; code in its memory and
                            responds accordingly.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.5" name="Implement functionality to detect if the app is being run inside an emulator" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create and implement functionality to detect when the app is being run inside an emulator. If
                        the app is running inside an emulator, the app shall terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
          </references>
          <standards>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Install and run the app within an emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app detects this and terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.4" name="Implement functionality to detect the presence of widely used reverse engineering tools" issueId="" issueLink="" platform="" cost="1" risk="83" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect the presence of widely used reverse engineering tools, such as
                        code injection tools, hooking frameworks and debugging servers. If any reverse engineering tool
                        is detected, the app shall force termination of the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
            <reference name="OWASP MASVS - iOS - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
          </references>
          <standards>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Launch the app systematically with various apps and frameworks installed, such as the
                            following:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Substrate for Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Xposed&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Frida&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Introspy-Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Drozer&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;RootCloak&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Android SSL Trust Killer&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;The app should alert the user and/or terminate the app.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.2" name="Implement functionality to notify when debugging mechanisms are presented within the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement anti-debugging mechanisms to prohibit debug mode being activated. Anti-debugging
                        features can be preventive or reactive. As the name implies, preventive anti-debugging
                        techniques prevent the debugger from attaching in the first place, while reactive techniques
                        attempt to detect whether a debugger is present and react to it in some way (e.g. terminating
                        the app, or triggering some kind of hidden behavior).&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The &amp;quot;more-is-better&amp;quot; rule applies: To maximize effectiveness, defenders
                        combine multiple methods of prevention and detection which operate on different API layers and
                        are distributed throughout the app.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
            <reference name="OWASP MASVS - iOS - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
          </references>
          <standards>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check for the presence of anti-debugging mechanisms and verify if with the following
                            criteria the anti-debugging mechanisms are bypassed:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Attaching JDB and ptrace based debuggers either fails or causes the app to
                            terminate or malfunction&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Multiple detection methods are scattered throughout the app (as opposed to putting
                            everything into a single method or function);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The anti-debugging defenses operate on multiple API layers (Java, native library
                            functions, Assembler/system calls);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The mechanisms show some level of originality (vs. copy/paste from StackOverflow
                            or other sources);&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.7" name="Implement functionality to terminate the session at the remote endpoint after a predefined period of inactivity and access tokens expire" issueId="" issueLink="" platform="" cost="1" risk="87" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>In most popular frameworks, you can set the session timeout via configuration options. This parameter should be set according to the best practices specified in the framework documentation. The recommended timeout may be between 10 minutes and two hours, depending on the app's sensitivity.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing the Session Timeout" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management#testing-session-timeout-mstg-auth-7"/>
          </references>
          <standards>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that sessions are terminated at the remote endpoint after a predefined period of
                            inactivity.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.4" name="Insert the condition DEVELOPER-MODE to remove the debugging code, log verbose errors or debugging messages in the production version" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Insert the policy in the if statement with DEVELOPER_MODE as condition. The DEVELOPER_MODE has
                        to be disabled for release build in order to disable StrictMode too.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove the debugging code, log verbose errors or debugging messages in the production version.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Debugging Code and Verbose Error Logging" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-code-and-verbose-error-logging-mstg-code-4"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that there is only one method to activate the DEVELOPMENT_MODE.&lt;/li&gt;
                            &lt;li&gt;Check that the debugging code was removed.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.7" name="Mask sensitive data when the data is shown in the app" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Many apps require users to enter several kinds of data to, for example, register an account or make a payment. Sensitive data may be exposed if the app doesn't properly mask it, when displaying data in clear text. Masking of sensitive data, by showing asterisk or dots instead of clear text should be enforced within an app's activity to prevent disclosure and mitigate risks such as shoulder surfing.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data Disclosure Through the User Interface" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data Disclosure Through the User Interface" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#checking-for-sensitive-data-disclosed-through-the-user-interface-mstg-storage-7"/>
          </references>
          <standards>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that when you introduce sensitive data into the app such as passwords or PIN, this
                            information is masked.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.9-8.12" name="Obfuscate all executable files, libraries, important code and data segments" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Obfuscation is the process of transforming code and data in order to make it more difficult to comprehend. It is an integral part of every software protection scheme. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If the goal of obfuscation is to protect sensitive computations, an obfuscation scheme is used that is both appropriate for the particular task and robust against manual and automated de-obfuscation methods, considering currently published research. The effectiveness of the obfuscation scheme must be verified through manual testing. Note that hardware-based isolation features are preferred over obfuscation whenever possible. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Attempt to decompile the byte-code, disassemble any included library files, and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;meaningful identifiers, such as class names, method names, and variable names, have been discarded,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;string resources and strings in binaries are encrypted,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;code and data related to the protected functionality is encrypted, packed, or otherwise concealed.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.7" name="Only JavaScript provided with the app code is allowed" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If native methods of the app are exposed to a WebView, verify that the WebView only renders JavaScript contained within the app package.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Java Objects Are Exposed Through WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7"/>
          </references>
          <standards>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Produce a JavaScript payload.
                            - Inject it into the file that the app is requesting. The injection could be done either
                            through a MITM attack or by directly modifying the file in case it is stored on external
                            storage. The whole process could be done through Drozer that uses weasel (MWR's advanced
                            exploitation payload) which is able to install a full agent, injecting a limited agent into
                            a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).
                            - Check that only the JavaScript provided with the app is allowed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.10" name="Overwrite data in memory before release" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Memory chunks released by an application are not actively overwritten, they are simply de-referenced with the data left until the memory is reallocated and used by another process. As such, sensitive data that is stored in memory may be exposed to an attacker with the ability to inspect that memory; for example through use of an uninitialized variable or other process.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Overwrite memory with zeros or random data before release.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Pay particular attention to sensitive data, such as passwords or other credentials, or sensitive personal information. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Sensitive Data in Memory" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#checking-memory-for-sensitive-data-mstg-storage-10"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in Memory" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-memory-for-sensitive-data-mstg-storage-10"/>
          </references>
          <standards>
            <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the parts of the code that handles authentication and very sensitive data
                            (i.e. credit card data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that the buffers holding that data are overwritten with zeros and freed as
                            soon as they are not needed anymore.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.078">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.1" name="Perform authentication process on remote services" issueId="" issueLink="" platform="" cost="0" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If the app provides users access to a remote service, some form of authentication, such as username/password authentication, is performed at the remote endpoint. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.9" name="Protect against screen overlay attacks" issueId="" issueLink="" platform="" cost="0" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;The app protects itself against screen overlay attacks.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Platform Interaction Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.272">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.3" name="Remove or obfuscate the debugging symbols from native binaries" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>As a general rule of thumb, as little explanative information as possible should be provided
                        along with the compiled code. Some metadata such as debugging information, line numbers and
                        descriptive function or method names make the binary or bytecode easier to understand for the
                        reverse engineer, but isn't actually needed in a release build and can therefore be safely
                        discarded without impacting the functionality of the app.

                        This data shall be removed from the release version or shall be obfuscated in order to be
                        inaccessible to the reverse engineer.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Testing for Debugging Symbols" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-symbols-mstg-code-3"/>
          </references>
          <standards>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Symbols are usually stripped during the build process, so you need the compiled byte-code
                            and libraries to verify whether any unnecessary metadata has been discarded. First find the
                            nm binary in your Android NDK and export it (or create an alias).
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            export $NM =
                            $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            To display debug symbols:
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ $NM -a
                            libfoo.so/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:
                            libfoo.so: no symbols&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;To display dynamic symbols:
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            $ $NM -D libfoo.so&amp;nbsp;
                            &lt;/blockquote&gt;Alternatively, open the file in your favorite disassembler and check the
                            symbol tables manually. Dynamic symbols can be stripped using the visibility compiler flag.
                            Adding this flag causes gcc to discard the function names while still preserving the names
                            of functions declared as JNIEXPORT.&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            Check if the following was added to build.gradle:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            externalNativeBuild { cmake { cppFlags &amp;quot;-fvisibility=hidden&amp;quot; } }&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;For iOS:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ gobjdump --stabs --dwarf TargetApp&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;In archive MyTargetApp:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            - armv5te: file format mach-o-arm - aarch64: file format mach-o-arm64 Gobjdump is part of
                            binutils and can be installed via Homebrew on Mac OS X.
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.517">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.1" name="Request only the minimum required permissions from the mobile operating system" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Request only the minimum required permissions from the mobile operating system. For example, if there is no requirement to use the camera then the application should not request this permission. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing App Permissions" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide"/>
            <reference name="OWASP MASVS - iOS - Testing Custom URL Schemes" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-app-permissions-mstg-platform-1"/>
          </references>
          <standards>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android applications:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and review the permissions the application is asking for.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check they are actually needed.&lt;/li&gt;
                            &lt;/ol&gt;For iOS applications:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and use its main functionality, iOS will ask for the
                            permission when it is needed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify those permissions requests are in accordance with the minimum set of
                            permissions needed by the application.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.1-5.2" name="Secure channels with TLS" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  One of the core mobile app functions is sending/receiving data over untrusted networks like the Internet. If the data is not properly protected in transit, an attacker with access to any part of the network infrastructure (e.g., a Wi-Fi access point) may intercept, read, or modify it. This is why plaintext network protocols are rarely advisable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The vast majority of apps rely on HTTP for communication with the backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS originally referred to HTTP over Secure Socket Layer (SSL); SSL is the deprecated predecessor of TLS). TLS allows authentication of the backend service and ensures confidentiality and integrity of the network data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensuring proper TLS configuration on the server side is also important. The SSL protocol is deprecated and should no longer be used. Also TLS v1.0 and TLS v1.1 have known vulnerabilities and their usage is deprecated in all major browsers by 2020. TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data. Starting with Android 10 (API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is that customizing cipher suites is no longer possible and that all of them are enabled when TLS v1.3 is enabled, whereas Zero Round Trip (0-RTT) mode isn't supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When both the client and server are controlled by the same organization and used only for communicating with one another, you can increase security by hardening the configuration. 
&lt;/div&gt; 
&lt;div&gt;
  If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server's configuration. Lack of support in the underlying operating system may force the mobile application to use a weaker configuration. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Verifying Data Encryption on the Network" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04f-testing-network-communication"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Capture all HTTP(S) and Websocket traffic with an interception proxy like OWASP ZAP or Burp Suite and make sure all requests are made via HTTPS instead of HTTP.&lt;/li&gt; 
  &lt;li&gt;Interception proxies like Burp and OWASP ZAP will show HTTP(S) traffic only. You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.8" name="Secure in the unmanaged code, the allocated memory, freed memory and used memory" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Memory corruption bugs are a popular mainstay for hackers. This class of bug results from a programming error that causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This kind of vulnerability occurs in a number of ways: 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;b&gt;Buffer overflows:&lt;/b&gt; This describes a programming error where an app writes beyond an allocated memory range for a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Out-of-bounds-access: &lt;/b&gt;Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the content written to some extent, code execution exploit is likely possible.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Dangling pointers:&lt;/b&gt; These occur when an object with an incoming reference to a memory location is deleted or deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a dangling pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Use-after-free:&lt;/b&gt; This refers to a special case of dangling pointers referencing released (deallocated) memory. After a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager to return the address to a pool of available memory. When this memory location is eventually re-allocated, accessing the original pointer will read or write the data contained in the newly allocated memory. This usually leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations to leverage control of the instruction pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Integer overflows: &lt;/b&gt;When the result of an arithmetic operation exceeds the maximum value for the integer type defined by the programmer, this results in the value "wrapping around" the maximum integer value, inevitably resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how the integer is used - for example, if the integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Format string vulnerabilities: &lt;/b&gt;When unchecked user input is passed to the format string parameter of the printf() family of C functions, attackers may inject format tokens such as '%c' and '%n' to access memory. Format string bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as ASLR.&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   A best practice to fix the Memory Corruption Bugs are the following:&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When using integer variables for array indexing, buffer length calculations, or any other security-critical operation, verify that unsigned integer types are used and perform precondition tests to prevent the possibility of integer wrapping.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Ensure the app does not use unsafe string functions such as strcpy, most other functions beginning with the "str" prefix, sprint, vsprintf, gets, etc.; If the app contains C++ code, ANSI C++ string classes are used; iOS apps written in Objective-C use NSString class. C apps on iOS should use CFString, the Core Foundation representation of a string. No untrusted data is concatenated into format strings.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing for Memory Management Bugs" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04h-testing-code-quality#memory-corruption-bugs-mstg-code-8"/>
          </references>
          <standards>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if some of the different Memory Corruption bugs appear when you try to use them to
                            gain access to the system.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.8" name="Serialize the objects for the sensitive data with the Java Serialization API" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Serialize the objects for the sensitive data with the Java Serialization API. After serialization, the data shall be encrypted and HMACed/signed. The user and/or application instance shall be properly authenticated/authorized to obtain the keys to use the data. The data within the deserialized object is carefully validated before you can actively use it (e.g. no exploit of business/application logic).</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Object (De-)Serialization" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-object-persistence-mstg-platform-8"/>
          </references>
          <standards>
            <standard ref="6.8" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Check that the objects the sensitive data are serialized with the Java Serialization
                            API.
                            - Check that the data is encrypted and HMACed signed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.300">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.8" name="Set the detection mechanism to trigger different alarms" issueId="" issueLink="" platform="" cost="0" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;The detection mechanisms trigger responses of different types, including delayed and stealthy responses.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.1" name="Sign the app and provision with valid certificate with a properly protected key" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Code signing your app assures users that it is from a known source and the app hasn't been modified since it was last signed. This process can prevent an app from being tampered with, or modified to include malicious code.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
            <reference name="OWASP MASVS - iOS - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
          </references>
          <standards>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app is correctly signed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:14.518">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.1" name="Store sensitive data in a cryptographically secure (system provided) store" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that data. Most mobile devices and operating systems offer built in API's to store data in their encrypted stores, such as the Keychain on iOS. These stores are ultimately encrypted using a key derived from the device passcode and require the user to set a passcode.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However, they do not enforce the quality of the passcode, nor is it possible to determine the quality of the passcode (and therefore, ultimately the key) from within the application.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Data should not be stored locally unless there is an explicit requirement to do so. This includes restricting thumbnails or screenshots of pages in the application that contain private data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Data that must be stored on the client side must be held in a cryptographically secure store.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Use OS provided stores to protect private data on the client side, acknowledging that the residual risk from users with weak passwords may affect that data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Do not store highly sensitive/financial data on the client-side without implementing a provably strong cryptographic process. For example, it should be encrypted using a key derived from an independent password where the strength of this password can be verified.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is storing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the storage routines and verify they are using OS APIs which are built on
                            top of secure storage components.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.398">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MOB-DATA" name="Store sensitive data only in protected locations" issueId="" issueLink="" platform="" cost="1" risk="86" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications storing or caching data locally are at risk of attack and compromise of that
                        data. Most mobile devices and operating systems offer built in API's to store data in their
                        encrypted stores, such as the Keychain on iOS. Data stored in shared memory, such as a removable
                        SD card, may be accessed by other applications on the device, or may be removed and accessed in
                        a third party system.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not store sensitive or private data on shared or removable storage, such as SD cards. Where
                        data is stored on shared but non removable storage, there is still a risk an attacker with
                        physical access may be able to access the device storage and therefore the data.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use OS provided secure storage for sensitive or private data.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is processing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check for the sensitiveness of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check if this data is being stored at some point. This data should be kept to the
                            minimum set of data possible for the application to run appropriately and should be stored
                            on OS provided secure-means (i.e. iOS keychain).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:39.079">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-KEY-AES" name="Use other block modes rather than ECB mode for AES encryption" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in
                        mobile apps. It's an iterative block cipher that is based on a series of linked mathematical
                        operations. AES performs a variable number of rounds on the input, each of which involve
                        substitution and permutation of the bytes in the input block. Each round uses a 128-bit round
                        key which is derived from the original AES key. As of this writing, no efficient cryptanalytic
                        attacks against AES have been discovered. However, implementation details and configurable
                        parameters such as the block cipher mode leave some margin for error.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You shall configure AES encryption with Cipher Block Chaining (CBC) mode instead of ECB mode.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In CBC mode, plaintext blocks are XORed with the previous ciphertext block. This ensures each
                        encrypted block is unique and randomized even if blocks contain the same information. When
                        storing encrypted data, we recommend using a block mode that also protects the integrity of the
                        stored data, such as Galois/Counter Mode (GCM). The latter has the additional benefit that the
                        algorithm is mandatory for each TLSv1.2 implementation, and thus is available on all modern
                        platforms.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>If AES encryption is used, verify it's not configured with ECB mode.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.2" name="Use proven implementations of cryptographic primitives" issueId="" issueLink="" platform="" cost="1" risk="93" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>It's recommended to use well-known algorithms that are widely regarded as secure. Mobile
                        operating systems offer standard cryptographic APIs that implement those algorithms.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Carefully inspect all the cryptographic methods used within the source code, especially
                            those that are directly applied to sensitive data. All cryptographic operations should use
                            standard cryptographic APIs for Android and iOS.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-3.3-RANDOM-KEY" name="Use Random IV with CBC Mode" issueId="" issueLink="" platform="" cost="1" risk="90" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>CBC mode requires the first plaintext block to be combined with an initialization vector (IV).
                        The IV doesn't have to be kept secret, but it shouldn't be predictable. Make sure that IVs are
                        generated using a cryptographically-secure random number generator. For more information on IVs,
                        see Crypto Fail's initialization vectors article.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05e-testing-cryptography#testing-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-mstg-crypto-3-and-mstg-crypto-4"/>
            <reference name="OWASP MASVS - iOS - Testing for Custom Implementations of Cryptography" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06e-testing-cryptography#verifying-the-configuration-of-cryptographic-standard-algorithms-mstg-crypto-2-and-mstg-crypto-3"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="3.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app is using the Random IV with CBC mode to generate a cryptographically-secure
                            random number.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.2-6.3" name="Validate all input data sent to exported activities, intents or content providers" issueId="" issueLink="" platform="" cost="1" risk="74" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method. This affects all application platforms, including mobile. All data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data. While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright. Validate all data received from the client, including values such as HTTP headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This validation and sanitization must be performed in context, for example, data sent to an SQL database must be escaped for SQL special characters whereas data sent as part of a shell command must be escaped for shell special characters. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Custom URL Schemes" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-custom-url-schemes-mstg-platform-3"/>
            <reference name="OWASP MASVS - Android - Testing Input Validation and Sanitization" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-for-injection-flaws-mstg-platform-2"/>
            <reference name="OWASP MASVS - iOS - Testing Custom URL Schemes" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-app-permissions-mstg-platform-1"/>
            <reference name="OWASP MASVS - iOS - Testing Input Validation and Sanitization" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction"/>
          </references>
          <standards>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Identify exported activities, intents and contents providers.
                            - For every input, define accepted input (both syntactic and semantic criteria)
                            - Where possible, define a white-list of accepted input or characters
                            - For each of the inputs, ensure the data is validated against the defined whitelists (for
                            example with a regular expression) before being processed.
                            - Check the code to look for input validation methods and input restrictions.
                            - Test they are effective by fuzzing the identified features.
                            - Tools such as&lt;a href="https://labs.mwrinfosecurity.com/tools/drozer/"&gt;Drozer&lt;/a&gt;can
                            help with this task.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:25:15.272">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.3" name="Validate that the certificate presented by the server is signed by a trusted Certificate Authority" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="david@doughty.uk.net" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The client should verify that the TLS certificate presented by the server has been signed by a recognized certificate authority and that the information in the certificate is valid.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Endpoint Identify Verification" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-endpoint-identify-verification-mstg-network-3"/>
            <reference name="OWASP MASVS - iOS - Testing Endpoint Identify Verification" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06g-testing-network-communication#app-transport-security-mstg-network-2"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>For every starting connection the client does to a TLS enabled end-point the certificate
                            must be verified. This verification includes:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;in first place to check the certificate is valid, it is neither expired nor
                            revoked, the private key used is of a reasonable length, the signature algorithm is of a
                            reasonable strength and the Distinguished Name matches with the one of the server we are
                            connecting to.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verification also includes checking the certificate against the certificate chain.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Also verify that the certificate chain is trusted against a local copy of the
                            Certificate Authority certificate, in which we have set up the trust.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For Android, we shall review the code and search how it has used the methods of
                            TrustManager and HostnameVerifier.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:28:38.152">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-459" name="An attacker exploits a weakness in order to generate a certificate signing request" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker exploits a weakness in the MD5 hash algorithm (weak collision resistance)
                                to generate a certificate signing request (CSR) that contains collision blocks in the
                                &amp;quot;to be signed&amp;quot; part. The attacker specially crafts two different, but
                                valid X.509 certificates that when hashed with the MD5 algorithm would yield the same
                                value. The attacker then sends the CSR for one of the certificates to the Certification
                                Authority which uses the MD5 hashing algorithm. That request is completely valid and the
                                Certificate Authority issues an X.509 certificate to the attacker which is signed with
                                its private key. An attacker then takes that signed blob and inserts it into another
                                X.509 certificate that the attacker generated.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Due to the MD5 collision, both certificates, though different, hash to the same value
                                and so the signed blob works just as well in the second certificate. The net effect is
                                that the attackers' second X.509 certificate, which the Certification Authority has
                                never seen, is now signed and validated by that Certification Authority. To make the
                                attack more interesting, the second certificate could be not just a regular certificate,
                                but rather itself a signing certificate. Thus the attacker is able to start their own
                                Certification Authority that is anchored in its root of trust in the legitimate
                                Certification Authority that has signed the attackers' first X.509 certificate. If the
                                original Certificate Authority was accepted by default by browsers, so will now the
                                Certificate Authority set up by the attacker and of course any certificates that it
                                signs. So the attacker is now able to generate any SSL certificates to impersonate any
                                web server, and the user's browser will not issue any warning to the victim. This can be
                                used to compromise HTTPS communications and other types of systems where PKI and X.509
                                certificates may be used (e.g., VPN, IPSec) -
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.3-5.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.3-5.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-158-SESSION" name="User data or credentials are compromised through network sniffing or man-in-the-middle attacks" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with access to the network path between the victim and the server could
                                employ a sniffer to observe clear text traffic on the network. If the session ID is
                                transmitted in clear text, then the attacker could compromise it and thereby gain access
                                to the user's session.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-308">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-474" name="An attacker obtains an authoritative or reputable signer's private signature key by theft" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                theft and then uses this key to forge signatures from the original signer to mislead a
                                victim into performing actions that benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-255">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CSD-SESSION-ID" name="Attackers gain access to critical functions by compromising the session ID" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>If a session ID is leaked through a flaw in the application, then attackers could
                                perform sensitive operations or hijack the session of the affected user. This type of
                                attack does not usually result in mass-compromise of ID's.</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-613">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-4.7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-21" name="Attackers manipulate session IDs and resource IDs to take advantage of the fact that some software accepts user input without verifying its authenticity" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes "trust" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlated with access control policy enforcement points.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to enumerate these identifiers.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The net result is that spoofing and impersonation may be possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.10" mitigation="50"/>
                    <countermeasure ref="MASVS-4.8" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-4.10" mitigation="50"/>
                <countermeasure ref="MASVS-4.8" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-133" name="An attacker attempts to invoke all common switches and options to discover weaknesses" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker attempts to invoke all common switches and options in the target
                                application for the purpose of discovering weaknesses in the target. For example, in
                                some applications, adding the --debug switch causes debugging information to be
                                displayed, which can sometimes reveal sensitive processing or configuration information
                                to an attacker.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This attack differs from other forms of API abuse in that the attacker is blindly
                                attempting to invoke options in the hope that one of them will work rather than
                                specifically targeting a known option. Nonetheless, even if the attacker is familiar
                                with the published options of a targeted application this attack method may still be
                                fruitful as it might discover unpublicized functionality.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-215">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.2" mitigation="28"/>
                    <countermeasure ref="MASVS-7.3" mitigation="15"/>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                    <countermeasure ref="MASVS-8.2" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-489">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-656">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.13" mitigation="5"/>
                    <countermeasure ref="MASVS-2.14" mitigation="5"/>
                    <countermeasure ref="MASVS-2.3" mitigation="5"/>
                    <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                    <countermeasure ref="MASVS-7.9" mitigation="5"/>
                    <countermeasure ref="MASVS-8.11" mitigation="5"/>
                    <countermeasure ref="MASVS-8.13" mitigation="5"/>
                    <countermeasure ref="MASVS-8.8" mitigation="5"/>
                    <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MEMORY-LEAKAGE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.15" mitigation="5"/>
                    <countermeasure ref="MASVS-2.5" mitigation="5"/>
                    <countermeasure ref="MASVS-4.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="OUTDATED-LIBRARIES">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.9" mitigation="5"/>
                    <countermeasure ref="MASVS-5.6" mitigation="5"/>
                    <countermeasure ref="MASVS-7.5" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.9" mitigation="5"/>
                <countermeasure ref="MASVS-2.13" mitigation="5"/>
                <countermeasure ref="MASVS-2.14" mitigation="5"/>
                <countermeasure ref="MASVS-2.15" mitigation="5"/>
                <countermeasure ref="MASVS-2.3" mitigation="5"/>
                <countermeasure ref="MASVS-2.5" mitigation="5"/>
                <countermeasure ref="MASVS-4.4" mitigation="5"/>
                <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                <countermeasure ref="MASVS-5.6" mitigation="5"/>
                <countermeasure ref="MASVS-7.2" mitigation="28"/>
                <countermeasure ref="MASVS-7.3" mitigation="15"/>
                <countermeasure ref="MASVS-7.4" mitigation="5"/>
                <countermeasure ref="MASVS-7.5" mitigation="5"/>
                <countermeasure ref="MASVS-7.9" mitigation="5"/>
                <countermeasure ref="MASVS-8.11" mitigation="5"/>
                <countermeasure ref="MASVS-8.13" mitigation="5"/>
                <countermeasure ref="MASVS-8.2" mitigation="5"/>
                <countermeasure ref="MASVS-8.8" mitigation="5"/>
                <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.12" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.12" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.1" mitigation="34"/>
                    <countermeasure ref="MASVS-8.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.1" mitigation="34"/>
                <countermeasure ref="MASVS-8.3" mitigation="33"/>
                <countermeasure ref="use-analysis-static-code" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-188" name="Attacker gains access to sensitive data by modifying the application's expected behavior" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker discovers the structure, function, and composition of an object, resource,
                                or system by using a variety of analysis techniques to effectively determine how the
                                analyzed entity was constructed or operates. The goal of reverse engineering is often to
                                duplicate the function, or a part of the function, of an object in order to duplicate or
                                &amp;quot;back engineer&amp;quot; some aspect of its functioning.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Reverse engineering techniques can be applied to mechanical objects, electronic devices,
                                or software, although the methodology and techniques involved in each type of analysis
                                differ widely. When adversaries are reverse engineering software, methodologies fall
                                into two broad categories, 'white box' and 'black box.' White box techniques involve
                                methods which can be applied to a piece of software when an executable or some other
                                compiled object can be directly subjected to analysis, revealing at least a portion of
                                its machine instructions that can be observed upon execution.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                'Black Box' methods involve interacting with the software indirectly, in the absence of
                                the ability to measure, instrument, or analyze an executable object directly. Such
                                analysis typically involves interacting with the software at the boundaries of where the
                                software interfaces with a larger execution environment, such as input-output vectors,
                                libraries, or APIs.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="MASVS-EMULATION-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.5" mitigation="20"/>
                    <countermeasure ref="MASVS-8.7" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.10" mitigation="20"/>
                    <countermeasure ref="MASVS-8.4" mitigation="20"/>
                    <countermeasure ref="MASVS-8.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-8.10" mitigation="20"/>
                <countermeasure ref="MASVS-8.4" mitigation="20"/>
                <countermeasure ref="MASVS-8.5" mitigation="20"/>
                <countermeasure ref="MASVS-8.6" mitigation="20"/>
                <countermeasure ref="MASVS-8.7" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-122-MOBILE" name="Users lose trust in the application because it requests unnecessary privileges" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>If the mobile application requests permissions or access to components that are not
                                strictly needed by the application, then users can lose trust in the security of the
                                application with an associated impact on the trust placed in the application provider.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                    <countermeasure ref="MASVS-6.1" mitigation="20"/>
                    <countermeasure ref="MASVS-8.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                <countermeasure ref="MASVS-6.1" mitigation="20"/>
                <countermeasure ref="MASVS-8.1" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-sensitive-data" name="Post sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-37-MOBILE" name="Sensitive data could be compromised through autocompletion" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with permanent or temporary access to the users' mobile device could gain
                                access to sensitive data if the mobile application supports auto-completion of that
                                data.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-525-MOBILE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4C" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.4C" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PROVIDE MOBILE ACCESS TO SERVICES" name="Provide mobile access to services" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.6" mitigation="25"/>
                    <countermeasure ref="MASVS-4.1" mitigation="25"/>
                    <countermeasure ref="MASVS-4.12" mitigation="25"/>
                    <countermeasure ref="MASVS-4.9" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.6" mitigation="25"/>
                <countermeasure ref="MASVS-4.1" mitigation="25"/>
                <countermeasure ref="MASVS-4.12" mitigation="25"/>
                <countermeasure ref="MASVS-4.9" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-586" name="Attackers can gain access to the application with the serialized objects injection" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An adversary attempts to exploit an application by injecting additional, malicious
                                content during its processing of serialized objects. Developers leverage serialization
                                in order to convert data or state into a static, binary format for saving to disk or
                                transferring over a network. These objects are then deserialized when needed to recover
                                the data/state. By injecting a malformed object into a vulnerable application, an
                                adversary can potentially compromise the application by manipulating the deserialization
                                process. This can result in a number of unwanted outcomes, including remote code
                                execution.</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-6.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-WEBVIEW" name="Attackers gain access to the data through the WebView functionality" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker employs forceful browsing to access portions of a website that are
                                otherwise unreachable through direct URL entry.

                                Usually, a front controller or similar design pattern is employed to protect access to
                                portions of a web application.

                                Forceful browsing enables an attacker to access information, perform privileged
                                operations and otherwise reach sections of the web application that have been improperly
                                protected.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-749">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.10" mitigation="25"/>
                    <countermeasure ref="MASVS-6.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-83">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-6.10" mitigation="25"/>
                <countermeasure ref="MASVS-6.5" mitigation="25"/>
                <countermeasure ref="MASVS-6.6" mitigation="25"/>
                <countermeasure ref="MASVS-6.7" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="7k-CWE-ErrorH" name="Attackers gain unauthorised access to the application through an error handling flaw" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Errors and error handling represent a class of API. Errors related to error handling
                                are so common that they deserve a special kingdom of their own. As with API Abuse, there are two ways to introduce an error-related security vulnerability: the most common
                                one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-388">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.6" mitigation="50"/>
                    <countermeasure ref="MASVS-7.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.6" mitigation="50"/>
                <countermeasure ref="MASVS-7.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.</desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-120">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-1-ANDROID" name="Malicious applications gain access to unauthorized data or perform unauthorized actions" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;Attackers could use malicious mobile applications to attack legitimate applications that export their components improperly. The attacks and consequences of improperly exporting a component may depend on the exported component: If access to an exported Activity is not restricted, any application will be able to launch the activity. 
 This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application whilst believing they are still interacting with the malicious application. If access to an exported Service is not restricted, any application may start and bind to the Service. &lt;/p&gt;

 Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application. If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as &lt;span class="caps"&gt;NOT&lt;/span&gt; exported.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.2-6.3" mitigation="20"/>
                    <countermeasure ref="MASVS-6.9" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.6-6.4" mitigation="20"/>
                    <countermeasure ref="MASVS-2.6-6.4B" mitigation="20"/>
                    <countermeasure ref="MASVS-2.6-6.4C" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.6-6.4" mitigation="20"/>
                <countermeasure ref="MASVS-2.6-6.4B" mitigation="20"/>
                <countermeasure ref="MASVS-2.6-6.4C" mitigation="20"/>
                <countermeasure ref="MASVS-6.2-6.3" mitigation="20"/>
                <countermeasure ref="MASVS-6.9" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ SENSITIVE DATA" name="Read sensitive data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CWE-937" name="Attackers gain unauthorised access to data or services by exploiting weaknesses in third party libraries" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Applications typically make extensive use of 3rd party libraries to provide common
                                functions. Attackers could target vulnerabilities in these libraries in order to gain
                                unauthorized access to data or services.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;div&gt;
                                Since the use of particular libraries and even versions of those libraries can often be
                                determined remotely, attackers can sometimes employ automated scanning tools to identify
                                vulnerable software. This increases the likelihood of attack.
                                &lt;/div&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-937">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-204B" name="Sensitive data is retrieved from the mobile device by an attacker" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker with access to the mobile device could inspect the cache to find sensitive
                                data.

                                Many applications that communicate with remote entities or which perform intensive
                                calculations utilize caches to improve efficiency. However, if the application computes
                                or receives sensitive information and the cache is not appropriately protected, an
                                attacker can browse the cache and retrieve this information. This can result in the
                                disclosure of sensitive information.

                                iOS in particular caches the active screen when an app is put into the background. This
                                screenshots is then stored on the file system.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-226">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.10" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-524">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.4B" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-DATA">
                  <countermeasures>
                    <countermeasure ref="MOB-DATA" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-INFO-LEAK">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.9" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-SECRET-STORED">
                  <countermeasures>
                    <countermeasure ref="MASVS-4.2-4.3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.10" mitigation="20"/>
                <countermeasure ref="MASVS-2.4B" mitigation="20"/>
                <countermeasure ref="MASVS-2.9" mitigation="20"/>
                <countermeasure ref="MASVS-4.2-4.3" mitigation="20"/>
                <countermeasure ref="MOB-DATA" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE READ OR POST DATA" name="Sensitive Read or Post data" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-204" name="An attacker examines a target application's cache for sensitive information in order to get at sensitive data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.
&lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-524">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MOB-INFO-LEAK">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.5" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.5" mitigation="50"/>
                <countermeasure ref="MASVS-2.7" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-97" name="An attacker leverages Cryptanalysis to gain access to sensitive data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>Cryptanalysis is the process of finding weaknesses in cryptographic algorithms and
                                using these weaknesses to decipher the ciphertext without knowing the secret key
                                (instance deduction). Sometimes the weakness is not in the cryptographic algorithm
                                itself, but rather in how it is applied that makes cryptanalysis successful. An attacker
                                may have other goals as well, such as:
                                The goal of the attacker performing cryptanalysis will depend on the specific needs of
                                the attacker in a given attack context. In most cases, if cryptanalysis is successful at
                                all, an attacker will not be able to go past being able to deduce some information about
                                the plaintext (goal 3). However, that may be sufficient for an attacker, depending on
                                the context.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.2" mitigation="34"/>
                    <countermeasure ref="MASVS-3.3-KEY-AES" mitigation="33"/>
                    <countermeasure ref="MASVS-3.4" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.2" mitigation="34"/>
                <countermeasure ref="MASVS-3.3-KEY-AES" mitigation="33"/>
                <countermeasure ref="MASVS-3.4" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-485" name="An attacker obtains an authoritative signer's private signature key by exploiting a cryptographic weaknesses" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                exploiting a cryptographic weakness in the signature algorithm or pseudorandom number
                                generation and then uses this key to forge signatures from the original signer to
                                mislead a victim into performing actions which benefit the attacker.</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-329">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.3-RANDOM-KEY" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-330">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.3-RANDOM-KEY" mitigation="50"/>
                <countermeasure ref="MASVS-3.6" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295-AUTH">
                  <countermeasures>
                    <countermeasure ref="MASVS-5.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-5.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-112" name="Attackers gain unauthorized access through Brute Force attacks" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since eliminating patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.3-KEY-LENGTH" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-3.3-KEY-LENGTH" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-167" name="Sensitive Data stored on the client could be accessed by an attacker" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;An attacker examines a client application for the presence of sensitive information.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This information may be stored in configuration files, embedded within the application itself, or stored in other ways. Sensitive information may include long-term keys, passwords, credit card or financial information, and other private material that the client uses in its interactions with the server.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While servers are (hopefully) protected by professional security administrators, most users may be less skilled at protecting their data. As a result, the user client may represent a weak link that an attacker could exploit directly. If an attacker can gain access to a client installation, they may be able to detect and lift sensitive information that could be leveraged directly (such as financial information), or allow the attacker to subvert future communication between the client and the server.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;In some cases, it may not even be necessary to gain access to another user's installation - if all instances of the client software are embedded with the same sensitive information (for example, long term keys for communication with the server), then the attacker must simply find a way to gain their own copy of the client in order to perform this attack.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="50" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-321">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.1" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-323">
                  <countermeasures>
                    <countermeasure ref="MASVS-3.5" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-530">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.8" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-921">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.2" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.1" mitigation="20"/>
                <countermeasure ref="MASVS-2.2" mitigation="20"/>
                <countermeasure ref="MASVS-2.8" mitigation="34"/>
                <countermeasure ref="MASVS-3.1" mitigation="33"/>
                <countermeasure ref="MASVS-3.5" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a0353de0-9272-477b-807a-24b8bc2e00d0" diagramComponentId="1ba8c5b1-c4b2-4b49-a571-84194ed4816b" ref="a2744674-cb96-4e31-a579-6c072c04e184" name="S3 - Simple Storage Service" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="s3" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.004">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.003">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.003">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.003">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.003">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.003">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you.
&lt;br /&gt;
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired).
&lt;div&gt;
 &lt;br /&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;br /&gt;
 &lt;ol&gt;
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt;
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt;
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt; &lt;br /&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers.
&lt;br&gt;
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites.
&lt;br&gt;
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data.
&lt;div&gt;
 &lt;br&gt;
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled
 &lt;/div&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. &lt;/p&gt; 
&lt;p&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. &lt;/p&gt; 
&lt;p&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS-managed keys (SSE-KMS). This provides several advantages: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across all regions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail log files. You can assign permissions for the key to the users in your organization according to your requirements.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must be granted decrypt permission by the CMK policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue disclosure of information and provide an extra layer of security.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; The following example shows how to upload data using AWS KMS Encryption: &lt;br /&gt; aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key &lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
            <reference name="Storing and Retrieving a Secret (AWS Tutorial)" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.926">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness.
&lt;br /&gt;
&lt;div&gt;
 &lt;br /&gt;
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag.
&lt;/div&gt;
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory.
&lt;br /&gt;
&lt;div&gt;
 &lt;br /&gt;
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups?
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets.
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers.
&lt;br /&gt;
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites.
&lt;br /&gt;
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion
&lt;br /&gt;Remediation
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="f42bcb60-da16-4fd1-b186-c0da16ba3755" diagramComponentId="ede1d929-d2a0-4859-8e38-be4e59941fab" ref="dcb9d892-d80c-4b35-b9f9-97533b25951d" name="Auto Scaling Group App Tier" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="CD-EC2-AUTO-SCALING" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.689">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" name="Connect to AWS EC2 Auto Scaling using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to AWS EC2 Auto Scaling using an Interface VPC Endpoint&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; You can improve the security posture of your VPC by configuring Amazon EC2 Auto Scaling to use an interface VPC endpoint. Interface endpoints are powered by AWS PrivateLink, a technology that enables you to privately access Amazon EC2 Auto Scaling APIs by restricting all network traffic between your VPC and Amazon EC2 Auto Scaling to the Amazon network. With interface endpoints, you also don't need an internet gateway, a NAT device, or a virtual private gateway.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Create an interface VPC endpoint&lt;/p&gt;
&lt;p&gt;You can create a VPC endpoint for the Amazon EC2 Auto Scaling service using either the Amazon VPC console or the AWS Command Line Interface (AWS CLI).&lt;/p&gt;
&lt;p&gt;Create an endpoint for Amazon EC2 Auto Scaling using the following service name:&lt;/p&gt;
&lt;p&gt;com.amazonaws.region.autoscaling - Creates an endpoint for the Amazon EC2 Auto Scaling API operations.&lt;/p&gt;
&lt;p&gt;cn.com.amazonaws.region.autoscaling - Creates an endpoint for the Amazon EC2 Auto Scaling API operations in the AWS China (Beijing) Region and AWS China (Ningxia) Region.&lt;/p&gt;
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt;
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt;
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify.&lt;/p&gt;
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt;
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC.&lt;/p&gt;
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname.&lt;/p&gt;
&lt;p&gt;Important&lt;br&gt; Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt;
&lt;p&gt;Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt;
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt;
&lt;p&gt;6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon EC2 Auto Scaling and interface VPC endpoints" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-vpc-endpoints.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.639">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" name="Control access to AWS EC2 Auto Scaling" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS EC2 Auto Scaling&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; By default, IAM users and roles don't have permission to create or modify Amazon EC2 Auto Scaling resources. They also can't perform tasks using the AWS Management Console, AWS CLI, or AWS API. An IAM administrator must create IAM policies that give users and roles permission to perform specific API operations on the specified resources they need. The administrator must then attach those policies to the IAM users or groups that require those permissions.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Example - Control access to creating and managing Auto Scaling groups and scaling policies&lt;/p&gt;
&lt;p&gt;The following policy gives users permissions to use all Amazon EC2 Auto Scaling actions that include the string Scaling in their names, as long as the Auto Scaling group has the tag purpose=webserver. Because the Describe actions do not support resource-level permissions, you must specify them in a separate statement without conditions.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": ["autoscaling:&lt;strong&gt;Scaling&lt;/strong&gt;"], "Resource": "*", "Condition": { "StringEquals": { "autoscaling:ResourceTag/purpose": "webserver" } } }, { "Effect": "Allow", "Action": "autoscaling:Describe*Scaling*", "Resource": "*" }]&lt;br&gt; }&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon EC2 Auto Scaling identity-based policy examples" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/security_iam_id-based-policy-examples.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.639">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" name="Create a CloudWatch alarms for AWS EC2 Auto Scaling group" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a CloudWatch alarms for AWS EC2 Auto Scaling group&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; One purpose for monitoring metrics is to verify that your application is performing as expected. In Amazon CloudWatch, you can create an alarm that sends a notification when the value of a certain metric is beyond what you consider an acceptable threshold. The metrics are available at one-minute granularity at no additional charge, but you must enable them. &lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Start by identifying the metric to monitor. For example, you can configure an alarm to watch over the average CPU utilization of the EC2 instances in your Auto Scaling group. The action can be a notification that is sent to you when the average CPU utilization of the group's instances breaches the threshold that you specified for the consecutive periods you specified. For example, if the metric stays at or above 70 percent for 4 consecutive periods of 1 minute each.&lt;/p&gt;
&lt;p&gt;To create a CloudWatch alarm for your Auto Scaling group&lt;/p&gt;
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt;
&lt;p&gt;2. If necessary, change the region. From the navigation bar, select the region where your Auto Scaling group resides.&lt;/p&gt;
&lt;p&gt;3. On the navigation pane, choose Alarms and then choose Create alarm.&lt;/p&gt;
&lt;p&gt;4. Choose Select metric.&lt;/p&gt;
&lt;p&gt;5. On the All metrics tab, select a metric as follows:&lt;/p&gt;
&lt;p&gt;- To display only the metrics reported for your Auto Scaling groups, choose EC2, and then choose By Auto Scaling Group. To view the metrics for a single Auto Scaling group, type its name in the search field.&lt;/p&gt;
&lt;p&gt;- Select the row that contains the metric for the Auto Scaling group that you want to create an alarm on.&lt;/p&gt;
&lt;p&gt;- Choose Select metric. The Specify metric and conditions page appears, showing a graph and other information about the metric.&lt;/p&gt;
&lt;p&gt;6. For Period, choose the evaluation period for the alarm, for example, 1 minute. When evaluating the alarm, each period is aggregated into one data point.&lt;/p&gt;
&lt;p&gt;Note&lt;br&gt; A shorter period creates a more sensitive alarm.&lt;/p&gt;
&lt;p&gt;7. Under Conditions, do the following:&lt;/p&gt;
&lt;p&gt;- For Threshold type, choose Static.&lt;/p&gt;
&lt;p&gt;- For Whenever metric is, specify whether you want the value of the metric to be greater than, greater than or equal to, less than, or less than or equal to the threshold to trigger the alarm. Then, under than, enter the threshold value that you want to trigger the alarm.&lt;/p&gt;
&lt;p&gt;8. Under Additional configuration, do the following:&lt;/p&gt;
&lt;p&gt;- For Datapoints to alarm, enter the number of data points (evaluation periods) during which the metric value must meet the threshold conditions to trigger the alarm. For example, two consecutive periods of 5 minutes would take 10 minutes to trigger the alarm.&lt;/p&gt;
&lt;p&gt;- For Missing data treatment, choose what you want the alarm to do if some data is missing. For more information, see Configuring how CloudWatch alarms treat missing data in the Amazon CloudWatch User Guide.&lt;/p&gt;
&lt;p&gt;9. Choose Next.&lt;/p&gt;
&lt;p&gt;10. Under Notification, you can choose or create the Amazon SNS topic you want to use to receive notifications. Otherwise, you can remove the notification now and add one later when you are ready.&lt;/p&gt;
&lt;p&gt;11. Choose Next.&lt;/p&gt;
&lt;p&gt;12. Enter a name and, optionally, a description for the alarm, and then choose Next.&lt;/p&gt;
&lt;p&gt;13. Choose Create Alarm.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring CloudWatch metrics for your Auto Scaling groups and instances" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the CloudWatch console.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.639">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" name="Enable Auto Scaling group metrics" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable AWS EC2 Auto Scaling group metrics&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; Metrics are the fundamental concept in CloudWatch. A metric represents a time-ordered set of data points that are published to CloudWatch. Think of a metric as a variable to monitor, and the data points as representing the values of that variable over time. You can use these metrics to verify that your system is performing as expected.&lt;br&gt; Amazon EC2 Auto Scaling publishes data points to CloudWatch about your Auto Scaling groups. The metrics are available at one-minute granularity at no additional charge, but you must enable them. By doing this, you get continuous visibility into the operations of your Auto Scaling groups so that you can quickly respond to changes in your workloads.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Enable Auto Scaling group metrics (console)&lt;/p&gt;
&lt;p&gt;When you enable Auto Scaling group metrics, your Auto Scaling group sends sampled data to CloudWatch every minute. There is no charge for enabling these metrics.&lt;/p&gt;
&lt;p&gt;To enable group metrics&lt;/p&gt;
&lt;p&gt;1. Open the Amazon EC2 Auto Scaling console.&lt;/p&gt;
&lt;p&gt;2. Select the check box next to your Auto Scaling group. A split pane opens up in the bottom part of the page, showing information about the group that's selected.&lt;/p&gt;
&lt;p&gt;3. On the Monitoring tab, select the Auto Scaling group metrics collection, Enable check box located at the top of the page under Auto Scaling.&lt;/p&gt;
&lt;p&gt;Enable Auto Scaling group metrics (AWS CLI)&lt;/p&gt;
&lt;p&gt;To enable group metrics&lt;/p&gt;
&lt;p&gt;Enable one or more group metrics using the enable-metrics-collection command. For example, the following command enables the GroupDesiredCapacity metric.&lt;/p&gt;
&lt;p&gt;aws autoscaling enable-metrics-collection -auto-scaling-group-name my-asg \&lt;br&gt; -metrics GroupDesiredCapacity -granularity "1Minute"&lt;/p&gt;
&lt;p&gt;If you omit the -metrics option, all metrics are enabled.&lt;/p&gt;
&lt;p&gt;aws autoscaling enable-metrics-collection -auto-scaling-group-name my-asg \&lt;br&gt; -granularity "1Minute"&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring CloudWatch metrics for your Auto Scaling groups and instances" url="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To view CloudWatch metrics (AWS CLI)&lt;/p&gt;

	&lt;p&gt;To view all metrics for all your Auto Scaling groups, use the following list-metrics command.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling"&lt;/p&gt;

	&lt;p&gt;To view the metrics for a single Auto Scaling group, specify the AutoScalingGroupName dimension as follows.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling" -dimensions Name=AutoScalingGroupName,Value=my-asg&lt;/p&gt;

	&lt;p&gt;To view a single metric for all your Auto Scaling groups, specify the name of the metric as follows.&lt;/p&gt;

	&lt;p&gt;aws cloudwatch list-metrics -namespace "AWS/AutoScaling" -metric-name GroupDesiredCapacity&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.639">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.638">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.639">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP-A10-2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident. Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" mitigation="50"/>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING2" mitigation="50"/>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING3" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-AUTO-SCALING4" mitigation="50"/>
                <countermeasure ref="aws-tier-5.1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1a07417f-d5c5-4430-add8-0af6bebcfb79" diagramComponentId="8d52b4af-a609-4a59-bb7b-a6fd7daf9906" ref="66ad869e-218c-42c9-aae9-f082fa1a64c0" name="EC2 - AppServer - Primary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="dcb9d892-d80c-4b35-b9f9-97533b25951d" componentDefinitionRef="ec2" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.689">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing.
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.532">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;are encrypted.",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Source": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Owner": "AWS",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;},&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Scope": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon Unified CLI:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier.
  &lt;/div&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp;
   &lt;/div&gt;
   &lt;div&gt;
    &lt;br&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;b&gt;Impact&lt;/b&gt;:
&lt;div&gt;
 &lt;br&gt;
 &lt;div&gt;
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization.
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface::
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each NAT gateway is created in a specific Availability Zone and implemented with
  redundancy in that zone.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   and/or
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that
  are engineered to be isolated from failures in other Availability Zones. By launching
  instances in separate Availability Zones, you can protect your applications from the failure
  of a single location. AWS assigns a unique ID to each subnet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC).
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap.
  Some AWS regions have more than 2 availability zones and it is recommended to use more
  than 2 where possible.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The port for these inbound rules would depend on the Database engine used and the
  configured port.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The default values are:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt;
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt;
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt;
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt;
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt;
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When we create a default VPC, AWS does the following to set it up:
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt;
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt;
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt;
 &lt;/ol&gt;
  Label this Default VPC "Do Not Use".
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Impact&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just
  set a label to remind others not to use it.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt;
  &lt;ul&gt;
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;ul&gt;
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt;
 &lt;/ul&gt;
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;b&gt;Default Value&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
   The prescribed value is the default value.
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters
  &lt;/div&gt;
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name,
  &lt;/div&gt;
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:11.536">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                <countermeasure ref="aws-tier-6.9" mitigation="6"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4083b2bd-02b0-46db-b63e-2ec1d406bfe8" diagramComponentId="00f14b4c-0eef-4215-847a-8144c5631171" ref="1b0022d2-f4cf-4563-9df0-f1d0513bc75d" name="EC2 - WebServer - Secondary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="f04101d9-8ec2-48c8-85bd-8fdb78fef6f5" componentDefinitionRef="ec2" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.309">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.308">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing.
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;are encrypted.",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Source": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Owner": "AWS",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;},&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"Scope": {&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.139">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon Unified CLI:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier.
  &lt;/div&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp;
   &lt;/div&gt;
   &lt;div&gt;
    &lt;br&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;b&gt;Impact&lt;/b&gt;:
&lt;div&gt;
 &lt;br&gt;
 &lt;div&gt;
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization.
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Auto Scaling helps maintain application availability and allows you to scale your Amazon
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Additional properties can be defined through the launch configuration such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Instance Type&lt;/li&gt;
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt;
  &lt;li&gt;IAM Role&lt;/li&gt;
  &lt;li&gt;Security Groups&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface::
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each NAT gateway is created in a specific Availability Zone and implemented with
  redundancy in that zone.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   and/or
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that
  are engineered to be isolated from failures in other Availability Zones. By launching
  instances in separate Availability Zones, you can protect your applications from the failure
  of a single location. AWS assigns a unique ID to each subnet.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC).
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap.
  Some AWS regions have more than 2 availability zones and it is recommended to use more
  than 2 where possible.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The port for these inbound rules would depend on the Database engine used and the
  configured port.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The default values are:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt;
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt;
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt;
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt;
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt;
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  When we create a default VPC, AWS does the following to set it up:
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt;
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt;
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt;
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt;
 &lt;/ol&gt;
  Label this Default VPC "Do Not Use".
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Impact&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just
  set a label to remind others not to use it.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A route table contains a set of rules, called routes, that are used to determine where
  network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the
  routing for the subnet. A subnet can only be associated with one route table at a time, but
  you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt;
  &lt;ul&gt;
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;blockquote&gt;
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch
   &lt;/div&gt;
  &lt;/blockquote&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;ul&gt;
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt;
 &lt;/ul&gt;
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you
  can assign the instance to up to five security groups. Security groups act at the instance
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be
  assigned to a different set of security groups. If you don't specify a particular group at
  launch time, the instance is automatically assigned to the default security group for the
  VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a
  separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp;
&lt;div&gt;
 &lt;br&gt;
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;b&gt;Default Value&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
   The prescribed value is the default value.
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters
  &lt;/div&gt;
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name,
  &lt;/div&gt;
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.142">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                <countermeasure ref="aws-tier-6.9" mitigation="6"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="0e41190b-ad9f-438c-878b-beb567d28118" diagramComponentId="09370467-747f-4154-aa39-14e9ed0c6bd9" ref="ab440a87-f406-4c1e-9bdb-ca88bc2366c8" name="RDS - Primary" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="rds" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="10"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="10"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="10"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>Everyone can access the RDS database and obtain the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
                        attacker gains access to our systems and/or security systems</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
                        to them and exfiltrate the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no data backup retention policies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.897">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.897">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.897">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.896">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.824">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
  Customers can deploy RDS databases within a VPC through the configuration of:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt;
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt;
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt;
  &lt;li&gt;Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation: &lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --vpc-security-group-ids &amp;lt;data_tier_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are configured to use the Data Tier
                            Security Group:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.30" name="Do not allow the  RDS database to be publically accessible" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;Customers can deploy RDS databases within a VPC through the configuration of:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt;
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt;
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each publicly accessible DB instance, and make it private:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --no-publicly-accessible
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.30" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are publicly available:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.&lt;/p&gt;
&lt;p&gt;There are 6 database engines available for customers to run their database workloads on:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
 &lt;li&gt;MySQL&lt;/li&gt;
 &lt;li&gt;MariaDB&lt;/li&gt;
 &lt;li&gt;Oracle&lt;/li&gt;
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
 &lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;p&gt;aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --auto-minor-version-upgrade&lt;/p&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have Auto Minor Version Upgrade enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should be enabled.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Perform a snapshot of the DB instance:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds create-db-snapshot --db-snapshot-identifier db_snapshot --db-instance-identifier your_db_instance
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Confirm created snapshot is available (once snapshot process has completed):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all KMS Customer Managed Keys:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws kms list-aliases
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
   aws rds copy-db-snapshot --source-db-snapshot-identifier db_snapshot&amp;nbsp; --target-db-snapshot-identifier encrypted_db_snapshot --kms-key-id data_tier_kms_key
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
 &lt;li&gt;Restore a snapshot to the target DB instance(from previous step) with the same values as original db instance with additional encrypted storage values:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws rds restore-db-instance-from-db-snapshot --db-instance-identifier your_db_instance --db-snapshot-identifier encrypted_db_snapshot
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: copy db snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
            <reference name="Amazon docs: copy snapshot" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
            <reference name="Amazon docs: create db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
            <reference name="Amazon docs: create db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
            <reference name="Amazon docs: encryption" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.3.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all current RDS instances and review the encryption status of the DB
                            instance:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,
                            EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}'
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
                        for hosting customer created databases which can allow for a reduction in operational burden on
                        customers.&lt;/p&gt;
                        &lt;p&gt;RDS event subscriptions provide notification of selected event changes at a DB security
                        group level.&lt;/p&gt;
                        &lt;p&gt;Event subscriptions are designed to provide incident notification of events which may
                        affect the network availability of the RDS instance.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
                        &lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new event subscription for DB Security Group events:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;aws rds create-event-subscription --subscription-name rds_event_subscription
                        --sns-topic-arn
                        sns_topic_arn
                        --source-type db-security-group --event-categories rds_events
                        --source-ids events_source_ids --enabled&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-security-group&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  RDS event subscriptions provide notification of selected event changes at DataBase engine level such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Deletion&lt;/li&gt;
  &lt;li&gt;Failure&lt;/li&gt;
  &lt;li&gt;Failover&lt;/li&gt;
  &lt;li&gt;Low Storage&lt;/li&gt;
  &lt;li&gt;Maintenance&lt;/li&gt;
 &lt;/ul&gt;
  Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a new event subscription for DB instance level events:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds create-event-subscription --subscription-name &amp;lt;rds_event_subscription&amp;gt; --sns-topic-arn sns_topic_arn --source-type &amp;lt;db-instance&amp;gt; --event-categories &amp;lt;rds_events&amp;gt; --source-ids &amp;lt;events_source_ids&amp;gt; --enabled
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create event subscription" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
            <reference name="Amazon docs: describe event subcriptions" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
            <reference name="Amazon docs: user event messages" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
          </references>
          <standards>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-instance&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each no-multi-az DB instance, and make it Multi-AZ enabled:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --multi-az
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are Multi-AZ enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{MultiAZ:MultiAZ,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.8" name="Set Backup retention policy on RDS" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  There are 6 database engines available for customer to run their database workloads on:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;MariaDB&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Possible values are from 0 to 35 days.
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify each DB instance with a Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --backup-retention-period &amp;lt;backup_retention_period&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have a Backup Retention Period set (0 =
                            there is no backup retention in place, 7 = there are 7 daily backups retained):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in &amp;quot;References&amp;quot; section.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:13.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="database-publically-accesible">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="no-access-control-onrds">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.34" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                <countermeasure ref="aws-tier-6.34" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="no-notification-incident">
                  <countermeasures>
                    <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                    <countermeasure ref="aws-tier-4.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                <countermeasure ref="aws-tier-4.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="NOT_BACKUP_POLICIES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                <countermeasure ref="aws-tier-1.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="35f91c92-0050-4f6e-882a-beb03e088a06" diagramComponentId="a0645a68-1bd6-40dd-ae8c-01e10d80b643" ref="a8cd116e-31d0-43c0-9195-e9a2ba0c975f" name="Elastic File System (EFS)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="elastic-file-system" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.493">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.493">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.493">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.492">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.492">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.492">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.491">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-EFS8" name="Connect to EFS API using an Interface VPC Endpoint" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to EFS API using an Interface VPC Endpoint&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; To establish a private connection between your virtual private cloud (VPC) and the Amazon EFS API, you can create an interface VPC endpoint. You can use this connection to call the Amazon EFS API from your VPC without sending traffic over the Internet. The endpoint provides secure connectivity to the Amazon EFS API without requiring an Internet gateway, NAT instance, or virtual private network (VPN) connection.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; To create an interface VPC endpoint for Amazon EFS, use one of the following:&lt;/p&gt;
&lt;p&gt;- com.amazonaws.region.elasticfilesystem - Creates an endpoint for Amazon EFS API operations.&lt;br&gt; - com.amazonaws.region.elasticfilesystem-fips - Creates an endpoint for the Amazon EFS API that complies with the Federal Information Processing Standard (FIPS) 140-2&lt;/p&gt;
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt;
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt;
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. Create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, create an endpoint network interface in each subnet that you specify.&lt;/p&gt;
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt;
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, the default security group for the VPC is associated.&lt;/p&gt;
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable a private DNS for the endpoint to allow you to make requests to the service using its default DNS hostname.&lt;/p&gt;
&lt;p&gt;Important&lt;br&gt; A private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt;
&lt;p&gt;The private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt;
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see the Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt;
&lt;p&gt;6. After you create the interface endpoint, it's available for use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Working with Interface VPC Endpoints in Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/efs-vpc-endpoints.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view the information about the interface endpoint, choose Details. The DNS Names field displays the DNS names used to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.420">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS1" name="Control access to Amazon EFS resources" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to Amazon EFS resources&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permission policies to IAM identities (that is, users, groups, and roles). Some services, including Amazon EFS, also allow attaching permission policies to resources.&lt;br&gt; Policies attached to an IAM identity are referred to as identity-based policies (IAM policies) and policies attached to a resource are referred to as resource-based policies. Amazon EFS supports both identity-based policies and resource-based policies.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Identity-Based Policies (IAM Policies)&lt;/p&gt;
&lt;p&gt;You can attach policies to IAM identities to control access to the EFS API or to control NFS client access. For example, to grant a user permissions to create an Amazon EFS resource, such as a file system, you can attach a permission policy to a user or to a group that the user belongs to.&lt;/p&gt;
&lt;p&gt;The following is an example policy that provides the EFS and EC2 permissions required for a user to perform the CreateFileSystem action for your AWS account.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Sid" : "Stmt1EFSpermissions", "Effect": "Allow", "Action": [ "elasticfilesystem:CreateFileSystem", "elasticfilesystem:CreateMountTarget" ], "Resource": "arn:aws:elasticfilesystem:us-west-2:account-id:file-system/*" }, { "Sid" : "Stmt2EC2permissions", "Effect": "Allow", "Action": [ "ec2:DescribeSubnets", "ec2:CreateNetworkInterface", "ec2:DescribeNetworkInterfaces" ], "Resource": "*" } ] &lt;/p&gt;
&lt;p&gt;Resource-Based Policies&lt;/p&gt;
&lt;p&gt;You can use file system policies to control API access and NFS client access to the file system. Amazon EFS supports a resource-based policy for file systems called a FileSystemPolicy. Using an EFS FileSystemPolicy you can specify who has access to the file system and what actions they can perform on it. Using file system policies provides you an easy way to control access to your file systems, and lets you grant usage permissions to other accounts on a per-file system basis. The following file system policy grants ClientMount, or read-only, permissions to the EfsReadOnly IAM role.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Id": "read-only-example-policy02", "Statement": [ { "Sid": "efs-statement-example02", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/EfsReadOnly" }, "Action": [ "elasticfilesystem:ClientMount" ]&lt;/p&gt; } ] }
&lt;p&gt;Note&lt;br&gt; Amazon EFS file system policies have a 20,000 character limit.&lt;/p&gt;
&lt;p&gt;Using Access Points in IAM Policies&lt;/p&gt;
&lt;p&gt;You can use an IAM policy to make sure that a specific NFS client, identified by its IAM role, can only access a specific access point. To do this, use the elasticfilesystem:AccessPointArn IAM condition key. The AccessPointArn is the Amazon Resource Name (ARN) of the access point that the file system is mounted with.&lt;/p&gt;
&lt;p&gt;The following is an example of a file system policy that allows the IAM role app1 to access the file system using access point fsap-01234567. The policy also allows app2 to use the file system using access point fsap-89abcdef.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Id": "MyFileSystemPolicy", "Statement": [ { "Sid": "App1Access", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/app1" }, "Action": [ "elasticfilesystem:ClientMount", "elasticfilesystem:ClientWrite" ], "Condition": { "StringEquals": { "elasticfilesystem:AccessPointArn" : "arn:aws:elasticfilesystem:us-east-1:222233334444:access-point/fsap-01234567" } } }, { "Sid": "App2Access", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::111122223333:role/app2" }, "Action": [ "elasticfilesystem:ClientMount", "elasticfilesystem:ClientWrite" ], "Condition": { "StringEquals": { "elasticfilesystem:AccessPointArn" : "arn:aws:elasticfilesystem:us-east-1:222233334444:access-point/fsap-89abcdef" } } } ]&lt;br&gt; }&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of Managing Access Permissions to Your Amazon EFS Resources" url="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permission boundaries, Organization service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS5" name="Create CloudWatch alarms to monitor Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Creating CloudWatch alarms to monitor Amazon EFS&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm status changes. An alarm monitors a single metric over a time period you specify, and performs one or more actions based on the value of the metric in relation to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic or Auto Scaling policy.&lt;/p&gt;
&lt;p&gt;Alarms invoke actions for supported states changes only. CloudWatch alarms don't invoke actions simply because they reach a particular state; the status must have changed and been maintained for a specified amount of time.&lt;/p&gt;
&lt;p&gt;One important use of CloudWatch alarms for Amazon EFS is to enforce encryption at rest for your file system. You can enable encryption at rest for an Amazon EFS file system when it's created. To enforce data encryption-at-rest policies for Amazon EFS file systems, you can use Amazon CloudWatch and AWS CloudTrail in order to detect the creation of a file system and verify that encryption at rest is enabled. &lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; The following procedures outline how to create alarms for Amazon EFS.&lt;/p&gt;
&lt;p&gt;To set alarms using the CloudWatch console&lt;/p&gt;
&lt;p&gt;1. Sign in to the AWS Management Console and open the CloudWatch console.&lt;/p&gt;
&lt;p&gt;2. Choose Create Alarm. This launches the Create Alarm Wizard.&lt;/p&gt;
&lt;p&gt;3. Choose EFS Metrics and scroll through the Amazon EFS metrics to locate the metric you want to associate with the alarm. To display just the Amazon EFS metrics in this dialog box, search on the file system id of your file system. Select the metric to associate with the alarm and choose Next.&lt;/p&gt;
&lt;p&gt;4. Fill in the Name, Description, and Whenever values for the metric.&lt;/p&gt;
&lt;p&gt;5. If you want CloudWatch to send you an email when the alarm state is reached, in the Whenever this alarm: field, choose State is ALARM. In the Send notification to: field, choose an existing SNS topic. If you select Create topic, you can set the name and email addresses for a new email subscription list. This list is saved and appears in the field for future alarms.&lt;/p&gt;
&lt;p&gt;Note: If you use Create topic to create a new Amazon SNS topic, the email addresses must be verified in order to receive notifications. Emails are only sent when the alarm enters an alarm state. If this alarm state change happens before the email addresses are verified, they do not receive a notification.&lt;/p&gt;
&lt;p&gt;6. At this point, the Alarm Preview area gives you a chance to preview the alarm you're about to create. Choose Create Alarm.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating CloudWatch alarms to monitor Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/creating_alarms.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To test the rule that triggers an API call, you have to trigger it with its Specific operation as defined in the Cloudwatch console. &lt;/p&gt;

	&lt;p&gt;Note &lt;br /&gt;
In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. &lt;/p&gt;

	&lt;p&gt;To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. &lt;/p&gt;

	&lt;p&gt;An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS3" name="Encrypt data at rest in Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypt data at rest in Amazon EFS&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; In an encrypted file system, data and metadata are automatically encrypted before being written to the file system. Similarly, as data and metadata are read, they are automatically decrypted before being presented to the application. These processes are handled transparently by Amazon EFS, so you don't have to modify your applications.&lt;/p&gt;
&lt;p&gt;Amazon EFS uses the industry-standard AES-256 encryption algorithm to encrypt EFS data and metadata at rest&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Encrypting a file system at rest using the console&lt;/p&gt;
&lt;p&gt;When you create a new file system using the Amazon EFS console, encryption at rest is enabled by default. The following procedure describes how to enable encryption for a new file system when you create it from the console.&lt;/p&gt;
&lt;p&gt;To encrypt a new file system using the EFS console&lt;/p&gt;
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt;
&lt;p&gt;2. Choose Create file system to open the Create file system dialog box.&lt;/p&gt;
&lt;p&gt;3. (Optional) Enter a Name for your file system.&lt;/p&gt;
&lt;p&gt;4. In Virtual Private Cloud (VPC), choose your VPC, or keep it set to your default VPC.&lt;/p&gt;
&lt;p&gt;5. Choose Create to create a file system that uses the following service-recommended settings:&lt;/p&gt;
&lt;p&gt;- Encryption of data at rest enabled using your default key for Amazon EFS (aws/elasticfilesystem).&lt;/p&gt;
&lt;p&gt;- Automatic backups turned on - For more information, see Using AWS Backup with Amazon EFS.&lt;/p&gt;
&lt;p&gt;- Mount targets - Amazon EFS creates mount targets with the following settings:&lt;/p&gt;
&lt;p&gt;i. Located in each Availability Zone in the Region where the file system is created.&lt;br&gt; ii. Located in the default subnets of the VPC that you selected.&lt;br&gt; iii. Uses the VPC's default security group. You can manage security groups after the file system is created.&lt;/p&gt;
&lt;p&gt;- General Purpose performance mode - For more information, see Performance modes.&lt;/p&gt;
&lt;p&gt;- Bursting throughput mode - For more information, see Throughput modes.&lt;/p&gt;
&lt;p&gt;- Lifecycle management enabled with a 30-day policy - For more information, see Amazon EFS lifecycle management.&lt;/p&gt;
&lt;p&gt;6. The File systems page appears with a banner across the top showing the status of the file system you created. A link to access the file system details page appears in the banner when the file system becomes available.&lt;/p&gt;
&lt;p&gt;You now have a new encrypted-at-rest file system.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; Choosing to enable encryption at rest for your file system has a minimal effect on I/O latency and throughput.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encrypting data at rest" url="https://docs.aws.amazon.com/efs/latest/ug/encryption-at-rest.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure you have encryption of data at rest enabled while creating a new file system.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS6" name="Encrypt data in transit for Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypting data in transit for Amazon EFS&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; To encrypt data in transit for your Amazon EFS file system, enable Transport Layer Security (TLS) when you mount your file system using the Amazon EFS mount helper.&lt;br&gt; When encryption of data in transit is declared as a mount option for your Amazon EFS file system, the mount helper initializes a client stunnel process. Stunnel is an open source multipurpose network relay. The client stunnel process listens on a local port for inbound traffic, and the mount helper redirects Network File System (NFS) client traffic to this local port. The mount helper uses TLS version 1.2 to communicate with your file system.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; To mount your Amazon EFS file system with the mount helper with encryption of data in transit enabled&lt;/p&gt;
&lt;p&gt;1. Access the terminal for your instance through Secure Shell (SSH), and log in with the appropriate username.&lt;/p&gt;
&lt;p&gt;2. Run the following command to mount your file system.&lt;/p&gt;
&lt;p&gt;sudo mount -t efs -o tls fs-12345678:/ /mnt/efs&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; Choosing to enable encryption in transit for your file system has a minimal effect on I/O latency and throughput.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encrypting data in transit" url="https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure you have encryption of data in transit enabled.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS4" name="Enforce creating encrypted File Systems" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforce creating encrypted File Systems&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; You can create an AWS Identity and Access Management (IAM) identity-based policy to control whether users can create Amazon EFS file systems that are encrypted at rest.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Create an IAM Policy That Authorizes Users to Create Only Encrypted EFS File Systems&lt;/p&gt;
&lt;p&gt;You can create an IAM identity-based policy that authorizes users to create only encrypted Amazon EFS file systems using the console, the AWS CLI, and the API. The following procedure describes how to create such a policy using the IAM console and then apply the policy to a user in your account.&lt;/p&gt;
&lt;p&gt;To create an IAM policy to enforce creating encrypted EFS file systems&lt;/p&gt;
&lt;p&gt;1. Sign in to the AWS Management Console and open the IAM console.&lt;/p&gt;
&lt;p&gt;2. In the navigation pane, under Access management, choose Policies.&lt;/p&gt;
&lt;p&gt;3. Choose Create policy to display the Create policy page.&lt;/p&gt;
&lt;p&gt;4. Enter the following information using the Visual editor:&lt;/p&gt;
&lt;p&gt;- For Service, choose EFS.&lt;/p&gt;
&lt;p&gt;- For Actions, enter create in the search field, and then choose CreateFileSystem.&lt;/p&gt;
&lt;p&gt;- For Request conditions, choose Encrypted.&lt;/p&gt;
&lt;p&gt;5. Choose Review policy to display the Review policy page.&lt;/p&gt;
&lt;p&gt;6. Provide a Name and a Description for the policy. Verify the policy summary, including the Encrypted request condition. Choose Create policy to create the policy.&lt;/p&gt;
&lt;p&gt;To apply the policy to a user in your account&lt;/p&gt;
&lt;p&gt;1. In the IAM console, under Access management, choose Users.&lt;/p&gt;
&lt;p&gt;2. Select the user that you want to apply the policy to.&lt;/p&gt;
&lt;p&gt;3. Choose Add permissions to display the Add permissions page.&lt;/p&gt;
&lt;p&gt;4. Choose Attach existing policies directly.&lt;/p&gt;
&lt;p&gt;5. Enter the name of the EFS policy that you created in the previous procedure.&lt;/p&gt;
&lt;p&gt;6. Select and expand the policy. Then choose {}JSON to verify the policy content. It should look like the following JSON policy.&lt;/p&gt;
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Sid": "VisualEditor0", "Effect": "Allow", "Action": "elasticfilesystem:CreateFileSystem", &lt;a&gt;Condition&lt;/a&gt; "Bool": { "elasticfilesystem:Encrypted": "true" } }, "Resource": "*" } ]&lt;br&gt; }&lt;/p&gt;
&lt;p&gt;7. Choose Next: Review.&lt;/p&gt;
&lt;p&gt;8. Choose Add permissions to apply the policy to the user. This user can now only create Amazon EFS file systems that are encrypted at rest.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using IAM to Enforce Creating Encrypted File Systems" url="https://docs.aws.amazon.com/efs/latest/ug/using-iam-to-enforce-encryption-at-rest.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permission boundaries, Organization service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS7" name="Secure source ports for AWS EFS" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secure source ports for AWS EFS&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; To support a broad set of NFS clients, Amazon EFS allows connections from any source port.&lt;br&gt; Ensure that only privileged users can access Amazon EFS.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; If you require that only privileged users can access Amazon EFS, AWS recommends using the following client firewall rule:&lt;/p&gt;
&lt;p&gt;iptables -I OUTPUT 1 -m owner -uid-owner 1-4294967294 -m tcp -p tcp -dport 2049 -j DROP&lt;/p&gt;
&lt;p&gt;This command inserts a new rule at the start of the OUTPUT chain (-I OUTPUT 1). The rule prevents any unprivileged, nonkernel process (-m owner -uid-owner 1-4294967294) from opening a connection to the NFS port (-m tcp -p tcp -dport 2049).&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Source ports for working with EFS" url="https://docs.aws.amazon.com/efs/latest/ug/source-ports.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that only privileged users can access Amazon EFS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS10" name="Turn Off the ID Mapper for NFS utilities" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Turn Off the ID Mapper for NFS utilities&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; The NFS utilities in the operating system include a daemon called ID Mapper that manages mapping between usernames and IDs. In Amazon Linux, the daemon is called rpc.idmapd and on Ubuntu it is called idmapd. It translates user and group IDs into names, and vice versa. However, Amazon EFS deals only with numeric IDs.&lt;br&gt; AWS recommends turning this process off on your EC2 instances. On Amazon Linux, the ID mapper is usually disabled and if it is, don't enable it.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; To turn off the ID mapper, use the following commands.&lt;/p&gt;
&lt;p&gt;$ service rpcidmapd status&lt;br&gt; $ sudo service rpcidmapd stop&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Working with users, groups, and permissions at the Network File System (NFS) Level" url="https://docs.aws.amazon.com/efs/latest/ug/accessing-fs-nfs-permissions.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that ID Mapper for NFS utilities is turned off.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS2" name="Turn on automatic backups for Amazon EFS" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Turn on automatic backups for Amazon EFS&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; AWS Backup is a simple and cost-effective way to protect your data by backing up your Amazon EFS file systems. AWS Backup is a unified backup service designed to simplify the creation, migration, restoration, and deletion of backups, while providing improved reporting and auditing. AWS Backup makes it easier to develop a centralized backup strategy for legal, regulatory, and professional compliance. AWS Backup also makes it simpler to protect your AWS storage volumes, databases, and file systems by providing a central place where you can do the following:&lt;/p&gt;
&lt;p&gt;- Configure and audit the AWS resources that you want to back up&lt;br&gt; - Automate backup scheduling&lt;br&gt; - Set retention policies&lt;br&gt; - Monitor all recent backup and restore activity&lt;/p&gt;
&lt;p&gt;When you create a file system using the Amazon EFS Console, automatic backups are turned on by default. You can turn on automatic backups after creating your file system using the CLI or API. The default EFS backup plan uses the AWS Backup recommended settings for automatic backups - daily backups with a 35 day retention period. The backups created using the default EFS backup plan are stored in a default EFS backup vault which is also created by EFS on your behalf. The default backup plan and backup vault cannot be deleted. You can edit the default backup plan settings using the AWS Backup Management Console.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; Turning automatic backups on or off for existing file systems&lt;/p&gt;
&lt;p&gt;After you create a file system you can turn automatic backups on or off using the console, the CLI, or the EFS API.&lt;/p&gt;
&lt;p&gt;Turn automatic backups on or off for an existing file system (console)&lt;/p&gt;
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt;
&lt;p&gt;2. In the File systems page, choose the file system that you want to turn automatic backups on or off for and display the File system details page.&lt;/p&gt;
&lt;p&gt;3. Choose Edit in the General settings panel.&lt;/p&gt;
&lt;p&gt;4. To turn automatic backups on, select Enable automatic backups.&lt;/p&gt;
&lt;p&gt;5. Choose Save changes.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using AWS Backup with Amazon EFS" url="https://docs.aws.amazon.com/efs/latest/ug/awsbackup.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that automatic backups are turned on for Amazon EFS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-EFS9" name="Use Amazon EFS access points" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use Amazon EFS access points&lt;/p&gt;
&lt;p&gt;Rationale:&lt;br&gt; Amazon EFS access points are application-specific entry points into an EFS file system that make it easier to manage application access to shared datasets. Access points can enforce a user identity, including the user's POSIX groups, for all file system requests that are made through the access point. Access points can also enforce a different root directory for the file system so that clients can only access data in the specified directory or its subdirectories.&lt;/p&gt;
&lt;p&gt;You can use AWS Identity and Access Management (IAM) policies to enforce that specific applications use a specific access point. By combining IAM policies with access points, you can easily provide secure access to specific datasets for your applications.&lt;/p&gt;
&lt;p&gt;Remediation:&lt;br&gt; You can create Amazon EFS access points using the AWS Management Console or the AWS CLI. You can also create access points programmatically using the AWS SDKs or the Amazon EFS API directly.&lt;/p&gt;
&lt;p&gt;Creating an access point (console)&lt;/p&gt;
&lt;p&gt;1. Open the Amazon Elastic File System console.&lt;/p&gt;
&lt;p&gt;2. Choose Access points to open the Access points window.&lt;/p&gt;
&lt;p&gt;3. Choose Create access point to display the Create access point page.&lt;/p&gt;
&lt;p&gt;You can also open the Create access point page by choosing File Systems. Choose a file system Name or File system ID and then choose Access points and Create access point to create an access point for that file system.&lt;/p&gt;
&lt;p&gt;a. Enter the following information in the Details panel:&lt;/p&gt;
&lt;p&gt;- File system - Enter a file system name or ID and choose the matching file system, or just choose from the list that appears when you choose the input field.&lt;/p&gt;
&lt;p&gt;- (Optional) Name - Enter a name for the access point.&lt;/p&gt;
&lt;p&gt;- (Optional) Root directory path - You can specify a root directory for the access point; the default access point root is /. To enter a root directory path, use the format /foo/bar. For more information, see Enforcing a Root Directory with an Access Point.&lt;/p&gt;
&lt;p&gt;b. (Optional) In the POSIX user panel, you can specify the full POSIX identity to use to enforce user and group information for all file operations by NFS clients using the access point. For more information, see Enforcing a User Identity Using an Access Point.&lt;/p&gt;
&lt;p&gt;- User ID - Enter a numeric POSIX user ID for the user.&lt;/p&gt;
&lt;p&gt;- Group ID - Enter a numeric POSIX group ID for the user.&lt;/p&gt;
&lt;p&gt;- Secondary group IDs - Enter an optional comma-separated list of secondary group IDs.&lt;/p&gt;
&lt;p&gt;c. (Optional) For Root directory creation permissions you can specify the permissions to use when Amazon EFS creates the root directory path, if it is specified and doesn't already exist.&lt;/p&gt;
&lt;p&gt;- Owner user ID - enter the numeric POSIX user ID to use as the root directory owner.&lt;/p&gt;
&lt;p&gt;- Owner group ID - enter the numeric POSIX group ID to use as the root directory owner group.&lt;/p&gt;
&lt;p&gt;- Permissions - enter the Unix mode of the directory. A common configuration is 755. Ensure that the execute bit is set for the access point user so they are able to mount.&lt;/p&gt;
&lt;p&gt;4. Choose Create access point to create the access point using this configuration.&lt;/p&gt;
&lt;p&gt;For more information about EFS access points see Reference URLs.&lt;/p&gt;
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating and deleting access points" url="https://docs.aws.amazon.com/efs/latest/ug/create-access-point.html"/>
            <reference name="Working with Amazon EFS Access Points" url="https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have created Amazon EFS access points.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.421">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS3" mitigation="50"/>
                    <countermeasure ref="AWS-EFS4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS3" mitigation="50"/>
                <countermeasure ref="AWS-EFS4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS7" mitigation="20"/>
                    <countermeasure ref="AWS-EFS8" mitigation="20"/>
                    <countermeasure ref="AWS-EFS9" mitigation="20"/>
                    <countermeasure ref="AWS-VPC5" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="AWS-EFS10" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-EFS10" mitigation="20"/>
                <countermeasure ref="AWS-EFS7" mitigation="20"/>
                <countermeasure ref="AWS-EFS8" mitigation="20"/>
                <countermeasure ref="AWS-EFS9" mitigation="20"/>
                <countermeasure ref="AWS-VPC5" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ad07bc4e-5d93-4ad1-957e-1693dfbb190d" diagramComponentId="666b22ae-321e-4ba0-98ae-621970764c10" ref="73ed3559-0fbe-45d3-a925-f875c94713a7" name="Web- ELB" desc="" library="Hydras-AWS-Foundation" parentComponentRef="78a25555-77d3-4c76-af9a-adef000d5bbf" componentDefinitionRef="load-balancer" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets>
        <asset name="Personally Identifiable Information" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Credit Card Data" accessType="40"/>
        <asset name="Credit Card Data" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.022">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.022">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="unknown-resource-status" name="Unknown resource status" state="0" impact="100" issueId="" issueLink="">
          <desc>We do not have our resources current status and as a result lose control of some resources,
                        for example, we may believe these resources are inactive when in fact the status has changed and we are unaware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:10.020">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-1.12" name="Add SSL/TLS Certificate to App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.
&lt;br&gt;
&lt;br&gt; The SSL\TLS protocol uses an X.509 certificate (SSL\TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.
&lt;br&gt;
&lt;br&gt; You can create a certificate using a Third Party Certificate Authority, AWS Certificate Manager or a self signed certificate like OpenSSL.
&lt;br&gt;
&lt;br&gt; Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;br&gt;
&lt;br&gt; All the application traffic between the Web Tier instances and the App Tier ELB nodes should be encrypted using an SSL\TLS certificate.
&lt;br&gt;
&lt;b&gt;Remediation:&lt;/b&gt;
&lt;br&gt;
&lt;br&gt; Using the Amazon unified command line interface:
&lt;ul&gt;
 &lt;li&gt;Adding a HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): &lt;br&gt;
  &lt;blockquote&gt;
    aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
  &lt;/blockquote&gt; &lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note that if the ListenerDescriptions is empty, the ELB does not have a listener configured with a SSL\TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.9" name="Add SSL/TLS Certificate to Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Note that if the ListenerDescriptions element is empty, the ELB does not have a listener configured with a SSL/TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null ||&amp;nbsp; Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.845">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.13" name="Allow connectivity to the VPC Internet Gateway (IGW) and associate the Routing Table with Web tier ELB subnet (by default route (0.0.0.0/0))" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A route table contains a set of rules, called routes, that are used to determine where network traffic is directed.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have an IGW configured as gateway:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has an IGW configured as gateway:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnet-id,Values=&amp;lt;web_tier_elb_subnet1&amp;gt;,&amp;lt;web_tier_elb_subnet2&amp;gt; --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.15" name="Associate App Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --scheme internal --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;app_tier_subnet1&amp;gt; &amp;lt;app_tier_subnet2&amp;gt; --security-groups &amp;lt;app_tier_elb_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.1" name="Associate each Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br /&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;elb_name&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;application_subnet&amp;gt; --security-groups &amp;lt;application_security_groups&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;elb_name&amp;gt; --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.14" name="Associate Web Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Through Auto-Scaling Group configuration you can define:
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
  Availability Zones / subnets used
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;List existing load balancers:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   or
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new load balancer:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;web_tier_elb_subnet1&amp;gt; &amp;lt;web_tier_elb_subnet2&amp;gt; --security-groups &amp;lt;web_tier_elb_security_group&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.10" name="Configure Health Check for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of the instances that are healthy at the time of the health check is InService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of any instances that are unhealthy at the time of the health check is OutOfService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;",
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify App tier ELB to include appropriate health check:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB healthchecks" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-healthchecks.html"/>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify if health check is in place on the App tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.9" name="Configure Health Check for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon ELB will periodically sends pings, attempt connections, or sends requests to test the EC2 instances, these tests are called health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of the instances that are healthy at the time of the health check is InService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The status of any instances that are unhealthy at the time of the health check is OutOfService.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Ensure availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;",
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Modify Web tier ELB to include appropriate health check:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Identify if health check is in place on the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.13" name="Configure the latest SSL Security Policies for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
&lt;/div&gt;
&lt;div style=""&gt;
 &lt;ul&gt;
  &lt;li&gt;(Note that you should replace &amp;lt;app\_tier\_elb&amp;gt; with your App-tier ELB name, and &amp;lt;latest\_ssl\_policy&amp;gt; with the proper policy name)&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.10" name="Configure the latest SSL Security Policies for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
   (Note that you should replace &amp;lt;web\_tier\_elb&amp;gt; with your Web-tier ELB name, and _&amp;lt;latest\_ssl\_policy&amp;gt;_ with the proper policy name)
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;div&gt;
  &lt;div style=""&gt;
    aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.5" name="Create subnets for the Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add
                        one or more subnets in each Availability Zone. Each subnet must reside entirely within one
                        Availability Zone and cannot span zones. Availability Zones are distinct locations that are
                        engineered to be isolated from failures in other Availability Zones. By launching instances in
                        separate Availability Zones, you can protect your applications from the failure of a single
                        location. AWS assigns a unique ID to each subnet.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet
                        shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The
                        allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet
                        in a VPC, the CIDR blocks of the subnets must not overlap.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some AWS regions have more than 2 availability zones and it is recommended to use more than 2
                        where possible.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At least 2 subnets in 2 different availability zones (AZ) should be created in order to have
                        fault tolerance and high availability from the perspective of resource deployment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create subnets for Web tier ELB, and note the subnet id:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-subnet --vpc-id application_vpc
                        --cidr-block desired_cidr
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tag the above subnets with the Web tier ELB tags:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-tags --resources web_tier_elb_subnet1
                        web_tier_elb_subnet2 --tags Key=public_tier_tag,Value=public_tier_tag_value
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
  OR
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the subnets created for the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:public_tier_tag,Values=public_tier_tag_value --query &amp;quot;Subnets[*].SubnetId&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.847">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.26" name="Create the App tier ELB as Internal" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  When an internal load balancer is created, it receives a public DNS name with the following form:
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;div&gt;
   internal-name-123456789.region.elb.amazonaws.com
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new internal ELB for your App tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name app_tier_elb --scheme internal --listeners listener_config --subnets app_tier_subnet1 app_tier_subnet2 --security-groups app_tier_elb_security_group
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Register App tier instances with the new App tier ELB:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb register-instances-with-load-balancer --load-balancer-name app_tier_elb --instances &amp;lt;app_tier_instance1&amp;gt; &amp;lt;app_tier_instance2&amp;gt; &amp;lt;app_tier_instance3&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB internal load balancers" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-internal-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: register instances with load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/register-instances-with-load-balancer.html"/>
          </references>
          <standards>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check the Scheme of your App tier ELB, and make sure it is &amp;quot;internal&amp;quot;:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, Scheme:Scheme}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.21" name="Create the App tier ELB Security Group to only accept HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The SG associated with the App tier ELB should allow connectivity from the security group
                        associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on
                        the application design.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the security group associated with the App tier
                        ELB:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_elb_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_elb_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;create locally the below json file containing ingress rules for HTTP (TCP 80) and
                        HTTPS (TCP 443) ports only from and name it IpPermissions.json:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; },
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;lt;/span&amp;gt;&amp;gt;&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add to the security group associated with the App tier ELB the above ingress rules:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_elb_security_group&amp;nbsp;
                        --ip-permissions file:///PathTo/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the App tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, AppTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table&amp;nbsp;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the &amp;quot;AppTierELBSecurityGroups&amp;quot; from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from Web tier Security Group:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;app_tier_elb_security_group&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.22" name="Create the App tier Security Group to allow inbound connections from App tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is required for both the configured port and protocol for the listener on the back-end
                        instance and the port and protocol used for the health check.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This protects the App-server tier from unauthorized access, it is recommended to add inbound
                        security group rules that allow traffic for the specific application protocol and ports by
                        referencing as source the security group associated with the App tier ELB.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the App tier security group (use the &amp;quot;AppTierSecurityGroup&amp;quot;
                        element from Audit procedure):&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the
                        App tier ELB security group as the source of the connections:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_security_group
                        --protocol tcp --port specific_port
                        --source-group app_tier_elb_security_group
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List the ingress rules for the above security group, and make sure that allows
                            connections only from App tier ELB security group on specific ports:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws ec2 describe-security-groups --filters Name=tag:app_tier_tag,Values=app_tier_tag_value
                            --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions,
                            AppTierSecurityGroup:GroupId}&amp;quot; --output table
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.19" name="Create the Web tier Security Group to allow inbound connections from Web tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A security group acts as a virtual firewall for your instance to control inbound and
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;First remove all the ingress rules for the Web tier security group (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;web_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the Web tier ELB security group as the source of the connections:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;web_tier_elb_security_group&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the Web tier security group, and make sure that allows connections only from Web tier ELB security group on specific ports:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-9" name="Deploy AWS WAF policies to protect the ALB" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;For additional layers of defense, you can deploy AWS WAF policies to protect the Application Load Balancer. Having edge policies, application policies, and even private or internal policy enforcement layers adds to the visibility of communication requests and provides unified policy enforcement. For more information, see the blog post Deploying defense in depth using AWS Managed Rules for AWS WAF.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="Deploying defense in depth using AWS Managed Rules for AWS WAF" url="https://aws.amazon.com/blogs/security/deploying-defense-in-depth-using-aws-managed-rules-for-aws-waf-part-2/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that AWS WAF is blocking potentially dangerous requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.18" name="Do not use Web tier ELB Security Group in the Auto Scaling launch configuration of any other tier (Web, App)" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The web-tier ELB is the only one that is public facing and should have rules to allow inbound traffic to the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0).
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  Associating the web-tier ELB security group to any other instances that shouldn't be publicly accessible exposes them to unauthorized access.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create new launch configuration using the correct security groups for Web and/or App tier:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws autoscaling create-launch-configuration --launch-configuration-name &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt;/&amp;lt;app_tier_security_group --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;/&amp;lt;app_tier_instance_profile&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
          </references>
          <standards>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, WebTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the &amp;quot;WebTierELBSecurityGroups&amp;quot; from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security groups associated with all Autoscaling launch configurations and make sure that the above Web tier ELB security group is not present:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --query &amp;quot;LaunchConfigurations[*].{SecurityGroups:SecurityGroups, LaunchConfigurationName:LaunchConfigurationName}&amp;quot;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.2" name="Enable the ELB logging" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  AWS Elastic Load Balancers (ELBs) can record all incoming requests sent to the load balancer and store within logs on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified CLI:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;quot;AccessLog&amp;quot;: {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;Enabled&amp;quot;: true,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketName&amp;quot;: &amp;quot;string&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;EmitInterval&amp;quot;: integer,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketPrefix&amp;quot;: &amp;quot;string&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Update the Load Balancer attributes:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb modify-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; --load-balancer-attributes file:///tmp/ElbLogs.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-attributes.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: elb describe tags" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-tags.html"/>
            <reference name="Amazon docs: enable access logs" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html"/>
            <reference name="Amazon docs: modify load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/modify-load-balancer-attributes.html"/>
          </references>
          <standards>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Via Amazon unified CLI:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all ELB's:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName}'
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Confirm correct ELB is selected by review ELB tags:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-tags --load-balancer-names &amp;lt;elb_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Review selected ELB attributes and ensure Access Log is enabled:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.15" name="Implement mechanism to check that Public Web Tier SSL\TLS certificates are &gt;30 days from expiration" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;Public SSL\TLS certificates that are used for AWS resources such as the ELB or CloudFront should always be renewed prior to expiration both as a security best practice and to ensure the reputation of the web application is not impacted by an expired certificate.
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation&lt;/b&gt;:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;Request a certificate renewal from your CA, and upload the new certificate in IAM:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div&gt;
     aws iam upload-server-certificate --server-certificate-name &amp;lt;ssl_certificate_name&amp;gt; --certificate-body file://public_key_cert_file.pem --private-key file://my_private_key.pem --certificate-chain file://my_certificate_chain_file.pem
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;For Amazon Certificate Manager users the renewal is managed by ACM service&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe certificate" url="https://docs.aws.amazon.com/cli/latest/reference/acm/describe-certificate.html"/>
            <reference name="Id credentials server certs" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html"/>
            <reference name="Id credentials server certs manage" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html"/>
            <reference name="List certificates" url="https://docs.aws.amazon.com/cli/latest/reference/acm/list-certificates.html"/>
            <reference name="List server certificates" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-server-certificates.html"/>
            <reference name="Upload server certs" url="https://docs.aws.amazon.com/cli/latest/reference/iam/upload-server-certificate.html"/>
          </references>
          <standards>
            <standard ref="1.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List all SSL\TLS certificates stored in IAM and check the Expiration field&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws iam list-server-certificates
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
  For Amazon Certificate Manager users:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List ACM certificates and note the CertificateArnvalue of the certificates used by the app:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws acm list-certificates
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Get the details of the desired certificate and check the ExpirationDatevalue (the certificate expiration time as an Epoch timestamp):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws acm describe-certificate --certificate-arn &amp;lt;ssl_certificate_arn&amp;gt; --query "Certificate.{ExpirationDate:NotAfter, Status:Status, SubjectAlternativeNames:SubjectAlternativeNames, DomainName:DomainName}"&amp;nbsp;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-02" name="Select the Server Order Preference option" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
                        establishing a new connection supporting the Server Order Preference option. When this option is
                        selected, the load balancer selects the first cipher in its list that is in the client's list of
                        ciphers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;To enable Server Order Preference:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;For SSL Options, select Server Order Preference.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Click Save. &lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;For SSL Options, check that the option Server Order Preference is selected. &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.848">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.13" name="Set a HTTPS connection from all CloudFront Distributions to the Web Tier ELB origin" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Configure the Origin Protocol Policy for the Web tier ELB origin either to require that CloudFront fetches objects from your origin by using HTTPS or to require that CloudFront uses the protocol that the viewer used to request the objects. For example, if you choose Match Viewer for the Origin Protocol Policy and the viewer uses HTTPS to request an object from CloudFront, CloudFront also uses HTTPS to forward the request to your origin.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  In order to use HTTPS, an SSL\TLS certificate must be attached.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  To ensure that objects are encrypted from edge locations to the Web-Tier ELB origin according to the data classification policy, use Match Viewer.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;For configuring "OriginProtocolPolicy"first save locally the current distribution config:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id application_cfn_distribution_id&amp;nbsp; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;br&gt;
 &lt;/div&gt;
 &lt;div style=""&gt;
   Edit and replace "OriginProtocolPolicy"element in /tmp/cf-distribution.json with the below section:
 &lt;/div&gt;
 &lt;div style=""&gt;
   "OriginProtocolPolicy": "https-only",
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Retrieve the current ETag of your CloudFront distribution:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt;&amp;nbsp; --query "ETag"
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check the &amp;quot;OriginProtocolPolicy&amp;quot; used by application Cloudfront
                            distributions (it should be set as https-only):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws cloudfront list-distributions --query &amp;quot;DistributionList.Items[*].{Id:Id,
                            OriginProtocolPolicy:Origins.Items[*].CustomOriginConfig.OriginProtocolPolicy}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.17" name="Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
  The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;First remove all the ingress rules for the security group associated with the Web tier ELB:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 describe-security-groups --group-id &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style=""&gt;
   &lt;br /&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 revoke-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt; --ip-permissions file:///tmp/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: []
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; },
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: []
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; }
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     ]
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;Add to the security group associated with the Web tier ELB the above ingress rules:&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws ec2 authorize-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt;&amp;nbsp; --ip-permissions file:///PathTo/IpPermissions.json
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;your_web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, SecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  note the security group id from the output
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from any source IP (0.0.0.0/0)any source IP (0.0.0.0/0):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt; Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront can be used to deliver either the entire website, including dynamic,
  static, streaming, and interactive content using a global network of edge locations.
  Requests for your content are automatically routed to the nearest edge location, so content
  is delivered with the best possible performance. Amazon CloudFront is optimized to work
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3),
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and
  Amazon Route 53.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Amazon CloudFront gives you three options for accelerating your entire website while
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In
  addition to delivering securely from the edge, you can also configure CloudFront to use
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your
  origin to your end users.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt; Remediation&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}"
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.14" name="Use HTTPS listener for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the App Tier ELB is encrypted over the SSL\TLS channel.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
   Using the Amazon unified command line interface:
 &lt;/div&gt;
 &lt;div style=""&gt;
  &lt;ul&gt;
   &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if the App Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol == 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.11" name="Use HTTPS listener for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances).
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the Web Tier ELB is encrypted over the SSL\TLS channel.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div style=""&gt;
  &lt;div&gt;
    Using the Amazon unified command line interface:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;ul&gt;
    &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt;
   &lt;/ul&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
   &lt;div style=""&gt;
    &lt;div&gt;
      aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn
    &lt;/div&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name)
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Check if the Web Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
 &lt;blockquote&gt;
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol = 'TCP']}&amp;quot; --output table
  &lt;/div&gt;
 &lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-01" name="Use the Perfect Forward Secrecy feature" issueId="" issueLink="" platform="" cost="1" risk="53" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
                        Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
                        through the use of a unique random session key, and therefore prevents the decoding of captured
                        data, even if the secret long-term key is compromised.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;To begin using Perfect Forward Secrecy: &lt;br /&gt;&lt;/b&gt;Configure your load
                        balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that your load balancer is configured with the newly added Elliptic Curve
                            Cryptography (ECDHE) cipher suites.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:09.849">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                    <countermeasure ref="aws-tier-3.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                <countermeasure ref="aws-tier-3.13" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.13" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.17" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.19" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.21" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.22" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.1" mitigation="8"/>
                    <countermeasure ref="aws-tier-3.14" mitigation="8"/>
                    <countermeasure ref="aws-tier-3.15" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.18" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.26" mitigation="8"/>
                    <countermeasure ref="aws-tier-6.5" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-9" mitigation="4"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-9" mitigation="4"/>
                <countermeasure ref="aws-tier-3.1" mitigation="8"/>
                <countermeasure ref="aws-tier-3.14" mitigation="8"/>
                <countermeasure ref="aws-tier-3.15" mitigation="8"/>
                <countermeasure ref="aws-tier-5.1" mitigation="8"/>
                <countermeasure ref="aws-tier-6.13" mitigation="8"/>
                <countermeasure ref="aws-tier-6.17" mitigation="8"/>
                <countermeasure ref="aws-tier-6.18" mitigation="8"/>
                <countermeasure ref="aws-tier-6.19" mitigation="8"/>
                <countermeasure ref="aws-tier-6.21" mitigation="8"/>
                <countermeasure ref="aws-tier-6.22" mitigation="8"/>
                <countermeasure ref="aws-tier-6.26" mitigation="8"/>
                <countermeasure ref="aws-tier-6.5" mitigation="8"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.2" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="unknown-resource-status">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                    <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                <countermeasure ref="aws-tier-5.2" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="c38dbfa9-6b18-49ca-bed0-ba6e8c06eda3" diagramComponentId="0ab104c1-ff95-4742-a932-75814709465b" ref="78a25555-77d3-4c76-af9a-adef000d5bbf" name="VPC" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="vpc" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="aws-cloud"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.196">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-VPC2" name="Connect to VPC using an AWS Site-to-Site VPN connection" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to VPC using an AWS Site-to-Site VPN connection&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, instances that you launch into an Amazon VPC can't communicate with your own (remote) network. You can enable access to your remote network from your VPC by creating an AWS Site-to-Site VPN (Site-to-Site VPN) connection, and configuring routing to pass traffic through the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS VPC - VPN connections" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html"/>
            <reference name="What is AWS Site-to-Site VPN?" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs.&lt;/li&gt; 
  &lt;li&gt;Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic.&lt;/li&gt; 
  &lt;li&gt;If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance.&lt;/li&gt; 
  &lt;li&gt;(Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device.&lt;/li&gt; 
  &lt;li&gt;(Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing.&lt;/li&gt; 
  &lt;li&gt;Ensure that you have configured routing in your subnet route tables for the VPN connection.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.085">
              <output/>
            </source>
            <references>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC1" name="Control access to VPC resources with IAM identities and policies" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to VPC resources with IAM identities and policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely control access to AWS resources. IAM administrators control who can be authenticated (signed in) and authorized (have permissions) to use Amazon VPC resources. IAM is an AWS service that you can use with no additional charge. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Control access to VPC resources by using: 
&lt;/div&gt; 
&lt;div&gt;
  1. Identities: 
&lt;/div&gt; 
&lt;div&gt;
  Authentication is how you sign in to AWS using your identity credentials. 
&lt;/div&gt; 
&lt;div&gt;
  You must be authenticated (signed in to AWS) as the AWS account root user, an IAM user, or by assuming an IAM role. You can also use your company's single sign-on authentication, or even sign in using Google or Facebook. In these cases, your administrator previously set up identity federation using IAM roles. When you access AWS using credentials from another company, you are assuming a role indirectly. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Identity-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Identity-based policies are JSON permissions policy documents that you can attach to an identity, such as an IAM user, role, or group. These policies control what actions that identity can perform, on which resources, and under what conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Resource-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. Service administrators can use these policies to define what actions a specified principal (account member, user, or role) can perform on that resource and under what conditions. Resource-based policies are inline policies. There are no managed resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Access control lists (ACLs): 
&lt;/div&gt; 
&lt;div&gt;
  Access control lists (ACLs) are a type of policy that controls which principals (account members, users, or roles) have permissions to access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and access management for Amazon VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/security-iam.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC8" name="Create CloudWatch alarms to monitor a NAT gateway" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Creating CloudWatch alarms to monitor a NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor your NAT gateway using CloudWatch, which collects information from your NAT gateway and creates readable, near real-time metrics. You can use this information to monitor and troubleshoot your NAT gateway. NAT gateway metric data is provided at 1-minute intervals, and statistics are recorded for a period of 15 months. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the amount of traffic coming in or leaving the NAT gateway. The following alarm monitors the amount of outbound traffic from clients in your VPC through the NAT gateway to the internet. It sends a notification when the number of bytes reaches a threshold of 5,000,000 during a 15-minute period. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for outbound traffic through the NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the BytesOutToDestination metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt;= and enter 5000000. Enter 1 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 15 minutes and specify a statistic of Sum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can create an alarm that monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm to monitor port allocation errors 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the ErrorPortAllocation metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt; and enter 0. Enter 3 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 5 minutes and specify a statistic of Maximum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring NAT gateways using Amazon CloudWatch" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can test an alarm by setting it to any state using the SetAlarmState API action or the set-alarm-state command in the AWS CLI. This temporary state change lasts only until the next alarm comparison occurs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references>
              <reference name="Using Amazon CloudWatch Alarms" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC3" name="Create Route 53 alias records for VPC endpoints" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for VPC endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An Amazon Virtual Private Cloud (Amazon VPC) interface endpoint lets you use AWS PrivateLink to access selected services. These services include some AWS services, services that are hosted by other AWS customers and partners in their own VPCs, and supported AWS Marketplace partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To route domain traffic to an interface endpoint, use Amazon Route 53 to create an alias record. An alias record is a Route 53 extension to DNS. It's similar to a CNAME record, but you can create an alias record both for the root domain, such as example.com, and for subdomains, such as www.example.com. (You can create CNAME records only for subdomains.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To route traffic to an Amazon VPC interface endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the Route 53 hosted zone and the Amazon VPC interface endpoint using the same account, skip to step 2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the hosted zone and the interface endpoint using different accounts, get the service name for the interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console and open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the right pane, choose the endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the bottom pane, get the value of DNS name, for example, vpce-0fd00dd593example-dexample.cloudtrail.us-west-2.vpce.amazonaws.com. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the Route 53 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Hosted Zones. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the name of the hosted zone that has the domain name that you want to use to route traffic to your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create Record Set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Specify the following values: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Name 
&lt;/div&gt; 
&lt;div&gt;
  Enter the domain name that you want to use to route traffic to your Amazon VPC interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type 
&lt;/div&gt; 
&lt;div&gt;
  Choose A - IPv4 address. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias 
&lt;/div&gt; 
&lt;div&gt;
  Choose Yes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias Target 
&lt;/div&gt; 
&lt;div&gt;
  How you specify the value for Alias Target depends on whether you created the hosted zone and the interface endpoint using the same AWS account or different accounts: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Same account - Choose the list, and find the category Amazon VPC Endpoints. Then choose the DNS name of the interface endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Different accounts - Enter the value that you got in step 1 of this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Routing Policy 
&lt;/div&gt; 
&lt;div&gt;
  Choose the applicable routing policy. For more information, see Choosing a routing policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Evaluate Target Health 
&lt;/div&gt; 
&lt;div&gt;
  Accept the default value of No. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references>
              <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC7" name="Do not put sensitive data into VPC free-form fields" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with Amazon VPC or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into Amazon VPC or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon Virtual Private Cloud" url="https://docs.aws.amazon.com/vpc/latest/userguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC9" name="Enable VPC Traffic Mirroring" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable VPC Traffic Mirroring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an elastic network interface of Amazon EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Content inspection 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Threat monitoring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Troubleshooting 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The security and monitoring appliances can be deployed as individual instances, or as a fleet of instances behind a Network Load Balancer with a UDP listener. Traffic Mirroring supports filters and packet truncation, so that you only extract the traffic of interest to monitor by using monitoring tools of your choice. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your traffic mirror resources using any of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your traffic mirror resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC. The AWS CLI is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs. The AWS SDKs take care of many of the connection details, such as calculating signatures, handling request retries, and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as generating the hash to sign the request and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Traffic Mirroring?" url="https://docs.aws.amazon.com/vpc/latest/mirroring/what-is-traffic-mirroring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can review your traffic mirror targets, filters and sessions from Amazon VPC console:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Region selector, choose the AWS Region that you used when you created the VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the navigation pane, choose Traffic Mirroring, Mirror Targets/Mirror Filters/Mirror Sessions. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references>
              <reference name="Getting started with Traffic Mirroring" url="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.086">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.087">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.087">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC6" name="Use Network ACLs for VPC" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Network ACLs for VPC as an additional layer of security 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it's associated with. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the parts of a network ACL rule: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it's applied regardless of any higher-numbered rule that might contradict it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Protocol. You can specify any protocol that has a standard protocol number. For more information, see Protocol Numbers. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Source. [Inbound rules only] The source of the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Destination. [Outbound rules only] The destination for the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Allow/Deny. Whether to allow or deny the specified traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Review your Network ACLs using the console:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Network ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select a Network ACL to see details. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.087">
              <output/>
            </source>
            <references>
              <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC4" name="Use VPC endpoint policies" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use VPC endpoint policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When you create an endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. Endpoint policies must be written in JSON format. Not all services support endpoint policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service. If a service does not support endpoint policies, the endpoint allows full access to the service. An endpoint policy does not override or replace IAM user policies or service-specific policies (such as S3 bucket policies). It is a separate policy for controlling access from the endpoint to the specified service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You cannot attach more than one policy to an endpoint. However, you can modify the policy at any time. If you do modify a policy, it can take a few minutes for the changes to take effect. For more information about writing policies, see Overview of IAM Policies in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your endpoint policy can be like any IAM policy; however, take note of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Only the parts of the policy that relate to the specified service will work. You cannot use an endpoint policy to allow resources in your VPC to perform other actions; for example, if you add EC2 actions to an endpoint policy for an endpoint to Amazon S3, they will have no effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your policy must contain a Principal element. For additional information related gateway endpoints, see Endpoint policies for gateway endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The size of an endpoint policy cannot exceed 20,480 characters (including white space). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling access to services with VPC endpoints" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.087">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="Ccf-Priority" value="3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-16T10:16:12.087">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                    <countermeasure ref="AWS-VPC1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                <countermeasure ref="AWS-VPC1" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC7" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC8" mitigation="33"/>
                    <countermeasure ref="AWS-VPC9" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC8" mitigation="33"/>
                <countermeasure ref="AWS-VPC9" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="david@doughty.uk.net" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC4" mitigation="17"/>
                    <countermeasure ref="AWS-VPC5" mitigation="17"/>
                    <countermeasure ref="AWS-VPC6" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC3" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC3" mitigation="17"/>
                <countermeasure ref="AWS-VPC4" mitigation="17"/>
                <countermeasure ref="AWS-VPC5" mitigation="17"/>
                <countermeasure ref="AWS-VPC6" mitigation="17"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="Tcf-STRIDE" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
  <threadFixScans/>
</project>
